#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Interpolation
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EnergyMonitor")]
	public partial class EnergyMonitorEntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnalogHistory(AnalogHistory instance);
    partial void UpdateAnalogHistory(AnalogHistory instance);
    partial void DeleteAnalogHistory(AnalogHistory instance);
    partial void InsertAnalogMeasurePoint(AnalogMeasurePoint instance);
    partial void UpdateAnalogMeasurePoint(AnalogMeasurePoint instance);
    partial void DeleteAnalogMeasurePoint(AnalogMeasurePoint instance);
    partial void InsertAnalogInfo(AnalogInfo instance);
    partial void UpdateAnalogInfo(AnalogInfo instance);
    partial void DeleteAnalogInfo(AnalogInfo instance);
    partial void InsertAnalogHistoryHour(AnalogHistoryHour instance);
    partial void UpdateAnalogHistoryHour(AnalogHistoryHour instance);
    partial void DeleteAnalogHistoryHour(AnalogHistoryHour instance);
    partial void InsertInterpolationState(InterpolationState instance);
    partial void UpdateInterpolationState(InterpolationState instance);
    partial void DeleteInterpolationState(InterpolationState instance);
    partial void InsertInterpolationData(InterpolationData instance);
    partial void UpdateInterpolationData(InterpolationData instance);
    partial void DeleteInterpolationData(InterpolationData instance);
    #endregion
		
		public EnergyMonitorEntitiesDataContext() : 
				base(global::Interpolation.Properties.Settings.Default.EnergyMonitorConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EnergyMonitorEntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EnergyMonitorEntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EnergyMonitorEntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EnergyMonitorEntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AnalogHistory> AnalogHistory
		{
			get
			{
				return this.GetTable<AnalogHistory>();
			}
		}
		
		public System.Data.Linq.Table<AnalogMeasurePoint> AnalogMeasurePoint
		{
			get
			{
				return this.GetTable<AnalogMeasurePoint>();
			}
		}
		
		public System.Data.Linq.Table<AnalogInfo> AnalogInfo
		{
			get
			{
				return this.GetTable<AnalogInfo>();
			}
		}
		
		public System.Data.Linq.Table<AnalogHistoryHour> AnalogHistoryHour
		{
			get
			{
				return this.GetTable<AnalogHistoryHour>();
			}
		}
		
		public System.Data.Linq.Table<InterpolationState> InterpolationState
		{
			get
			{
				return this.GetTable<InterpolationState>();
			}
		}
		
		public System.Data.Linq.Table<InterpolationData> InterpolationData
		{
			get
			{
				return this.GetTable<InterpolationData>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnalogHistory")]
    [Serializable]
	public partial class AnalogHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AH_AnalogNo;
		
		private System.DateTime _AH_Time;
		
		private double _AH_Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAH_AnalogNoChanging(int value);
    partial void OnAH_AnalogNoChanged();
    partial void OnAH_TimeChanging(System.DateTime value);
    partial void OnAH_TimeChanged();
    partial void OnAH_ValueChanging(double value);
    partial void OnAH_ValueChanged();
    #endregion
		
		public AnalogHistory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AH_AnalogNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AH_AnalogNo
		{
			get
			{
				return this._AH_AnalogNo;
			}
			set
			{
				if ((this._AH_AnalogNo != value))
				{
					this.OnAH_AnalogNoChanging(value);
					this.SendPropertyChanging();
					this._AH_AnalogNo = value;
					this.SendPropertyChanged("AH_AnalogNo");
					this.OnAH_AnalogNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AH_Time", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime AH_Time
		{
			get
			{
				return this._AH_Time;
			}
			set
			{
				if ((this._AH_Time != value))
				{
					this.OnAH_TimeChanging(value);
					this.SendPropertyChanging();
					this._AH_Time = value;
					this.SendPropertyChanged("AH_Time");
					this.OnAH_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AH_Value", DbType="Float NOT NULL")]
		public double AH_Value
		{
			get
			{
				return this._AH_Value;
			}
			set
			{
				if ((this._AH_Value != value))
				{
					this.OnAH_ValueChanging(value);
					this.SendPropertyChanging();
					this._AH_Value = value;
					this.SendPropertyChanged("AH_Value");
					this.OnAH_ValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnalogMeasurePoint")]
    [Serializable]
    public partial class AnalogMeasurePoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AMP_AnalogNo;
		
		private string _AMP_Name;
		
		private byte _AMP_CptFlag;
		
		private byte _AMP_Statistic;
		
		private System.DateTime _AMP_Date;
		
		private double _AMP_Val;
		
		private System.Nullable<double> _AMP_ValRem;
		
		private string _AMP_Unit;
		
		private System.Nullable<int> _AMP_SchooldID;
		
		private System.Nullable<int> _AMP_SAreaID;
		
		private System.Nullable<int> _AMP_BuildingID;
		
		private System.Nullable<int> _AMP_RoomID;
		
		private System.Nullable<int> _AMP_DepartID;
		
		private string _AMP_PowerType;
		
		private string _AMP_PowerName;
		
		private byte _AMP_Timespan;
		
		private System.Nullable<int> _AMP_ParentNo;
		
		private string _AMP_OperationRule;
		
		private System.Nullable<double> _AMP_OperationParameter;
		
		private bool _AMP_State;
		
		private string _AMP_Encoding;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAMP_AnalogNoChanging(int value);
    partial void OnAMP_AnalogNoChanged();
    partial void OnAMP_NameChanging(string value);
    partial void OnAMP_NameChanged();
    partial void OnAMP_CptFlagChanging(byte value);
    partial void OnAMP_CptFlagChanged();
    partial void OnAMP_StatisticChanging(byte value);
    partial void OnAMP_StatisticChanged();
    partial void OnAMP_DateChanging(System.DateTime value);
    partial void OnAMP_DateChanged();
    partial void OnAMP_ValChanging(double value);
    partial void OnAMP_ValChanged();
    partial void OnAMP_ValRemChanging(System.Nullable<double> value);
    partial void OnAMP_ValRemChanged();
    partial void OnAMP_UnitChanging(string value);
    partial void OnAMP_UnitChanged();
    partial void OnAMP_SchooldIDChanging(System.Nullable<int> value);
    partial void OnAMP_SchooldIDChanged();
    partial void OnAMP_SAreaIDChanging(System.Nullable<int> value);
    partial void OnAMP_SAreaIDChanged();
    partial void OnAMP_BuildingIDChanging(System.Nullable<int> value);
    partial void OnAMP_BuildingIDChanged();
    partial void OnAMP_RoomIDChanging(System.Nullable<int> value);
    partial void OnAMP_RoomIDChanged();
    partial void OnAMP_DepartIDChanging(System.Nullable<int> value);
    partial void OnAMP_DepartIDChanged();
    partial void OnAMP_PowerTypeChanging(string value);
    partial void OnAMP_PowerTypeChanged();
    partial void OnAMP_PowerNameChanging(string value);
    partial void OnAMP_PowerNameChanged();
    partial void OnAMP_TimespanChanging(byte value);
    partial void OnAMP_TimespanChanged();
    partial void OnAMP_ParentNoChanging(System.Nullable<int> value);
    partial void OnAMP_ParentNoChanged();
    partial void OnAMP_OperationRuleChanging(string value);
    partial void OnAMP_OperationRuleChanged();
    partial void OnAMP_OperationParameterChanging(System.Nullable<double> value);
    partial void OnAMP_OperationParameterChanged();
    partial void OnAMP_StateChanging(bool value);
    partial void OnAMP_StateChanged();
    partial void OnAMP_EncodingChanging(string value);
    partial void OnAMP_EncodingChanged();
    #endregion
		
		public AnalogMeasurePoint()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_AnalogNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AMP_AnalogNo
		{
			get
			{
				return this._AMP_AnalogNo;
			}
			set
			{
				if ((this._AMP_AnalogNo != value))
				{
					this.OnAMP_AnalogNoChanging(value);
					this.SendPropertyChanging();
					this._AMP_AnalogNo = value;
					this.SendPropertyChanged("AMP_AnalogNo");
					this.OnAMP_AnalogNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string AMP_Name
		{
			get
			{
				return this._AMP_Name;
			}
			set
			{
				if ((this._AMP_Name != value))
				{
					this.OnAMP_NameChanging(value);
					this.SendPropertyChanging();
					this._AMP_Name = value;
					this.SendPropertyChanged("AMP_Name");
					this.OnAMP_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_CptFlag", DbType="TinyInt NOT NULL")]
		public byte AMP_CptFlag
		{
			get
			{
				return this._AMP_CptFlag;
			}
			set
			{
				if ((this._AMP_CptFlag != value))
				{
					this.OnAMP_CptFlagChanging(value);
					this.SendPropertyChanging();
					this._AMP_CptFlag = value;
					this.SendPropertyChanged("AMP_CptFlag");
					this.OnAMP_CptFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_Statistic", DbType="TinyInt NOT NULL")]
		public byte AMP_Statistic
		{
			get
			{
				return this._AMP_Statistic;
			}
			set
			{
				if ((this._AMP_Statistic != value))
				{
					this.OnAMP_StatisticChanging(value);
					this.SendPropertyChanging();
					this._AMP_Statistic = value;
					this.SendPropertyChanged("AMP_Statistic");
					this.OnAMP_StatisticChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_Date", DbType="DateTime NOT NULL")]
		public System.DateTime AMP_Date
		{
			get
			{
				return this._AMP_Date;
			}
			set
			{
				if ((this._AMP_Date != value))
				{
					this.OnAMP_DateChanging(value);
					this.SendPropertyChanging();
					this._AMP_Date = value;
					this.SendPropertyChanged("AMP_Date");
					this.OnAMP_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_Val", DbType="Float NOT NULL")]
		public double AMP_Val
		{
			get
			{
				return this._AMP_Val;
			}
			set
			{
				if ((this._AMP_Val != value))
				{
					this.OnAMP_ValChanging(value);
					this.SendPropertyChanging();
					this._AMP_Val = value;
					this.SendPropertyChanged("AMP_Val");
					this.OnAMP_ValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_ValRem", DbType="Float")]
		public System.Nullable<double> AMP_ValRem
		{
			get
			{
				return this._AMP_ValRem;
			}
			set
			{
				if ((this._AMP_ValRem != value))
				{
					this.OnAMP_ValRemChanging(value);
					this.SendPropertyChanging();
					this._AMP_ValRem = value;
					this.SendPropertyChanged("AMP_ValRem");
					this.OnAMP_ValRemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_Unit", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string AMP_Unit
		{
			get
			{
				return this._AMP_Unit;
			}
			set
			{
				if ((this._AMP_Unit != value))
				{
					this.OnAMP_UnitChanging(value);
					this.SendPropertyChanging();
					this._AMP_Unit = value;
					this.SendPropertyChanged("AMP_Unit");
					this.OnAMP_UnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_SchooldID", DbType="Int")]
		public System.Nullable<int> AMP_SchooldID
		{
			get
			{
				return this._AMP_SchooldID;
			}
			set
			{
				if ((this._AMP_SchooldID != value))
				{
					this.OnAMP_SchooldIDChanging(value);
					this.SendPropertyChanging();
					this._AMP_SchooldID = value;
					this.SendPropertyChanged("AMP_SchooldID");
					this.OnAMP_SchooldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_SAreaID", DbType="Int")]
		public System.Nullable<int> AMP_SAreaID
		{
			get
			{
				return this._AMP_SAreaID;
			}
			set
			{
				if ((this._AMP_SAreaID != value))
				{
					this.OnAMP_SAreaIDChanging(value);
					this.SendPropertyChanging();
					this._AMP_SAreaID = value;
					this.SendPropertyChanged("AMP_SAreaID");
					this.OnAMP_SAreaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_BuildingID", DbType="Int")]
		public System.Nullable<int> AMP_BuildingID
		{
			get
			{
				return this._AMP_BuildingID;
			}
			set
			{
				if ((this._AMP_BuildingID != value))
				{
					this.OnAMP_BuildingIDChanging(value);
					this.SendPropertyChanging();
					this._AMP_BuildingID = value;
					this.SendPropertyChanged("AMP_BuildingID");
					this.OnAMP_BuildingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_RoomID", DbType="Int")]
		public System.Nullable<int> AMP_RoomID
		{
			get
			{
				return this._AMP_RoomID;
			}
			set
			{
				if ((this._AMP_RoomID != value))
				{
					this.OnAMP_RoomIDChanging(value);
					this.SendPropertyChanging();
					this._AMP_RoomID = value;
					this.SendPropertyChanged("AMP_RoomID");
					this.OnAMP_RoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_DepartID", DbType="Int")]
		public System.Nullable<int> AMP_DepartID
		{
			get
			{
				return this._AMP_DepartID;
			}
			set
			{
				if ((this._AMP_DepartID != value))
				{
					this.OnAMP_DepartIDChanging(value);
					this.SendPropertyChanging();
					this._AMP_DepartID = value;
					this.SendPropertyChanged("AMP_DepartID");
					this.OnAMP_DepartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_PowerType", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string AMP_PowerType
		{
			get
			{
				return this._AMP_PowerType;
			}
			set
			{
				if ((this._AMP_PowerType != value))
				{
					this.OnAMP_PowerTypeChanging(value);
					this.SendPropertyChanging();
					this._AMP_PowerType = value;
					this.SendPropertyChanged("AMP_PowerType");
					this.OnAMP_PowerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_PowerName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string AMP_PowerName
		{
			get
			{
				return this._AMP_PowerName;
			}
			set
			{
				if ((this._AMP_PowerName != value))
				{
					this.OnAMP_PowerNameChanging(value);
					this.SendPropertyChanging();
					this._AMP_PowerName = value;
					this.SendPropertyChanged("AMP_PowerName");
					this.OnAMP_PowerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_Timespan", DbType="TinyInt NOT NULL")]
		public byte AMP_Timespan
		{
			get
			{
				return this._AMP_Timespan;
			}
			set
			{
				if ((this._AMP_Timespan != value))
				{
					this.OnAMP_TimespanChanging(value);
					this.SendPropertyChanging();
					this._AMP_Timespan = value;
					this.SendPropertyChanged("AMP_Timespan");
					this.OnAMP_TimespanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_ParentNo", DbType="Int")]
		public System.Nullable<int> AMP_ParentNo
		{
			get
			{
				return this._AMP_ParentNo;
			}
			set
			{
				if ((this._AMP_ParentNo != value))
				{
					this.OnAMP_ParentNoChanging(value);
					this.SendPropertyChanging();
					this._AMP_ParentNo = value;
					this.SendPropertyChanged("AMP_ParentNo");
					this.OnAMP_ParentNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_OperationRule", DbType="VarChar(500)")]
		public string AMP_OperationRule
		{
			get
			{
				return this._AMP_OperationRule;
			}
			set
			{
				if ((this._AMP_OperationRule != value))
				{
					this.OnAMP_OperationRuleChanging(value);
					this.SendPropertyChanging();
					this._AMP_OperationRule = value;
					this.SendPropertyChanged("AMP_OperationRule");
					this.OnAMP_OperationRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_OperationParameter", DbType="Float")]
		public System.Nullable<double> AMP_OperationParameter
		{
			get
			{
				return this._AMP_OperationParameter;
			}
			set
			{
				if ((this._AMP_OperationParameter != value))
				{
					this.OnAMP_OperationParameterChanging(value);
					this.SendPropertyChanging();
					this._AMP_OperationParameter = value;
					this.SendPropertyChanged("AMP_OperationParameter");
					this.OnAMP_OperationParameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_State", DbType="Bit NOT NULL")]
		public bool AMP_State
		{
			get
			{
				return this._AMP_State;
			}
			set
			{
				if ((this._AMP_State != value))
				{
					this.OnAMP_StateChanging(value);
					this.SendPropertyChanging();
					this._AMP_State = value;
					this.SendPropertyChanged("AMP_State");
					this.OnAMP_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMP_Encoding", DbType="VarChar(500)")]
		public string AMP_Encoding
		{
			get
			{
				return this._AMP_Encoding;
			}
			set
			{
				if ((this._AMP_Encoding != value))
				{
					this.OnAMP_EncodingChanging(value);
					this.SendPropertyChanging();
					this._AMP_Encoding = value;
					this.SendPropertyChanged("AMP_Encoding");
					this.OnAMP_EncodingChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnalogInfo")]
    [Serializable]
    public partial class AnalogInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _RTU_No;
		
		private int _AI_No;
		
		private int _AI_Serial;
		
		private string _AI_Name;
		
		private double _AI_LogicalLow;
		
		private double _AI_LogicalUp;
		
		private byte _AI_Decimal;
		
		private byte _AI_Cptflag;
		
		private double _AI_Base;
		
		private double _AI_Rate;
		
		private System.Nullable<double> _AI_LockVal;
		
		private byte _AI_LockFlag;
		
		private byte _AI_Timespace;
		
		private string _AI_Unit;
		
		private byte _AI_State;
		
		private short _AI_Level;
		
		private byte _AI_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRTU_NoChanging(short value);
    partial void OnRTU_NoChanged();
    partial void OnAI_NoChanging(int value);
    partial void OnAI_NoChanged();
    partial void OnAI_SerialChanging(int value);
    partial void OnAI_SerialChanged();
    partial void OnAI_NameChanging(string value);
    partial void OnAI_NameChanged();
    partial void OnAI_LogicalLowChanging(double value);
    partial void OnAI_LogicalLowChanged();
    partial void OnAI_LogicalUpChanging(double value);
    partial void OnAI_LogicalUpChanged();
    partial void OnAI_DecimalChanging(byte value);
    partial void OnAI_DecimalChanged();
    partial void OnAI_CptflagChanging(byte value);
    partial void OnAI_CptflagChanged();
    partial void OnAI_BaseChanging(double value);
    partial void OnAI_BaseChanged();
    partial void OnAI_RateChanging(double value);
    partial void OnAI_RateChanged();
    partial void OnAI_LockValChanging(System.Nullable<double> value);
    partial void OnAI_LockValChanged();
    partial void OnAI_LockFlagChanging(byte value);
    partial void OnAI_LockFlagChanged();
    partial void OnAI_TimespaceChanging(byte value);
    partial void OnAI_TimespaceChanged();
    partial void OnAI_UnitChanging(string value);
    partial void OnAI_UnitChanged();
    partial void OnAI_StateChanging(byte value);
    partial void OnAI_StateChanged();
    partial void OnAI_LevelChanging(short value);
    partial void OnAI_LevelChanged();
    partial void OnAI_TypeChanging(byte value);
    partial void OnAI_TypeChanged();
    #endregion
		
		public AnalogInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RTU_No", DbType="SmallInt NOT NULL")]
		public short RTU_No
		{
			get
			{
				return this._RTU_No;
			}
			set
			{
				if ((this._RTU_No != value))
				{
					this.OnRTU_NoChanging(value);
					this.SendPropertyChanging();
					this._RTU_No = value;
					this.SendPropertyChanged("RTU_No");
					this.OnRTU_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_No", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AI_No
		{
			get
			{
				return this._AI_No;
			}
			set
			{
				if ((this._AI_No != value))
				{
					this.OnAI_NoChanging(value);
					this.SendPropertyChanging();
					this._AI_No = value;
					this.SendPropertyChanged("AI_No");
					this.OnAI_NoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Serial", DbType="Int NOT NULL")]
		public int AI_Serial
		{
			get
			{
				return this._AI_Serial;
			}
			set
			{
				if ((this._AI_Serial != value))
				{
					this.OnAI_SerialChanging(value);
					this.SendPropertyChanging();
					this._AI_Serial = value;
					this.SendPropertyChanged("AI_Serial");
					this.OnAI_SerialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Name", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string AI_Name
		{
			get
			{
				return this._AI_Name;
			}
			set
			{
				if ((this._AI_Name != value))
				{
					this.OnAI_NameChanging(value);
					this.SendPropertyChanging();
					this._AI_Name = value;
					this.SendPropertyChanged("AI_Name");
					this.OnAI_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_LogicalLow", DbType="Float NOT NULL")]
		public double AI_LogicalLow
		{
			get
			{
				return this._AI_LogicalLow;
			}
			set
			{
				if ((this._AI_LogicalLow != value))
				{
					this.OnAI_LogicalLowChanging(value);
					this.SendPropertyChanging();
					this._AI_LogicalLow = value;
					this.SendPropertyChanged("AI_LogicalLow");
					this.OnAI_LogicalLowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_LogicalUp", DbType="Float NOT NULL")]
		public double AI_LogicalUp
		{
			get
			{
				return this._AI_LogicalUp;
			}
			set
			{
				if ((this._AI_LogicalUp != value))
				{
					this.OnAI_LogicalUpChanging(value);
					this.SendPropertyChanging();
					this._AI_LogicalUp = value;
					this.SendPropertyChanged("AI_LogicalUp");
					this.OnAI_LogicalUpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Decimal", DbType="TinyInt NOT NULL")]
		public byte AI_Decimal
		{
			get
			{
				return this._AI_Decimal;
			}
			set
			{
				if ((this._AI_Decimal != value))
				{
					this.OnAI_DecimalChanging(value);
					this.SendPropertyChanging();
					this._AI_Decimal = value;
					this.SendPropertyChanged("AI_Decimal");
					this.OnAI_DecimalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Cptflag", DbType="TinyInt NOT NULL")]
		public byte AI_Cptflag
		{
			get
			{
				return this._AI_Cptflag;
			}
			set
			{
				if ((this._AI_Cptflag != value))
				{
					this.OnAI_CptflagChanging(value);
					this.SendPropertyChanging();
					this._AI_Cptflag = value;
					this.SendPropertyChanged("AI_Cptflag");
					this.OnAI_CptflagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Base", DbType="Float NOT NULL")]
		public double AI_Base
		{
			get
			{
				return this._AI_Base;
			}
			set
			{
				if ((this._AI_Base != value))
				{
					this.OnAI_BaseChanging(value);
					this.SendPropertyChanging();
					this._AI_Base = value;
					this.SendPropertyChanged("AI_Base");
					this.OnAI_BaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Rate", DbType="Float NOT NULL")]
		public double AI_Rate
		{
			get
			{
				return this._AI_Rate;
			}
			set
			{
				if ((this._AI_Rate != value))
				{
					this.OnAI_RateChanging(value);
					this.SendPropertyChanging();
					this._AI_Rate = value;
					this.SendPropertyChanged("AI_Rate");
					this.OnAI_RateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_LockVal", DbType="Float")]
		public System.Nullable<double> AI_LockVal
		{
			get
			{
				return this._AI_LockVal;
			}
			set
			{
				if ((this._AI_LockVal != value))
				{
					this.OnAI_LockValChanging(value);
					this.SendPropertyChanging();
					this._AI_LockVal = value;
					this.SendPropertyChanged("AI_LockVal");
					this.OnAI_LockValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_LockFlag", DbType="TinyInt NOT NULL")]
		public byte AI_LockFlag
		{
			get
			{
				return this._AI_LockFlag;
			}
			set
			{
				if ((this._AI_LockFlag != value))
				{
					this.OnAI_LockFlagChanging(value);
					this.SendPropertyChanging();
					this._AI_LockFlag = value;
					this.SendPropertyChanged("AI_LockFlag");
					this.OnAI_LockFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Timespace", DbType="TinyInt NOT NULL")]
		public byte AI_Timespace
		{
			get
			{
				return this._AI_Timespace;
			}
			set
			{
				if ((this._AI_Timespace != value))
				{
					this.OnAI_TimespaceChanging(value);
					this.SendPropertyChanging();
					this._AI_Timespace = value;
					this.SendPropertyChanged("AI_Timespace");
					this.OnAI_TimespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Unit", DbType="VarChar(500)")]
		public string AI_Unit
		{
			get
			{
				return this._AI_Unit;
			}
			set
			{
				if ((this._AI_Unit != value))
				{
					this.OnAI_UnitChanging(value);
					this.SendPropertyChanging();
					this._AI_Unit = value;
					this.SendPropertyChanged("AI_Unit");
					this.OnAI_UnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_State", DbType="TinyInt NOT NULL")]
		public byte AI_State
		{
			get
			{
				return this._AI_State;
			}
			set
			{
				if ((this._AI_State != value))
				{
					this.OnAI_StateChanging(value);
					this.SendPropertyChanging();
					this._AI_State = value;
					this.SendPropertyChanged("AI_State");
					this.OnAI_StateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Level", DbType="SmallInt NOT NULL")]
		public short AI_Level
		{
			get
			{
				return this._AI_Level;
			}
			set
			{
				if ((this._AI_Level != value))
				{
					this.OnAI_LevelChanging(value);
					this.SendPropertyChanging();
					this._AI_Level = value;
					this.SendPropertyChanged("AI_Level");
					this.OnAI_LevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AI_Type", DbType="TinyInt NOT NULL")]
		public byte AI_Type
		{
			get
			{
				return this._AI_Type;
			}
			set
			{
				if ((this._AI_Type != value))
				{
					this.OnAI_TypeChanging(value);
					this.SendPropertyChanging();
					this._AI_Type = value;
					this.SendPropertyChanged("AI_Type");
					this.OnAI_TypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnalogHistoryHour")]
    [Serializable]
    public partial class AnalogHistoryHour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AHH_AnalogNo;
		
		private System.DateTime _AHH_HTime;
		
		private double _AHH_Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAHH_AnalogNoChanging(int value);
    partial void OnAHH_AnalogNoChanged();
    partial void OnAHH_HTimeChanging(System.DateTime value);
    partial void OnAHH_HTimeChanged();
    partial void OnAHH_ValueChanging(double value);
    partial void OnAHH_ValueChanged();
    #endregion
		
		public AnalogHistoryHour()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AHH_AnalogNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AHH_AnalogNo
		{
			get
			{
				return this._AHH_AnalogNo;
			}
			set
			{
				if ((this._AHH_AnalogNo != value))
				{
					this.OnAHH_AnalogNoChanging(value);
					this.SendPropertyChanging();
					this._AHH_AnalogNo = value;
					this.SendPropertyChanged("AHH_AnalogNo");
					this.OnAHH_AnalogNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AHH_HTime", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime AHH_HTime
		{
			get
			{
				return this._AHH_HTime;
			}
			set
			{
				if ((this._AHH_HTime != value))
				{
					this.OnAHH_HTimeChanging(value);
					this.SendPropertyChanging();
					this._AHH_HTime = value;
					this.SendPropertyChanged("AHH_HTime");
					this.OnAHH_HTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AHH_Value", DbType="Float NOT NULL")]
		public double AHH_Value
		{
			get
			{
				return this._AHH_Value;
			}
			set
			{
				if ((this._AHH_Value != value))
				{
					this.OnAHH_ValueChanging(value);
					this.SendPropertyChanging();
					this._AHH_Value = value;
					this.SendPropertyChanged("AHH_Value");
					this.OnAHH_ValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InterpolationState")]
    [Serializable]
    public partial class InterpolationState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AnalogNo;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private double _Lvalue;
		
		private double _Rvalue;
		
		private System.Nullable<int> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAnalogNoChanging(int value);
    partial void OnAnalogNoChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    partial void OnLvalueChanging(double value);
    partial void OnLvalueChanged();
    partial void OnRvalueChanging(double value);
    partial void OnRvalueChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public InterpolationState()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnalogNo", DbType="Int NOT NULL")]
		public int AnalogNo
		{
			get
			{
				return this._AnalogNo;
			}
			set
			{
				if ((this._AnalogNo != value))
				{
					this.OnAnalogNoChanging(value);
					this.SendPropertyChanging();
					this._AnalogNo = value;
					this.SendPropertyChanged("AnalogNo");
					this.OnAnalogNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lvalue", DbType="Float NOT NULL")]
		public double Lvalue
		{
			get
			{
				return this._Lvalue;
			}
			set
			{
				if ((this._Lvalue != value))
				{
					this.OnLvalueChanging(value);
					this.SendPropertyChanging();
					this._Lvalue = value;
					this.SendPropertyChanged("Lvalue");
					this.OnLvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rvalue", DbType="Float NOT NULL")]
		public double Rvalue
		{
			get
			{
				return this._Rvalue;
			}
			set
			{
				if ((this._Rvalue != value))
				{
					this.OnRvalueChanging(value);
					this.SendPropertyChanging();
					this._Rvalue = value;
					this.SendPropertyChanged("Rvalue");
					this.OnRvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InterpolationData")]
    [Serializable]
    public partial class InterpolationData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AnalogNo;
		
		private System.DateTime _ITime;
		
		private double _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAnalogNoChanging(int value);
    partial void OnAnalogNoChanged();
    partial void OnITimeChanging(System.DateTime value);
    partial void OnITimeChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    #endregion
		
		public InterpolationData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnalogNo", DbType="Int NOT NULL")]
		public int AnalogNo
		{
			get
			{
				return this._AnalogNo;
			}
			set
			{
				if ((this._AnalogNo != value))
				{
					this.OnAnalogNoChanging(value);
					this.SendPropertyChanging();
					this._AnalogNo = value;
					this.SendPropertyChanged("AnalogNo");
					this.OnAnalogNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ITime", DbType="DateTime NOT NULL")]
		public System.DateTime ITime
		{
			get
			{
				return this._ITime;
			}
			set
			{
				if ((this._ITime != value))
				{
					this.OnITimeChanging(value);
					this.SendPropertyChanging();
					this._ITime = value;
					this.SendPropertyChanged("ITime");
					this.OnITimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
