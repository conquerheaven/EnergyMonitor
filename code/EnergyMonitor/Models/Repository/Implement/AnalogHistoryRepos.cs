using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using EnergyMonitor.Models.LinqEntity;
using EnergyMonitor.Models.Repository.Interface;
using EnergyMonitor.Models.Repository.Entity;
using System.Collections;
using System.Data;
using System.Text.RegularExpressions;
using EnergyMonitor.Models.Entity;


namespace EnergyMonitor.Models.Repository.Implement
{
    public class AnalogHistoryRepos : IAnalogHistoryRepos
    {
        private EnergyMonitorDataContext _dataContext;

        public AnalogHistoryRepos()
        {
            _dataContext = new EnergyMonitorDataContext();
        }

        #region IAnalogHistory Members
        
        /// <summary>
        /// 根据传入的时间获取光华楼按能耗类型分类的测点在该时间前的最大历史数据
        /// </summary>
        /// <param name="id"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>        
        /// <returns></returns>
        public IList<ChartStatisEntity> GetGuangHuaConsupmtion(int id, DateTime endTime, string[] powerTypes)
        {            
            IQueryable<ChartStatisEntity> ValList = null;
            ValList = from amp in _dataContext.AnalogMeasurePoints
                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                          where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                          group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                          select new ChartStatisEntity
                          {
                              PowerType = g.Key.AMP_PowerType,
                              PowerName = g.Key.AMP_PowerName,
                              StatisVal = g.Max()
                          };      
            if (powerTypes != null)
            {
                ValList = ValList.Where(x => powerTypes.Contains(x.PowerType));               
            }
            return ValList.ToList();
        }

        /// <summary>
        /// 根据月粒度得到指定房间的能耗
        /// </summary>
        /// <param name="roomID"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity>  GetEnergyMonthConsume(int roomID, DateTime startTime, DateTime endTime)
        {
            var list = from amp in _dataContext.AnalogMeasurePoints
                       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                       where amp.AMP_RoomID == roomID && ahm.AHM_MTime >= startTime && ahm.AHM_MTime < endTime
                       group ahm by ahm.AHM_MTime into g
                       select new ChartStatisEntity
                       {
                           MTime = g.Key,
                           StatisVal = g.Sum(x => x.AHM_Value)
                       };
            return list.ToList();
        }

        /// <summary>
        /// 获取该测点规定时间内的能耗历史值
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public IQueryable<EnergyEntity> GetEnergyHistory(int analogNo, DateTime startTime, DateTime endTime)
        {
            var list = from ah in _dataContext.AnalogHistories
                       where ah.AH_AnalogNo == analogNo && ah.AH_Time >= startTime && ah.AH_Time < endTime
                       select new EnergyEntity
                       {
                           PNO = ah.AH_AnalogNo,
                           STime = ah.AH_Time,
                           RealTime = ah.AH_Time,
                           Val = ah.AH_Value
                       };
            return list;
        }

        /// <summary>
        /// 给某个测点增加历史值
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="time"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public Boolean AddEnergyHistory(int analogNo, DateTime time, double value)
        {
            try
            {
                var nextTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > time).OrderBy(x => x.AH_Time).Select(x => x.AH_Value).FirstOrDefault();
                var preTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time < time).OrderByDescending(x => x.AH_Time).Select(x => x.AH_Value).FirstOrDefault();
                if (preTimeVal > 0 && value <= preTimeVal)
                {
                    return false;
                }
                if (nextTimeVal > 0 && value >= nextTimeVal)
                {
                    return false;
                }
                var newItem = new AnalogHistory
                {
                    AH_AnalogNo = analogNo,
                    AH_Time = time,
                    AH_Value = value
                };
                _dataContext.AnalogHistories.InsertOnSubmit(newItem);

                ////判断新插入值是否为当天的最大值，如果是，需要修改历史值天粒度统计表
                //if (_dataContext.AnalogHistories.Where(a => a.AH_AnalogNo == analogNo && a.AH_Time > time && a.AH_Time < time.Date.AddDays(1)).Count() == 0)
                //{
                //    var maxPreDayVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= time.Date.AddDays(-1) && x.AH_Time < time.Date).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                //    if (maxPreDayVal != null)
                //    {
                //        var curItem = _dataContext.AnalogHistoryDays.SingleOrDefault(x => x.AHD_AnalogNo == analogNo && x.AHD_HTime == time.Date);
                //        if (curItem != null)
                //        {
                //            curItem.AHD_Value = value - maxPreDayVal.AH_Value;
                //        }
                //    }
                //    var maxLaterDayVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= time.Date.AddDays(1) && x.AH_Time < time.Date.AddDays(2)).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                //    if (maxLaterDayVal != null)
                //    {
                //        var laterItem = _dataContext.AnalogHistoryDays.SingleOrDefault(x => x.AHD_AnalogNo == analogNo && x.AHD_HTime == time.Date.AddDays(1));
                //        if (laterItem != null)
                //        {
                //            laterItem.AHD_Value = maxLaterDayVal.AH_Value - value;
                //        }
                //    }
                //}
                ////判断新插入值是否为当月的最大值，如果是，需要修改历史值月粒度统计表
                //var currentMonthTime = DateTime.Parse(time.ToString("yyyy-MM-01 00:00:00"));
                //if (_dataContext.AnalogHistories.Where(a => a.AH_AnalogNo == analogNo && a.AH_Time > time && a.AH_Time < currentMonthTime.AddMonths(1)).Count() == 0)
                //{
                //    var preMonthTime = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= currentMonthTime.AddMonths(-1) && x.AH_Time < currentMonthTime).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                //    if (preMonthTime != null)
                //    {
                //        var curMonthItem = _dataContext.AnalogHistoryMonths.SingleOrDefault(x => x.AHM_AnalogNo == analogNo && x.AHM_MTime == currentMonthTime);
                //        if (curMonthItem != null)
                //        {
                //            curMonthItem.AHM_Value = value - preMonthTime.AH_Value;
                //        }
                //    }
                //    var nextMonthTime = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= currentMonthTime.AddMonths(1) && x.AH_Time < currentMonthTime.AddMonths(2)).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                //    if (nextMonthTime != null)
                //    {
                //        var laterMonthItem = _dataContext.AnalogHistoryMonths.Single(x => x.AHM_AnalogNo == analogNo && x.AHM_MTime == currentMonthTime.AddMonths(1));
                //        if (laterMonthItem != null)
                //        {
                //            laterMonthItem.AHM_Value = nextMonthTime.AH_Value - value;
                //        }
                //    }
                //}
                _dataContext.SubmitChanges();
            }
            catch (Exception)
            {
                return false;
            }
            return true;
        }

        /// <summary>
        /// 给三级测点添加某月用电量
        /// </summary>
        /// <param name="valueStr"></param>
        /// <param name="month"></param>
        /// <returns></returns>
        public Boolean AddThirdPointHistory(String valueStr, DateTime month)
        {
            String[] newValues = valueStr.Split('|');
            DateTime insertTime = month.AddMonths(1).AddDays(-1);
            ArrayList parentNo = new ArrayList();
            foreach (var valueItem in newValues)
            {
                String[] idOrValueStr = valueItem.Split('_');
                if (idOrValueStr.Length < 2) continue;
                int analogNo = int.Parse(idOrValueStr[0]);
                double value = double.Parse(idOrValueStr[1]);
                var nextTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > insertTime);
                var preTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time <= insertTime);
                var currentTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == insertTime);
                //如果将要插入的月份已经有值，并且不是起始月份的0值，则不处理。
                if (currentTimeVal.Count() > 0 && currentTimeVal.First().AH_Value != 0) continue;
                var amp = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == analogNo).Single();
                if (amp.AMP_ParentNo > 0 ) {
                    parentNo.Add(amp.AMP_ParentNo);
                }
                if (nextTimeVal.Count() > 0)
                {
                    //如果将要插入的月份之前的时间内（包括当月）没有任何历史值，则需要插入两个历史值，一个是将要插入的月份的月末，另一个是上一月份的月末，且值为0
                    if (preTimeVal.Count() == 0)
                    {
                        var zeroItem = new AnalogHistory
                        {
                            AH_AnalogNo = analogNo,
                            AH_Time = insertTime.AddDays(1).AddMonths(-1).AddDays(-1),
                            AH_Value = 0
                        };
                        var newItem = new AnalogHistory
                        {
                            AH_AnalogNo = analogNo,
                            AH_Time = insertTime,
                            AH_Value = value
                        };
                        _dataContext.AnalogHistories.InsertOnSubmit(zeroItem);
                        _dataContext.AnalogHistories.InsertOnSubmit(newItem);
                    }
                    //如果insertTime之前有值，而当前月份没有值，则直接插入当前月份的值
                    else if (currentTimeVal.Count() == 0)
                    {
                        double preTimeMaxValue = preTimeVal.Max(x => x.AH_Value);
                        var newItem = new AnalogHistory
                        {
                            AH_AnalogNo = analogNo,
                            AH_Time = insertTime,
                            AH_Value = preTimeMaxValue + value
                        };
                        _dataContext.AnalogHistories.InsertOnSubmit(newItem);
                    }
                    //如果将要插入的月份月末的历史值刚好为0，则需添加上个月月末的历史值为0,当前月份的值为value
                    else if (currentTimeVal.Count() > 0 && currentTimeVal.First().AH_Value == 0)
                    {
                        var zeroItem = new AnalogHistory
                        {
                            AH_AnalogNo = analogNo,
                            AH_Time = insertTime.AddDays(1).AddMonths(-1).AddDays(-1),
                            AH_Value = 0
                        };
                        var currentItem = currentTimeVal.First();
                        currentItem.AH_Value = value;
                        _dataContext.AnalogHistories.InsertOnSubmit(zeroItem);
                    }
                }
                else
                {
                    if (preTimeVal.Count() == 0)
                    {
                        var zeroItem = new AnalogHistory
                        {
                            AH_AnalogNo = analogNo,
                            AH_Time = insertTime.AddDays(1).AddMonths(-1).AddDays(-1),
                            AH_Value = 0
                        };
                        _dataContext.AnalogHistories.InsertOnSubmit(zeroItem);
                        amp.AMP_Date = insertTime;
                        amp.AMP_Val = value;
                    }
                    else if (currentTimeVal.Count() == 0)
                    {
                        double preTimeMaxValue = preTimeVal.Max(x => x.AH_Value);
                        amp.AMP_Date = insertTime;
                        amp.AMP_Val = preTimeMaxValue + value;
                    }
                    else if (currentTimeVal.Count() > 0 && currentTimeVal.First().AH_Value == 0)
                    {
                        var zeroItem = new AnalogHistory
                        {
                            AH_AnalogNo = analogNo,
                            AH_Time = insertTime.AddDays(1).AddMonths(-1).AddDays(-1),
                            AH_Value = 0
                        };
                        _dataContext.AnalogHistories.InsertOnSubmit(zeroItem);
                        amp.AMP_Date = insertTime;
                        amp.AMP_Val = value;
                    }
                }


                //    if (nextTimeVal.Count() == 0)
                //    {
                //        AnalogMeasurePoint newAMP = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == analogNo).Single();
                //        if (preTimeVal.Count() == 0)
                //        {
                //            var zeroItem = new AnalogHistory
                //            {
                //                AH_AnalogNo = analogNo,
                //                AH_Time = insertTime.AddMonths(-1),
                //                AH_Value = 0
                //            };
                //            newAMP.AMP_Date = insertTime;
                //            newAMP.AMP_Val = value;
                //            _dataContext.AnalogHistories.InsertOnSubmit(zeroItem);

                //        }
                //        else
                //        {
                //            var lastMonthTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == insertTime.AddMonths(-1));
                //            if (lastMonthTimeVal.Count() == 0)
                //            {
                //                double preMaxValue = preTimeVal.Max(x => x.AH_Value);
                //                var lastMonthItem = new AnalogHistory
                //                {
                //                    AH_AnalogNo = analogNo,
                //                    AH_Time = insertTime.AddMonths(-1),
                //                    AH_Value = preMaxValue
                //                };
                //                _dataContext.AnalogHistories.InsertOnSubmit(lastMonthItem);
                //                newAMP.AMP_Date = insertTime;
                //                newAMP.AMP_Val = value;
                //            }
                //            else
                //            {
                //                newAMP.AMP_Date = insertTime;
                //                newAMP.AMP_Val = value;
                //            }
                //        }
                //    }
                //    else
                //    {
                //        if (preTimeVal.Count() == 0)
                //        {
                //            if (currentTimeVal.Count() == 0)
                //            {
                //                var zeroItem = new AnalogHistory
                //                {
                //                    AH_AnalogNo = analogNo,
                //                    AH_Time = insertTime.AddMonths(-1),
                //                    AH_Value = 0
                //                };
                //                _dataContext.AnalogHistories.InsertOnSubmit(zeroItem);
                //                var newItem = new AnalogHistory
                //                {
                //                    AH_AnalogNo = analogNo,
                //                    AH_Time = insertTime.AddMonths(-1),
                //                    AH_Value = value
                //                };
                //                _dataContext.AnalogHistories.InsertOnSubmit(newItem);
                //            }
                //            else
                //            {
                //                var zeroItem = new AnalogHistory
                //                {
                //                    AH_AnalogNo = analogNo,
                //                    AH_Time = insertTime.AddMonths(-1),
                //                    AH_Value = 0
                //                };
                //                _dataContext.AnalogHistories.InsertOnSubmit(zeroItem);
                //                var currentItem = currentTimeVal.Single();
                //                currentItem.AH_Value = value;
                //            }
                //        }
                //        else
                //        {
                //            var lastMonthTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == insertTime.AddMonths(-1));
                //            double preMaxValue = preTimeVal.Max(x => x.AH_Value);
                //            if (lastMonthTimeVal.Count() == 0)
                //            {
                //                var lastMonthItem = new AnalogHistory
                //                {
                //                    AH_AnalogNo = analogNo,
                //                    AH_Time = insertTime.AddMonths(-1),
                //                    AH_Value = preMaxValue
                //                };
                //                _dataContext.AnalogHistories.InsertOnSubmit(lastMonthItem);
                //            }
                //            if (currentTimeVal.Count() == 0)
                //            {
                //                var newItem = new AnalogHistory
                //                {
                //                    AH_AnalogNo = analogNo,
                //                    AH_Time = insertTime,
                //                    AH_Value = preMaxValue + value
                //                };
                //                _dataContext.AnalogHistories.InsertOnSubmit(newItem);
                //            }
                //            else
                //            {
                //                var currentItem = currentTimeVal.Single();
                //                double oldValue = currentItem.AH_Value;
                //                currentItem.AH_Value = oldValue + value;
                //            }
                //        }
                //        foreach (AnalogHistory nextTimeItem in nextTimeVal)
                //        {
                //            nextTimeItem.AH_Value += value;
                //        }
                //    }
            }
            _dataContext.SubmitChanges();

            //如果更新的测点中有父测点，则必须将父测点的值也更新
            UpdateThirdParentPointHistory((int[])parentNo.ToArray(typeof(int)), insertTime);
            return true;
        }

        /// <summary>
        /// 更新三级电表父级测点的历史值（从insertTime之后）
        /// </summary>
        /// <param name="parentNo"></param>
        /// <param name="insertTime"></param>
        private void UpdateThirdParentPointHistory(int[] parentNo, DateTime insertTime) {
            if (parentNo.Length > 0)
            {
                foreach (int parentNoItem in parentNo)
                {
                    DateTime timeCursor = insertTime;
                    DateTime latestTime = (from ah in _dataContext.AnalogHistories
                                           from amp in _dataContext.AnalogMeasurePoints
                                           where ah.AH_AnalogNo == amp.AMP_AnalogNo && amp.AMP_ParentNo == parentNoItem
                                           select ah).Max(x => x.AH_Time);
                    if (latestTime < timeCursor) latestTime = timeCursor;
                    while (timeCursor <= latestTime)
                    {
                        var newAHRecord = from ah in _dataContext.AnalogHistories
                                          from amp in _dataContext.AnalogMeasurePoints
                                          where ah.AH_AnalogNo == amp.AMP_AnalogNo && amp.AMP_ParentNo == parentNoItem && ah.AH_Time <= timeCursor
                                          group new { ah.AH_Time, ah.AH_Value } by ah.AH_AnalogNo into g
                                          select new
                                          {
                                              PNO = g.Key,
                                              AH_Max_Value = g.Select(x => x.AH_Value).Max(),
                                              AH_Max_Time = g.Select(x => x.AH_Time).Max()
                                          };

                        IQueryable<AnalogHistory> thisAHItems = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == parentNoItem && x.AH_Time == newAHRecord.Max(i => i.AH_Max_Time));
                        if (thisAHItems.Count() == 0)
                        {
                            var newAHItem = new AnalogHistory
                            {
                                AH_AnalogNo = parentNoItem,
                                AH_Time = newAHRecord.Max(x => x.AH_Max_Time),
                                AH_Value = newAHRecord.Sum(x => x.AH_Max_Value)
                            };
                            _dataContext.AnalogHistories.InsertOnSubmit(newAHItem);
                        }
                        else
                        {
                            var item = thisAHItems.Single();
                            item.AH_Value = newAHRecord.Sum(x => x.AH_Max_Value);
                        }
                        _dataContext.SubmitChanges();
                        timeCursor = timeCursor.AddDays(1).AddMonths(1).AddDays(-1);
                    }
                }
            }
            _dataContext.SubmitChanges();
        }

        public Boolean ModifyThirdPointHistory(String val, DateTime month)
        {
            String[] newValues = val.Split('|');
            ArrayList parentNo = new ArrayList();
            DateTime insertTime = month.AddMonths(1).AddDays(-1);
            foreach (var valueItem in newValues)
            {
                String[] idOrValueStr = valueItem.Split('_');
                if (idOrValueStr.Length < 2) continue;
                int analogNo = int.Parse(idOrValueStr[0]);
                var amp = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == analogNo).Single();
                if (amp.AMP_ParentNo > 0)
                {
                    parentNo.Add(amp.AMP_ParentNo);
                }
                double value = double.Parse(idOrValueStr[1]);
                var nextTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > insertTime);
                var preTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time < insertTime);
                var currentTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == insertTime);
                if (currentTimeVal.Count() == 0) continue;
                double preTimeMaxVal = preTimeVal.Max(x => x.AH_Value);
                double oldValue = currentTimeVal.Single().AH_Value;
                currentTimeVal.Single().AH_Value = preTimeMaxVal + value;
                foreach (AnalogHistory nextTimeItem in nextTimeVal)
                {
                    nextTimeItem.AH_Value += preTimeMaxVal + value - oldValue;
                }
            }
            _dataContext.SubmitChanges();
            UpdateThirdParentPointHistory((int[])parentNo.ToArray(typeof(int)), insertTime);
            return true;
        }

        /// <summary>
        /// 删除三级电表某月用电量数据
        /// </summary>
        /// <param name="pointID"></param>
        /// <param name="month"></param>
        /// <returns></returns>
        public Boolean DeleteThirdPointHistory(int pointID, DateTime month)
        {
            DateTime deleteTime = month.AddMonths(1).AddDays(-1);
            int parentNo = 0;
            var amp = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == pointID).Single();
            if (amp.AMP_ParentNo > 0)
            {
                parentNo = amp.AMP_ParentNo.Value;
            }
            var nextTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == pointID && x.AH_Time > deleteTime);
            var preTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == pointID && x.AH_Time < deleteTime);
            var currentTimeVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == pointID && x.AH_Time == deleteTime);
            if (currentTimeVal.Count() == 0) return false;
            AnalogHistory currentItem = currentTimeVal.Single();
            double value = currentItem.AH_Value;
            _dataContext.AnalogHistories.DeleteOnSubmit(currentItem);
            foreach (AnalogHistory nextTimeItem in nextTimeVal)
            {
                nextTimeItem.AH_Value -= value;
            }
            _dataContext.SubmitChanges();
            if (parentNo > 0) { 
                UpdateThirdParentPointHistory(new int[] { parentNo }, deleteTime); 
            }
            return true;
        }

        /// <summary>
        /// 获取当月该房间所有已用的电量值
        /// </summary>
        /// <param name="roomID"></param>
        /// <returns></returns>
        public double GetCurrentMonthEnergy(int roomID)
        {
            DateTime startDate = DateTime.Parse(DateTime.Now.ToString("yyyy-MM-01"));
            double? minVal = null;
            try
            {
                minVal = (from ah in _dataContext.AnalogHistories
                          from amp in _dataContext.AnalogMeasurePoints
                          where ah.AH_AnalogNo == amp.AMP_AnalogNo && amp.AMP_RoomID == roomID && ah.AH_Time < startDate
                          group ah by ah.AH_AnalogNo into g
                          select g.Max(x => x.AH_Value)).Sum();
            }
            catch (Exception)
            {
                minVal = null;
            }

            if (!minVal.HasValue)
            {
                minVal = (from ah in _dataContext.AnalogHistories
                          from amp in _dataContext.AnalogMeasurePoints
                          where ah.AH_AnalogNo == amp.AMP_AnalogNo && amp.AMP_RoomID == roomID && ah.AH_Time >= startDate
                          group ah by ah.AH_AnalogNo into g
                          select g.Min(x => x.AH_Value)).Sum();
            }
            double? maxVal = (from ah in _dataContext.AnalogHistories
                              from amp in _dataContext.AnalogMeasurePoints
                              where ah.AH_AnalogNo == amp.AMP_AnalogNo && amp.AMP_RoomID == roomID
                              group ah by ah.AH_AnalogNo into g
                              select g.Max(x => x.AH_Value)).Sum();
            if (maxVal.HasValue && minVal.HasValue)
            {
                return maxVal.Value - minVal.Value;
            }
            else
            {
                return 0;
            }
        }

        /// <summary>
        /// 获取房间剩余电量
        /// </summary>
        /// <param name="roomID"></param>
        /// <returns></returns>
        public double GetCurrentRemVal(int roomID)
        {
            try
            {
                double? remVal = (from amp in _dataContext.AnalogMeasurePoints
                                  where amp.AMP_RoomID == roomID
                                  select amp.AMP_ValRem).Sum();
                if (remVal.HasValue)
                {
                    return remVal.Value;
                }
                return 0;
            }
            catch (Exception)
            {
                return 0;
            }
        }

        /// <summary>
        /// 得到按天粒度房间能耗使用量数据个数
        /// </summary>
        /// <param name="roomID">房间号</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <returns></returns>
        public int GetEnergyDayConsumeCount(int? roomID, DateTime startTime, DateTime endTime)
        {
            var count = (from amp in _dataContext.AnalogMeasurePoints
                         from ahd in _dataContext.AnalogHistoryDays
                         where amp.AMP_RoomID == roomID && amp.AMP_Statistic == 1 && amp.AMP_AnalogNo == ahd.AHD_AnalogNo
                         && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
                         select ahd.AHD_HTime).Distinct().Count();
            return count;
        }

        /// <summary>
        /// 得到按月粒度房间能耗使用量数据个数
        /// </summary>
        /// <param name="roomID">房间号</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <returns></returns>
        public int GetEnergyMonthConsumeCount(int? roomID, DateTime startTime, DateTime endTime)
        {
            var count = (from amp in _dataContext.AnalogMeasurePoints
                         from ahm in _dataContext.AnalogHistoryMonths
                         where amp.AMP_RoomID == roomID && amp.AMP_Statistic == 1 && amp.AMP_AnalogNo == ahm.AHM_AnalogNo
                         && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
                         select ahm.AHM_MTime).Distinct().Count();
            return count;
        }

        /// <summary>
        /// 得到指定房间的一段时间的用电数据
        /// </summary>
        /// <param name="roomID">房间ID</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <returns></returns>
        public double? GetEnergyConsume(int? roomID, DateTime startTime, DateTime endTime)
        {
            double? sum = null;
            try
            {
                var maxList = from amp in _dataContext.AnalogMeasurePoints
                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                              where amp.AMP_RoomID == roomID && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                              group ah.AH_Value by ah.AH_AnalogNo into g
                              select new
                              {
                                  PNO = g.Key,
                                  Val = g.Max()
                              };
                var minList = from amp in _dataContext.AnalogMeasurePoints
                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                              where amp.AMP_RoomID == roomID && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                              group ah.AH_Value by ah.AH_AnalogNo into g
                              select new
                              {
                                  PNO = g.Key,
                                  Val = g.Max()
                              };
                sum = (from max in maxList
                       from min in minList
                       where max.PNO == min.PNO
                       select new
                       {
                           Val = max.Val - min.Val
                       }).Sum(x => x.Val);
            }
            catch (Exception)
            {
                return null;
            }
            return sum;
        }



        /// <summary>
        /// 得到房间能耗查询的真正起始时间
        /// </summary>
        /// <param name="roomID"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        public DateTime GetStartTime(int? roomID)
        {
            DateTime realStartTime = (from amp in _dataContext.AnalogMeasurePoints
                                      join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                      where amp.AMP_RoomID == roomID
                                      select ah.AH_Time).Min();
            return realStartTime;
        }

        /// <summary>
        /// 按天粒度统计房间能耗使用量
        /// </summary>
        /// <param name="roomID">房间号</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <param name="skipItems">跳过行数</param>
        /// <param name="pageSize">每页行数</param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyDayConsume(int? roomID, DateTime startTime, DateTime endTime, int skipItems, int pageSize)
        {
            var list = (from amp in _dataContext.AnalogMeasurePoints
                        from ahd in _dataContext.AnalogHistoryDays
                        where amp.AMP_RoomID == roomID && amp.AMP_AnalogNo == ahd.AHD_AnalogNo
                        && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
                        group ahd by ahd.AHD_HTime into g
                        select new ChartStatisEntity
                        {
                            DTime = g.Key,
                            StatisVal = g.Sum(x => x.AHD_Value)
                        }).Skip(skipItems).Take(pageSize);
            return list.ToList();
        }

        /// <summary>
        /// 按月粒度统计房间能耗使用量
        /// </summary>
        /// <param name="roomID">房间号</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <param name="skipItems">跳过行数</param>
        /// <param name="pageSize">每页行数</param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyMonthConsume(int? roomID, DateTime startTime, DateTime endTime, int skipItems, int pageSize)
        {
            var list = (from amp in _dataContext.AnalogMeasurePoints
                        join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        where amp.AMP_RoomID == roomID && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
                        group ahm by ahm.AHM_MTime into g
                        select new ChartStatisEntity
                        {
                            MTime = g.Key,
                            StatisVal = g.Sum(x => x.AHM_Value)
                        }).Skip(skipItems).Take(pageSize);
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按天统计数据个数
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public int GetEnergyStatisDayCount(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetEnergyStatisDayCount(queryType, id, startTime, endTime, powerTypes, null);
        }

        /// <summary>
        /// 获取能耗按天统计数据个数
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="dw">星期几</param>
        /// <returns></returns>
        public int GetEnergyStatisDayCount(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, DayOfWeek? dw)
        {
            var query = GetEnergyStatisDay(queryType, id, startTime, endTime, powerTypes, 1);
            if (dw.HasValue)
            {
                query = query.Where(x => x.Time.DayOfWeek == dw.Value).ToList();
            }
            return query.Count();
            //int count = 0;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                    where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                    select new
            //                    {
            //                        DTime = ahd.AHD_HTime,
            //                        PowerType = amp.AMP_PowerType
            //                    };
            //        if (dw != null)
            //        {
            //            query = query.Where(x => x.DTime.DayOfWeek == dw.Value);
            //        }
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }

            //        count = query.Select(x => x.DTime).Distinct().Count();
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    DTime = ahd.AHD_HTime,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (dw != null)
            //        {
            //            query = query.Where(x => x.DTime.DayOfWeek == dw.Value);
            //        }
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        count = query.Select(x => x.DTime).Distinct().Count();
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    DTime = ahd.AHD_HTime,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (dw != null)
            //        {
            //            query = query.Where(x => x.DTime.DayOfWeek == dw.Value);
            //        }
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        count = query.Select(x => x.DTime).Distinct().Count();
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    DTime = ahd.AHD_HTime,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (dw != null)
            //        {
            //            query = query.Where(x => x.DTime.DayOfWeek == dw.Value);
            //        }
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        count = query.Select(x => x.DTime).Distinct().Count();
            //        break;
            //    default:
            //        break;
            //}
            //return count;
        }

        /// <summary>
        /// 获取能耗按天统计数据(在建筑统计粒度上增加了总能耗和单位面积能耗统计方式)
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisDayForStatistic(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string statisticMode)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;           
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                        var temp4 = list.ToList();
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];                            
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisDayForStatistic(5, firstPointID, startTime, endTime, new string[] { }, 0, statisticMode).ToList();
                            foreach (ChartStatisEntity cse in resultList)
                            {
                                cse.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisDayForStatistic(5, pointID, startTime, endTime, new string[] { }, 0, statisticMode).ToList();
                                foreach (ChartStatisEntity cse in newstatisMonthOfPoint)
                                {
                                    cse.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       DTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex,
                                                       Area = area,
                                                       StatisticMode = statisticMode
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      DTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex,
                                                      Area = area,
                                                      StatisticMode = statisticMode
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }

                        else
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(x=>x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddDays(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            if (statisticMode == "totalEnergy")
                            {
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           ID = id,
                                           Name = buildingName,
                                           Time = g.Key,
                                           DTime = g.Key,
                                           StatisVal = g.Sum(),
                                           Sum = sum,
                                           EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                       };
                            }
                            else
                            {                               
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           ID = id,
                                           Name = buildingName,
                                           Time = g.Key,
                                           DTime = g.Key,
                                           StatisVal = g.Sum(),
                                           Sum = sum,
                                           EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays),
                                           Area = area,
                                           StatisticMode = statisticMode
                                       };
                            }
                        }
                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahd.AHD_Value by ahd.AHD_HTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           Time = g.Key,
                        //           DTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };
                        }
                        else
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays),
                                       Area = area,
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = ampName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };
                        }
                        else {                            
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = ampName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays),
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }   

        /// <summary>
        /// 获取能耗按天统计分析数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>        
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisDay(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                        var temp4 = list.ToList();
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();                   
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            var area = Convert.ToDouble(_dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single());
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisDay(5, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisDay(5, pointID, startTime, endTime, new string[] { }, 0).ToList();                               
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,                                                     
                                                       Name = buildingName,
                                                       DTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,                                                    
                                                      Name = buildingName,
                                                      DTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex                                                      
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }

                        else
                        {                            
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddDays(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                              list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           ID = id,                                         
                                           Name = buildingName,
                                           Time = g.Key,
                                           DTime = g.Key,
                                           StatisVal = g.Sum(),
                                           Sum = sum,
                                           EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                       };                        
                          
                        }
                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahd.AHD_Value by ahd.AHD_HTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           Time = g.Key,
                        //           DTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {                        
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                           list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingName,                                       
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };                                         
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = ampName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };
                                          
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按天统计分析数据（包含建筑单位面积能耗分析）
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>   
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisDayAnalyze(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string statisticMode)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                        var temp4 = list.ToList();
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            var area = Convert.ToDouble(_dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single());
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisDayAnalyze(5, firstPointID, startTime, endTime, new string[] { }, sum, statisticMode).ToList();
                            foreach (var rl in resultList)
                            {
                                rl.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisDayAnalyze(5, pointID, startTime, endTime, new string[] { }, sum, statisticMode).ToList();
                                foreach (var nmp in newstatisMonthOfPoint)
                                {
                                    nmp.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Area = area,
                                                       Name = buildingName,
                                                       DTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       StatisticMode =statisticMode,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Area = area,
                                                      Name = buildingName,
                                                      DTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      StatisticMode = statisticMode,
                                                      EntityIndex = sm.EntityIndex
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }

                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddDays(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Area = Convert.ToDouble(_dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single()),
                                       Name = buildingName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       StatisticMode = statisticMode,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };

                        }
                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahd.AHD_Value by ahd.AHD_HTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           Time = g.Key,
                        //           DTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingName,
                                   Area = Convert.ToDouble(_dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single()),
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   StatisticMode = statisticMode,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };

                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   StatisticMode = statisticMode,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };

                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取光华楼能耗按天统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaEnergyStatisDay(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                   var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetBuildingGuanghuaEnergyStatisDay(4, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetBuildingGuanghuaEnergyStatisDay(4, pointID, startTime, endTime, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       DTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      DTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddDays(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };
                        }
                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahd.AHD_Value by ahd.AHD_HTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           Time = g.Key,
                        //           DTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 2:
                     var switchRoomName = _dataContext.ElecDistributionInfo.Where(x => x.ED_ID == id).Select(x => x.ED_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                          
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 3:
                    var transformerName = _dataContext.ElecTSInfo.Where(x => x.TS_ID == id).Select(x => x.TS_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                           
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;                               
                case 4:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按天统计总能耗值
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public double GetEnergyStatisDaySum(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            IList<ChartStatisEntity> energyStatisDay = GetEnergyStatisDay(queryType, id, startTime, endTime, powerTypes, 1).ToList();
            if (energyStatisDay.Count() > 0)
            {
                return energyStatisDay.Sum(x => x.StatisVal);
            }
            return 0;
            //double sum = 0;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                    where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                    select new
            //                    {
            //                        Val = ahd.AHD_Value,
            //                        PowerType = amp.AMP_PowerType
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    Val = ahd.AHD_Value,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    Val = ahd.AHD_Value,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    Val = ahd.AHD_Value,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    default:
            //        break;
            //}
            //return sum;
        }

        /// <summary>
        /// 给指定测点一段时间内所有的历史值增加或减少一定数值。
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public Boolean ModifyByTimePeriod(int analogNo, DateTime startTime, DateTime endTime, double value)
        {
            IQueryable<AnalogHistory> allAIInTimePeriod = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= startTime && x.AH_Time <= endTime);
            if (allAIInTimePeriod.Count() == 0) return false;
            foreach (var item in allAIInTimePeriod)
            {
                item.AH_Value += value;
            }
            _dataContext.SubmitChanges();
            return true;
        }

        /// <summary>
        /// 删除指定时间段内的所有历史值
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public Boolean DeleteByTimePeriod(int analogNo, DateTime startTime, DateTime endTime)
        {
            IQueryable<AnalogHistory> allAIInTimePeriod = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > startTime && x.AH_Time < endTime);
            if (allAIInTimePeriod.Count() == 0) return false;
            _dataContext.AnalogHistories.DeleteAllOnSubmit(allAIInTimePeriod);
            _dataContext.SubmitChanges();
            return true;
        }

        /// <summary>
        /// 获取指定时间段内测点的历史值个数
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public int AICountByTimePeriod(int analogNo, DateTime startTime, DateTime endTime)
        {
            int aiCount = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > startTime && x.AH_Time < endTime).Count();
            return aiCount;
        }

        /// <summary>
        /// 获取能耗按天统计最大最小的元祖
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="maxMinStr"></param>
        /// <returns></returns>
        public ChartStatisEntity GetEnergyStatisDayMaxMin(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string maxMinStr)
        {
            IQueryable<ChartStatisEntity> list = null;
            ChartStatisEntity entity = null;
            switch (queryType)
            {
                case 1:
                    list = from ahd in _dataContext.AnalogHistoryDays
                           join amp in _dataContext.AnalogMeasurePoints on ahd.AHD_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by ahd.AHD_HTime into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 2:
                    list = from ahd in _dataContext.AnalogHistoryDays
                           join amp in _dataContext.AnalogMeasurePoints on ahd.AHD_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by ahd.AHD_HTime into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 3:
                    list = from ahd in _dataContext.AnalogHistoryDays
                           join amp in _dataContext.AnalogMeasurePoints on ahd.AHD_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by ahd.AHD_HTime into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 4:
                    list = from ahd in _dataContext.AnalogHistoryDays
                           join amp in _dataContext.AnalogMeasurePoints on ahd.AHD_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_RoomID == id && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by ahd.AHD_HTime into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                default:
                    break;
            }
            if (list != null)
            {
                if (maxMinStr == "max")
                {
                    entity = list.OrderByDescending(x => x.StatisVal).FirstOrDefault();
                }
                else
                {
                    entity = list.OrderBy(x => x.StatisVal).FirstOrDefault();
                }
            }
            return entity;
        }

        /// <summary>
        /// 获取能耗按月统计数据个数
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public int GetEnergyStatisMonthCount(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetEnergyStatisMonth(queryType, id, startTime, endTime, powerTypes, 1).Count();
            //int count = 0;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        MTime = ahm.AHM_MTime,
            //                        PowerType = amp.AMP_PowerType
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        count = query.Select(x => x.MTime).Distinct().Count();
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    MTime = ahm.AHM_MTime,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        count = query.Select(x => x.MTime).Distinct().Count();
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    MTime = ahm.AHM_MTime,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        count = query.Select(x => x.MTime).Distinct().Count();
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    MTime = ahm.AHM_MTime,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        count = query.Select(x => x.MTime).Distinct().Count();
            //        break;
            //    default:
            //        break;
            //}
            //return count;
        }

        /// <summary>
        /// 获取指定AMP_AnalogNo一年内能耗按月统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5:测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>      
        /// <returns></returns>
        public IList<ChartStatisEntity> GetAssignAnalogNoEnergyStatisMonth(int id, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            IQueryable<ChartStatisEntity> list = null;
            var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
            var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                  where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                  select new
                                  {
                                      PNO = g.Key.AH_AnalogNo,
                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                      Val = g.Max()
                                  };           
            var minHourValQuery = from ah in _dataContext.AnalogHistories
                                  from max in maxHourValQuery
                                  where ah.AH_AnalogNo == max.PNO && ah.AH_Time < max.Time
                                  group ah.AH_Value by new { ah.AH_AnalogNo, max.Time } into g
                                  select new
                                  {
                                      PNO = g.Key.AH_AnalogNo,
                                      Time = g.Key.Time,
                                      Val = g.Max()
                                  };           
            list = from max in maxHourValQuery
                   from min in minHourValQuery
                   where max.Time == min.Time
                   select new ChartStatisEntity
                   {
                       Name = ampName,
                       Time = max.Time,
                       StatisVal = max.Val - min.Val
                   };
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按月统计分析数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5:测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisMonth(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            startTime = new DateTime(startTime.Year, startTime.Month, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, 1, 23, 59, 59).AddMonths(1).AddDays(-1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                       // var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                       //                             join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                       //                            where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                       //                            group ah.AH_Value by new { ah.AH_AnalogNo } into g
                       //                            select new
                       //                            {
                       //                                PNO = g.Key.AH_AnalogNo,
                       //                                Time = new DateTime(startTime.Year, startTime.Month, 1),
                       //                                Val = g.Max()
                       //                            };
                       // minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                       // var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                       //                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                       //                            where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                       //                            group ah.AH_Value by new { ah.AH_AnalogNo } into g
                       //                            select new
                       //                            {
                       //                                PNO = g.Key.AH_AnalogNo,
                       //                                Time = new DateTime(startTime.Year, startTime.Month, 1),
                       //                                Val = g.Max()
                       //                            };
                       // minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            List<ChartStatisEntity> resultList = this.GetEnergyStatisMonth(5, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisMonth(5, pointID, startTime, endTime, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();

                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddMonths(1),
                                                      Val = max.Val
                                                  };
                            //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                            //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                            //                           select new
                            //                           {
                            //                               PNO = g.Key.AH_AnalogNo,
                            //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                            //                               Val = g.Max()
                            //                           };
                            //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }

                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahm.AHM_Value by ahm.AHM_MTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           MTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingBDI.BDI_Name,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                        //                           where ah.AH_AnalogNo == id && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按月统计分析数据(包含建筑单位面积能耗分析)
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5:测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisMonthAnalyze(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum,string statisticMode)
        {
            startTime = new DateTime(startTime.Year, startTime.Month, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, 1, 23, 59, 59).AddMonths(1).AddDays(-1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        // var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                             join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                            where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                            group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                            select new
                        //                            {
                        //                                PNO = g.Key.AH_AnalogNo,
                        //                                Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                                Val = g.Max()
                        //                            };
                        // minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        // var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                            where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                            group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                            select new
                        //                            {
                        //                                PNO = g.Key.AH_AnalogNo,
                        //                                Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                                Val = g.Max()
                        //                            };
                        // minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var area =Convert.ToDouble( _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single());
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            List<ChartStatisEntity> resultList = this.GetEnergyStatisMonthAnalyze(5, firstPointID, startTime, endTime, new string[] { }, sum,statisticMode).ToList();
                            foreach (var rl in resultList)
                            {
                                rl.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisMonthAnalyze(5, pointID, startTime, endTime, new string[] { },sum,statisticMode).ToList();
                                foreach (var rl in newstatisMonthOfPoint)
                                {
                                    rl.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Area = area,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       StatisticMode = statisticMode,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Area = area,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       StatisticMode = statisticMode,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();

                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddMonths(1),
                                                      Val = max.Val
                                                  };
                            //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                            //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                            //                           select new
                            //                           {
                            //                               PNO = g.Key.AH_AnalogNo,
                            //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                            //                               Val = g.Max()
                            //                           };
                            //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Area = area,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       StatisticMode = statisticMode,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }

                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahm.AHM_Value by ahm.AHM_MTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           MTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Area = area,
                                   Name = buildingBDI.BDI_Name,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   StatisticMode = statisticMode,
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                        //                           where ah.AH_AnalogNo == id && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   StatisticMode = statisticMode,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按月统计分析数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5:测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisMonthForStatistic(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum,string statisticMode)
        {
            startTime = new DateTime(startTime.Year, startTime.Month, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, 1, 23, 59, 59).AddMonths(1).AddDays(-1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        // var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                             join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                            where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                            group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                            select new
                        //                            {
                        //                                PNO = g.Key.AH_AnalogNo,
                        //                                Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                                Val = g.Max()
                        //                            };
                        // minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        // var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                            where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                            group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                            select new
                        //                            {
                        //                                PNO = g.Key.AH_AnalogNo,
                        //                                Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                                Val = g.Max()
                        //                            };
                        // minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            List<ChartStatisEntity> resultList = this.GetEnergyStatisMonthForStatistic(5, firstPointID, startTime, endTime, new string[] { }, 0,statisticMode).ToList();
                            foreach (ChartStatisEntity cse in resultList)
                            {
                                cse.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisMonthForStatistic(5, pointID, startTime, endTime, new string[] { }, 0,statisticMode).ToList();
                                foreach (ChartStatisEntity cse in newstatisMonthOfPoint)
                                {
                                    cse.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex,
                                                       Area = area,
                                                       StatisticMode = statisticMode
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex,
                                                       Area = area,
                                                       StatisticMode = statisticMode
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();

                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddMonths(1),
                                                      Val = max.Val
                                                  };
                            //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                            //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                            //                           select new
                            //                           {
                            //                               PNO = g.Key.AH_AnalogNo,
                            //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                            //                               Val = g.Max()
                            //                           };
                            //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            if (statisticMode == "totalEnergy")
                            {
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           ID = id,
                                           Name = buildingBDI.BDI_Name,
                                           MTime = g.Key,
                                           Time = g.Key,
                                           StatisVal = g.Sum(),
                                           Sum = sum,
                                           EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                       };
                            }
                            else {
                                var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           ID = id,
                                           Name = buildingBDI.BDI_Name,
                                           MTime = g.Key,
                                           Time = g.Key,
                                           StatisVal = g.Sum(),
                                           Sum = sum,
                                           EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month,
                                           Area = area,
                                           StatisticMode = statisticMode
                                       };
                            }
                        }

                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahm.AHM_Value by ahm.AHM_MTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           MTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }
                        else
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month,
                                       Area = area,
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                        //                           where ah.AH_AnalogNo == id && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = ampName,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }
                        else {                          
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = ampName,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month,
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取光华楼能耗按月统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器        
        /// 4 : 测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaEnergyStatisMonth(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
           // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, 1, 23, 59, 59).AddMonths(1).AddDays(-1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:                   
                     var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();                    
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            List<ChartStatisEntity> resultList = this.GetBuildingGuanghuaEnergyStatisMonth(4, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetBuildingGuanghuaEnergyStatisMonth(4, pointID, startTime, endTime, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();

                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddMonths(1),
                                                      Val = max.Val
                                                  };
                            //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                            //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                            //                           select new
                            //                           {
                            //                               PNO = g.Key.AH_AnalogNo,
                            //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                            //                               Val = g.Max()
                            //                           };
                            //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }

                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime &&powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahm.AHM_Value by ahm.AHM_MTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           MTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingBDI.BDI_Name,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 2:
                     var switchRoomName = _dataContext.ElecDistributionInfo.Where(x => x.ED_ID == id).Select(x => x.ED_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                         var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                       
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                         var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 3:
                    var transformerName = _dataContext.ElecTSInfo.Where(x => x.TS_ID == id).Select(x => x.TS_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                         var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName ,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                           
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                         var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName ,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;                               
                case 4:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                         var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按指定月份统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignMonth"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyAssignStatisMonth(int queryType, int id, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes, double sum)
        {
            startTime = new DateTime(startTime.Year, startTime.Month, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, 1, 23, 59, 59).AddMonths(1).AddDays(-1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType) 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            List<ChartStatisEntity> resultList = this.GetEnergyAssignStatisMonth(5, firstPointID, startTime, endTime, assignMonth, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyAssignStatisMonth(5, pointID, startTime, endTime, assignMonth, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();

                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddMonths(1),
                                                      Val = max.Val
                                                  };
                            //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                            //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                            //                           select new
                            //                           {
                            //                               PNO = g.Key.AH_AnalogNo,
                            //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                            //                               Val = g.Max()
                            //                           };
                            //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   where g.Key.Month.ToString() == assignMonth
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }

                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahm.AHM_Value by ahm.AHM_MTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           MTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingBDI.BDI_Name,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g                                            
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                        //                           where ah.AH_AnalogNo == id && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按指定月份统计数据(包含建造单位面积能耗分析)
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignMonth"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyAssignStatisMonthAnalyze(int queryType, int id, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes, double sum, string statisticMode)
        {
            startTime = new DateTime(startTime.Year, startTime.Month, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, 1, 23, 59, 59).AddMonths(1).AddDays(-1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var area = Convert.ToDouble(_dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single());
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            List<ChartStatisEntity> resultList = this.GetEnergyAssignStatisMonthAnalyze(5, firstPointID, startTime, endTime, assignMonth, new string[] { }, sum,statisticMode).ToList();
                            foreach (var rl in resultList)
                            {
                                rl.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyAssignStatisMonthAnalyze(5, pointID, startTime, endTime, assignMonth, new string[] { }, sum,statisticMode).ToList();
                                foreach (var rl in newstatisMonthOfPoint)
                                {
                                    rl.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Area = area,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       StatisticMode = statisticMode,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Area = area,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       StatisticMode = statisticMode,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();

                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddMonths(1),
                                                      Val = max.Val
                                                  };
                            //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                            //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                            //                           select new
                            //                           {
                            //                               PNO = g.Key.AH_AnalogNo,
                            //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                            //                               Val = g.Max()
                            //                           };
                            //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   where g.Key.Month.ToString() == assignMonth
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Area = area,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       StatisticMode = statisticMode,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }

                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahm.AHM_Value by ahm.AHM_MTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           MTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Area = area,
                                   Name = buildingBDI.BDI_Name,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   StatisticMode = statisticMode,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                        //                           where ah.AH_AnalogNo == id && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   StatisticMode = statisticMode,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取光华楼能耗按指定月份统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignMonth"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaEnergyAssignStatisMonth(int queryType, int id, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes, double sum)
        {
            startTime = new DateTime(startTime.Year, startTime.Month, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, 1, 23, 59, 59).AddMonths(1).AddDays(-1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {                           
                case 1:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            List<ChartStatisEntity> resultList = this.GetBuildingGuanghuaEnergyAssignStatisMonth(4, firstPointID, startTime, endTime, assignMonth, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetBuildingGuanghuaEnergyAssignStatisMonth(4, pointID, startTime, endTime, assignMonth, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingBDI.BDI_Name,
                                                       MTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();

                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddMonths(1),
                                                      Val = max.Val
                                                  };
                            //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                            //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                            //                           select new
                            //                           {
                            //                               PNO = g.Key.AH_AnalogNo,
                            //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                            //                               Val = g.Max()
                            //                           };
                            //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   where g.Key.Month.ToString() == assignMonth
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingBDI.BDI_Name,
                                       MTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                                   };
                        }

                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahm.AHM_Value by ahm.AHM_MTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           MTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingBDI.BDI_Name,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 2:
                    var switchRoomName = _dataContext.ElecDistributionInfo.Where(x => x.ED_ID == id).Select(x => x.ED_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)  
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                             
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;  
                case 3:
                    var transformerName = _dataContext.ElecTSInfo.Where(x => x.TS_ID == id).Select(x => x.TS_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                             
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                        //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                           where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                case 4:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddMonths(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddMonths(1),
                                                  Val = max.Val
                                              };
                        //var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                        //                           where ah.AH_AnalogNo == id && ah.AH_Time < startTime
                        //                           group ah.AH_Value by new { ah.AH_AnalogNo } into g
                        //                           select new
                        //                           {
                        //                               PNO = g.Key.AH_AnalogNo,
                        //                               Time = new DateTime(startTime.Year, startTime.Month, 1),
                        //                               Val = g.Max()
                        //                           };
                        //minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Month.ToString() == assignMonth
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   MTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = (g.Key.Year - startTime.Year) * 12 + g.Key.Month - startTime.Month
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按指定日期统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignDay"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyAssignStatisDay(int queryType, int id, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes, double sum)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType) 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType) 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                        var temp4 = list.ToList();
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyAssignStatisDay(5, firstPointID, startTime, endTime, assignDay, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyAssignStatisDay(5, pointID, startTime, endTime, assignDay, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       DTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      DTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }

                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddDays(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   where g.Key.Day.ToString() == assignDay
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };
                        }
                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahd.AHD_Value by ahd.AHD_HTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           Time = g.Key,
                        //           DTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType) 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;

                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按指定日期统计数据(包含建造单位面积能耗分析)
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// 5：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignDay"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyAssignStatisDayAnalyze(int queryType, int id, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes, double sum, string statisticMode)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = schoolName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 2:
                    var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                        var temp4 = list.ToList();
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = areaName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    var area = Convert.ToDouble(_dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single());
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyAssignStatisDayAnalyze(5, firstPointID, startTime, endTime, assignDay, new string[] { }, sum, statisticMode).ToList();
                            foreach (var rl in resultList)
                            {
                                rl.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyAssignStatisDayAnalyze(5, pointID, startTime, endTime, assignDay, new string[] { }, sum,statisticMode).ToList();
                                foreach (var rl in newstatisMonthOfPoint)
                                {
                                    rl.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Area = area,
                                                       Name = buildingName,
                                                       DTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       StatisticMode =statisticMode,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Area = area,
                                                      Name = buildingName,
                                                      DTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      StatisticMode = statisticMode,
                                                      EntityIndex = sm.EntityIndex
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }

                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddDays(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   where g.Key.Day.ToString() == assignDay
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Area = area,
                                       Name = buildingName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       StatisticMode = statisticMode,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };
                        }
                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahd.AHD_Value by ahd.AHD_HTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           Time = g.Key,
                        //           DTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Area = area,
                                   Name = buildingName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   StatisticMode = statisticMode,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 4:
                    var roomCode = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = roomCode,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;

                case 5:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   StatisticMode = statisticMode,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取光华楼能耗按指定日期统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignDay"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaEnergyAssignStatisDay(int queryType, int id, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes, double sum)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, 0, 0, 1);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {       
                 case 1:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetBuildingGuanghuaEnergyAssignStatisDay(4, firstPointID, startTime, endTime, assignDay, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetBuildingGuanghuaEnergyAssignStatisDay(4, pointID, startTime, endTime, assignDay, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       DTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      DTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }

                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddDays(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   where g.Key.Day.ToString() == assignDay
                                   select new ChartStatisEntity
                                   {
                                       ID = id,
                                       Name = buildingName,
                                       Time = g.Key,
                                       DTime = g.Key,
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                                   };
                        }
                        //list = from amp in _dataContext.AnalogMeasurePoints
                        //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                        //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //       group ahd.AHD_Value by ahd.AHD_HTime into g
                        //       select new ChartStatisEntity
                        //       {
                        //           Time = g.Key,
                        //           DTime = g.Key,
                        //           StatisVal = g.Sum(),
                        //           Sum = sum
                        //       };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = buildingName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                 case 2:
                    var switchRoomName = _dataContext.ElecDistributionInfo.Where(x => x.ED_ID == id).Select(x => x.ED_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                        var temp4 = list.ToList();
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                              
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = switchRoomName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 3:
                    var transformerName = _dataContext.ElecTSInfo.Where(x => x.TS_ID == id).Select(x => x.TS_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)  
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                          
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = transformerName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                case 4:
                    {
                        var ampName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime.AddDays(-1) && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddDays(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               where g.Key.Day.ToString() == assignDay
                               select new ChartStatisEntity
                               {
                                   ID = id,
                                   Name = ampName,
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalDays)
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取不同年份同期月份比较数据
        /// </summary>
        /// <param name="queryType">查询对象层级</param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        //public IQueryable<ChartStatisEntity> GetEnergyStatisMonthByGroup(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum) 
        //{
        //    return 
        //}

        /// <summary>
        /// 获取能耗按年统计分析数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>       
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisYear(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            startTime = new DateTime(startTime.Year, 1, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, 12, 31, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Max()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Max()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();                  
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisYear(5, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisYear(5, pointID, startTime, endTime, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Year = g.Key.Year,
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Year = max.Year + 1,
                                                      Val = max.Val
                                                  };
                            var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                       join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                       group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                       select new
                                                       {
                                                           PNO = g.Key.AH_AnalogNo,
                                                           Year = startTime.Year,
                                                           Val = g.Min()
                                                       };
                            minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Year == min.Year
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Year = max.Year,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Year into g
                                   select new ChartStatisEntity
                                   {
                                       YTime = g.Key,
                                       Time = new DateTime(g.Key, 1, 1),
                                       StatisVal = g.Sum(),
                                       Sum = sum
                                   };
                        }
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum                                   
                               };
                    }
                    break;
                case 4:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 5:
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                                                   where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取某建筑按年统计分析的能耗数据
        /// </summary>
        /// <param name="queryType">  
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="buildingTypeName"></param>
        /// <param name="sum"></param>    
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisYearForAllBuildingType(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, string buildingTypeName, double sum)
        {
            startTime = new DateTime(startTime.Year, 1, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, 12, 31, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;           
            switch (queryType)
            {               
                case 3:                       
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisYearForAllBuildingType(4, firstPointID, startTime, endTime, new string[] { }, buildingTypeName,0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisYearForAllBuildingType(4, pointID, startTime, endTime, new string[] { }, buildingTypeName,0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       Name = buildingTypeName
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       Name = buildingTypeName
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Year = g.Key.Year,
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Year = max.Year + 1,
                                                      Val = max.Val
                                                  };
                            var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                       join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                       group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                       select new
                                                       {
                                                           PNO = g.Key.AH_AnalogNo,
                                                           Year = startTime.Year,
                                                           Val = g.Min()
                                                       };
                            minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Year == min.Year
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Year = max.Year,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Year into g
                                   select new ChartStatisEntity
                                   {
                                       YTime = g.Key,
                                       Time = new DateTime(g.Key, 1, 1),
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       Name = buildingTypeName
                                   };                        
                        }
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   Name = buildingTypeName
                               };                      
                    }
                    break;                
                case 4:
                    {                       
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                                                   where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum,
                                   Name = buildingTypeName
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取能耗按年统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyStatisYearForStatistic(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string statisticMode)
        {
            startTime = new DateTime(startTime.Year, 1, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, 12, 31, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Max()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Max()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(X => X.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisYearForStatistic(5, firstPointID, startTime, endTime, new string[] { }, 0, statisticMode).ToList();
                            foreach (ChartStatisEntity cse in resultList)
                            {
                                cse.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisYearForStatistic(5, pointID, startTime, endTime, new string[] { }, 0, statisticMode).ToList();
                                foreach (ChartStatisEntity cse in newstatisMonthOfPoint)
                                {
                                    cse.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       Area = area,
                                                       StatisticMode = statisticMode
                                                   }).ToList();
                                    resultList = newlist.Union(
                                   from li in resultList
                                   where !newlist.Any(x => x.Time == li.Time)
                                   select li).Union(
                                       from nsm in newstatisMonthOfPoint
                                       where !newlist.Any(x => x.Time == nsm.Time)
                                       select nsm
                                   ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       Area = area,
                                                       StatisticMode = statisticMode
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li
                                    ).ToList();
                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(X => X.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Year = g.Key.Year,
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Year = max.Year + 1,
                                                      Val = max.Val
                                                  };
                            var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                       join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime.AddYears(-1) && ah.AH_Time <= startTime && powerTypes.Contains(amp.AMP_PowerType)
                                                       group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                       select new
                                                       {
                                                           PNO = g.Key.AH_AnalogNo,
                                                           Year = startTime.Year,
                                                           Val = g.Max()
                                                       };
                            minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Year == min.Year
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Year = max.Year,
                                            Val = max.Val - min.Val
                                        };
                            if (statisticMode == "totalEnergy")
                            {
                                list = from q in query
                                       group q.Val by q.Year into g
                                       select new ChartStatisEntity
                                       {
                                           YTime = g.Key,
                                           Time = new DateTime(g.Key, 1, 1),
                                           StatisVal = g.Sum(),
                                           Sum = sum
                                       };
                            }
                            else {
                                list = from q in query
                                       group q.Val by q.Year into g
                                       select new ChartStatisEntity
                                       {
                                           YTime = g.Key,
                                           Time = new DateTime(g.Key, 1, 1),
                                           StatisVal = g.Sum(),
                                           Sum = sum,
                                           Area = area,
                                           StatisticMode = statisticMode
                                       };
                            }
                        }
                    }
                    else
                    {
                        var area = _dataContext.BuildingDetailInfos.Where(X => X.BDI_ID == id).Select(x => x.BDI_Area).Single();
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Year into g
                                   select new ChartStatisEntity
                                   {
                                       YTime = g.Key,
                                       Time = new DateTime(g.Key, 1, 1),
                                       StatisVal = g.Sum(),
                                       Sum = sum
                                   };
                        }
                        else {
                            list = from q in query
                                   group q.Val by q.Year into g
                                   select new ChartStatisEntity
                                   {
                                       YTime = g.Key,
                                       Time = new DateTime(g.Key, 1, 1),
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       Area = area,
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                case 4:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 5:
                    {                        
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                                                   where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Year into g
                                   select new ChartStatisEntity
                                   {
                                       YTime = g.Key,
                                       Time = new DateTime(g.Key, 1, 1),
                                       StatisVal = g.Sum(),
                                       Sum = sum
                                   };
                        }
                        else {
                            list = from q in query
                                   group q.Val by q.Year into g
                                   select new ChartStatisEntity
                                   {
                                       YTime = g.Key,
                                       Time = new DateTime(g.Key, 1, 1),
                                       StatisVal = g.Sum(),
                                       Sum = sum,
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 获取光华楼能耗按年统计数据
        /// </summary>
        /// <param name="queryType">
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="skipItems"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaEnergyStatisYear(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            // 修改时间使得与给出界面上的时间范围一致
            startTime = new DateTime(startTime.Year, 1, 1, 0, 0, 1);
            endTime = new DateTime(endTime.Year, 12, 31, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetBuildingGuanghuaEnergyStatisYear(4, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetBuildingGuanghuaEnergyStatisYear(4, pointID, startTime, endTime, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       YTime = sm.Time.Year,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal - nsm.StatisVal,
                                                       Sum = sm.Sum
                                                   }).ToList();
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList;
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Year = g.Key.Year,
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Year = max.Year + 1,
                                                      Val = max.Val
                                                  };
                            var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                       join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                       group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                       select new
                                                       {
                                                           PNO = g.Key.AH_AnalogNo,
                                                           Year = startTime.Year,
                                                           Val = g.Min()
                                                       };
                            minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Year == min.Year
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Year = max.Year,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Year into g
                                   select new ChartStatisEntity
                                   {
                                       YTime = g.Key,
                                       Time = new DateTime(g.Key, 1, 1),
                                       StatisVal = g.Sum(),
                                       Sum = sum
                                   };
                        }
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                   where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 2:
                    //var switchRoomName = _dataContext.ElecDistributionInfo.Where(x => x.ED_ID == id).Select(x => x.ED_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                             // join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime //&& powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from bgh in _dataContext.BuildingGuanghua
                                                   join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                                   //join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                                   where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime //&& powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                             
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from bgh in _dataContext.BuildingGuanghua
                                                   join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                                   where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime 
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 3:
                    //var transformerName = _dataContext.ElecTSInfo.Where(x => x.TS_ID == id).Select(x => x.TS_Name).Single();
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              //join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime //&& powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from bgh in _dataContext.BuildingGuanghua
                                                   join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                                   join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                                   where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                             
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from bgh in _dataContext.BuildingGuanghua
                                                   join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                                   where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime 
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                case 4:
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Year } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Year = g.Key.Year,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Year = max.Year + 1,
                                                  Val = max.Val
                                              };
                        var minHourValQueryFirst = from ah in _dataContext.AnalogHistories
                                                   where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                                   group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                                   select new
                                                   {
                                                       PNO = g.Key.AH_AnalogNo,
                                                       Year = startTime.Year,
                                                       Val = g.Min()
                                                   };
                        minHourValQuery = minHourValQuery.Union(minHourValQueryFirst);
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Year == min.Year
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Year = max.Year,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Year into g
                               select new ChartStatisEntity
                               {
                                   YTime = g.Key,
                                   Time = new DateTime(g.Key, 1, 1),
                                   StatisVal = g.Sum(),
                                   Sum = sum
                               };
                    }
                    break;
                default:
                    break;
            }
            return list.ToList();
        }

        /// <summary>
        /// 返回当年该建筑的能耗值。
        /// </summary>
        /// <param name="buildingID"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public double GetEnergyBuildingCYear(int buildingID, string[] powerTypes)
        {
            try
            {
                return GetEnergyStatisYear(3, buildingID, DateTime.Parse(DateTime.Now.ToString("yyyy-01-01  00:00:01")), DateTime.Parse(DateTime.Now.ToString("yyyy-12-31  23:59:59")), powerTypes, 0).Single().StatisVal;
            }
            catch (Exception e)
            {
                return 0;
            }
        }

        /// <summary>
        /// 获取能耗按月统计总能耗值
        /// </summary>
        /// <param name="queryType">
        /// 1：校区
        /// 2：区域
        /// 3：楼宇
        /// 4：房间
        /// </param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public double GetEnergyStatisMonthSum(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetEnergyStatisMonth(queryType, id, startTime, endTime, powerTypes, 1).Sum(x => x.StatisVal);
            //double sum = 0;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        Val = ahm.AHM_Value,
            //                        PowerType = amp.AMP_PowerType
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    Val = ahm.AHM_Value,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    Val = ahm.AHM_Value,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    Val = ahm.AHM_Value,
            //                    PowerType = amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = query.Sum(x => x.Val);
            //        break;
            //    default:
            //        break;
            //}
            //return sum;
        }

        /// <summary>
        /// 获取能耗按月统计最大最小的元祖
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="maxMinStr"></param>
        /// <returns></returns>
        public ChartStatisEntity GetEnergyStatisMonthMaxMin(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string maxMinStr)
        {
            IQueryable<ChartStatisEntity> list = null;
            ChartStatisEntity entity = null;
            switch (queryType)
            {
                case 1:
                    list = from ahm in _dataContext.AnalogHistoryMonths
                           join amp in _dataContext.AnalogMeasurePoints on ahm.AHM_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahm.AHM_Value by ahm.AHM_MTime into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 2:
                    list = from ahm in _dataContext.AnalogHistoryMonths
                           join amp in _dataContext.AnalogMeasurePoints on ahm.AHM_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahm.AHM_Value by ahm.AHM_MTime into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 3:
                    list = from ahm in _dataContext.AnalogHistoryMonths
                           join amp in _dataContext.AnalogMeasurePoints on ahm.AHM_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahm.AHM_Value by ahm.AHM_MTime into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 4:
                    list = from ahm in _dataContext.AnalogHistoryMonths
                           join amp in _dataContext.AnalogMeasurePoints on ahm.AHM_AnalogNo equals amp.AMP_AnalogNo
                           where amp.AMP_RoomID == id && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                           group ahm.AHM_Value by ahm.AHM_MTime into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                default:
                    break;
            }
            if (list != null)
            {
                if (maxMinStr == "max")
                {
                    entity = list.OrderByDescending(x => x.StatisVal).FirstOrDefault();
                }
                else
                {
                    entity = list.OrderBy(x => x.StatisVal).FirstOrDefault();
                }
            }
            return entity;
        }

        /// <summary>
        /// 按照分类分组查找能耗个数
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public int GetEnergyByPowerCount(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            int count = 0;
            switch (queryType)
            {
                case 1:
                    var query = from amp in _dataContext.AnalogMeasurePoints
                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                select amp.AMP_PowerType;
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x));
                    }
                    count = query.Distinct().Count();
                    break;
                case 2:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                            select amp.AMP_PowerType;
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x));
                    }
                    count = query.Distinct().Count();
                    break;
                case 3:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                            select amp.AMP_PowerType;
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x));
                    }
                    count = query.Distinct().Count();
                    break;
                case 4:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                            select amp.AMP_PowerType;
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x));
                    }
                    count = query.Distinct().Count();
                    break;
                case 5:
                    count = 1;
                    break;
                default:
                    break;
            }
            return count;
        }

        /// <summary>
        /// 获取按照分类分组的能耗使用情况
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyByPower(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            endTime = endTime.AddDays(1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                     select new
                                     {
                                         PowerType = g.Key.AMP_PowerType,
                                         PowerName = g.Key.AMP_PowerName,
                                         StatisVal = g.Max()
                                     };
                    var minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                     select new
                                     {
                                         PowerType = g.Key.AMP_PowerType,
                                         PowerName = g.Key.AMP_PowerName,
                                         StatisVal = g.Max()
                                     };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from max in maxValList
                           from min in minValList
                           where max.PowerType == min.PowerType
                           select new ChartStatisEntity
                           {
                               PowerType = max.PowerType,
                               PowerName = max.PowerName,
                               StatisVal = max.StatisVal - min.StatisVal,
                               Sum = sum
                           };
                    break;
                case 2:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     StatisVal = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     StatisVal = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from max in maxValList
                           from min in minValList
                           where max.PowerType == min.PowerType
                           select new ChartStatisEntity
                           {
                               PowerType = max.PowerType,
                               PowerName = max.PowerName,
                               StatisVal = max.StatisVal - min.StatisVal,
                               Sum = sum
                           };
                    break;
                case 3:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     StatisVal = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     StatisVal = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from max in maxValList
                           from min in minValList
                           where max.PowerType == min.PowerType
                           select new ChartStatisEntity
                           {
                               PowerType = max.PowerType,
                               PowerName = max.PowerName,
                               StatisVal = max.StatisVal - min.StatisVal,
                               Sum = sum
                           };
                    break;
                case 4:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     StatisVal = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     StatisVal = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from max in maxValList
                           from min in minValList
                           where max.PowerType == min.PowerType
                           select new ChartStatisEntity
                           {
                               PowerType = max.PowerType,
                               PowerName = max.PowerName,
                               StatisVal = max.StatisVal - min.StatisVal,
                               Sum = sum
                           };
                    break;
                case 5:
                    list = null;
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 获取按照天粒度和分类分组的能耗使用情况
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetDayEnergyByGranularityPower(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            startTime = startTime.AddDays(-1);
            endTime = endTime.AddDays(1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                          select new
                                          {
                                              PNO = g.Key.AH_AnalogNo,
                                              Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                              Val = g.Max(),
                                              powerType = g.Key.AMP_PowerType,
                                              powerName = g.Key.AMP_PowerName
                                          };
                    var minHourValQuery = from max in maxHourValQuery
                                          select new
                                          {
                                              PNO = max.PNO,
                                              Time = max.Time.AddDays(1),
                                              Val = max.Val,
                                              powerType = max.powerType,
                                              powerName = max.powerName
                                          };
                    var query = from max in maxHourValQuery
                                from min in minHourValQuery
                                where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                                select new
                                {
                                    PNO = max.PNO,
                                    Time = max.Time,
                                    Val = max.Val - min.Val,
                                    powerType = max.powerType,
                                    powerName = max.powerName
                                };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key.Time,
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 2:
                    maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                      join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                      where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                      group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                      select new
                                      {
                                          PNO = g.Key.AH_AnalogNo,
                                          Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                          Val = g.Max(),
                                          powerType = g.Key.AMP_PowerType,
                                          powerName = g.Key.AMP_PowerName
                                      };
                    minHourValQuery = from max in maxHourValQuery
                                      select new
                                      {
                                          PNO = max.PNO,
                                          Time = max.Time.AddDays(1),
                                          Val = max.Val,
                                          powerType = max.powerType,
                                          powerName = max.powerName
                                      };
                    query = from max in maxHourValQuery
                            from min in minHourValQuery
                            where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                            select new
                            {
                                PNO = max.PNO,
                                Time = max.Time,
                                Val = max.Val - min.Val,
                                powerType = max.powerType,
                                powerName = max.powerName
                            };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key.Time,
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 3:
                    maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                      join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                      where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                      group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                      select new
                                      {
                                          PNO = g.Key.AH_AnalogNo,
                                          Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                          Val = g.Max(),
                                          powerType = g.Key.AMP_PowerType,
                                          powerName = g.Key.AMP_PowerName
                                      };
                    minHourValQuery = from max in maxHourValQuery
                                      select new
                                      {
                                          PNO = max.PNO,
                                          Time = max.Time.AddDays(1),
                                          Val = max.Val,
                                          powerType = max.powerType,
                                          powerName = max.powerName
                                      };
                    query = from max in maxHourValQuery
                            from min in minHourValQuery
                            where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                            select new
                            {
                                PNO = max.PNO,
                                Time = max.Time,
                                Val = max.Val - min.Val,
                                powerType = max.powerType,
                                powerName = max.powerName
                            };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key.Time,
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    //list = from amp in _dataContext.AnalogMeasurePoints
                    //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                    //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
                    //       group ahd.AHD_Value by new { ahd.AHD_HTime, amp.AMP_PowerType, amp.AMP_PowerName } into g
                    //       select new ChartStatisEntity
                    //       {
                    //           DTime = g.Key.AHD_HTime,
                    //           PowerType = g.Key.AMP_PowerType,
                    //           PowerName = g.Key.AMP_PowerName,
                    //           StatisVal = g.Sum(),
                    //           Sum = sum
                    //       };
                    break;
                case 4:
                    maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                      join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                      where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                      group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                      select new
                                      {
                                          PNO = g.Key.AH_AnalogNo,
                                          Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
                                          Val = g.Max(),
                                          powerType = g.Key.AMP_PowerType,
                                          powerName = g.Key.AMP_PowerName
                                      };
                    minHourValQuery = from max in maxHourValQuery
                                      select new
                                      {
                                          PNO = max.PNO,
                                          Time = max.Time.AddDays(1),
                                          Val = max.Val,
                                          powerType = max.powerType,
                                          powerName = max.powerName
                                      };
                    query = from max in maxHourValQuery
                            from min in minHourValQuery
                            where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                            select new
                            {
                                PNO = max.PNO,
                                Time = max.Time,
                                Val = max.Val - min.Val,
                                powerType = max.powerType,
                                powerName = max.powerName
                            };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               DTime = g.Key.Time,
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 5:
                    list = null;
                    break;
                default:
                    break;
            }
            if (powerTypes != null)
            {
                list = list.Where(x => powerTypes.Contains(x.PowerType));
            }
            return list;
        }        

        /// <summary>
        /// 获取按照月粒度和分类分组的能耗使用情况
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetMonthEnergyByGranularityPower(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            endTime = endTime.AddDays(1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var maxQuery = from amp in _dataContext.AnalogMeasurePoints
                                   join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                   where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                   group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                   select new
                                   {
                                       PNO = g.Key.AH_AnalogNo,
                                       Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                       Val = g.Max(),
                                       powerType = g.Key.AMP_PowerType,
                                       powerName = g.Key.AMP_PowerName
                                   };
                    var minQuery = from max in maxQuery
                                   select new
                                   {
                                       PNO = max.PNO,
                                       Time = max.Time.AddMonths(1),
                                       Val = max.Val,
                                       powerType = max.powerType,
                                       powerName = max.powerName
                                   };
                    var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                        join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                        where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                                        group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                        select new
                                        {
                                            PNO = g.Key.AH_AnalogNo,
                                            Time = new DateTime(startTime.Year, startTime.Month, 1),
                                            Val = g.Max(),
                                            powerType = g.Key.AMP_PowerType,
                                            powerName = g.Key.AMP_PowerName
                                        };
                    minQuery = minQuery.Union(minQueryFirst);
                    var query = from max in maxQuery
                                from min in minQuery
                                where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                                select new
                                {
                                    PNO = max.PNO,
                                    Time = max.Time,
                                    Val = max.Val - min.Val,
                                    powerType = max.powerType,
                                    powerName = max.powerName
                                };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key.Time,
                               Time = g.Key.Time,  
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 2:
                    maxQuery = from amp in _dataContext.AnalogMeasurePoints
                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                               where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_PowerType, amp.AMP_PowerName } into g
                               select new
                               {
                                   PNO = g.Key.AH_AnalogNo,
                                   Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                   Val = g.Max(),
                                   powerType = g.Key.AMP_PowerType,
                                   powerName = g.Key.AMP_PowerName
                               };
                    minQuery = from max in maxQuery
                               select new
                               {
                                   PNO = max.PNO,
                                   Time = max.Time.AddMonths(1),
                                   Val = max.Val,
                                   powerType = max.powerType,
                                   powerName = max.powerName
                               };
                    minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                    join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                    where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                                    group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                    select new
                                    {
                                        PNO = g.Key.AH_AnalogNo,
                                        Time = new DateTime(startTime.Year, startTime.Month, 1),
                                        Val = g.Max(),
                                        powerType = g.Key.AMP_PowerType,
                                        powerName = g.Key.AMP_PowerName
                                    };
                    minQuery = minQuery.Union(minQueryFirst);
                    query = from max in maxQuery
                            from min in minQuery
                            where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                            select new
                            {
                                PNO = max.PNO,
                                Time = max.Time,
                                Val = max.Val - min.Val,
                                powerType = max.powerType,
                                powerName = max.powerName
                            };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key.Time,
                               Time = g.Key.Time, 
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 3:
                    maxQuery = from amp in _dataContext.AnalogMeasurePoints
                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                               where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_PowerType, amp.AMP_PowerName } into g
                               select new
                               {
                                   PNO = g.Key.AH_AnalogNo,
                                   Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                   Val = g.Max(),
                                   powerType = g.Key.AMP_PowerType,
                                   powerName = g.Key.AMP_PowerName
                               };
                    minQuery = from max in maxQuery
                               select new
                               {
                                   PNO = max.PNO,
                                   Time = max.Time.AddMonths(1),
                                   Val = max.Val,
                                   powerType = max.powerType,
                                   powerName = max.powerName
                               };
                    minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                    join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                    where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                                    group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                    select new
                                    {
                                        PNO = g.Key.AH_AnalogNo,
                                        Time = new DateTime(startTime.Year, startTime.Month, 1),
                                        Val = g.Max(),
                                        powerType = g.Key.AMP_PowerType,
                                        powerName = g.Key.AMP_PowerName
                                    };
                    minQuery = minQuery.Union(minQueryFirst);
                    query = from max in maxQuery
                            from min in minQuery
                            where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                            select new
                            {
                                PNO = max.PNO,
                                Time = max.Time,
                                Val = max.Val - min.Val,
                                powerType = max.powerType,
                                powerName = max.powerName
                            };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key.Time,
                               Time = g.Key.Time, 
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    //list = from amp in _dataContext.AnalogMeasurePoints
                    //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
                    //       where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
                    //       group ahm.AHM_Value by new { ahm.AHM_MTime, amp.AMP_PowerType, amp.AMP_PowerName } into g
                    //       select new ChartStatisEntity
                    //       {
                    //           MTime = g.Key.AHM_MTime,
                    //           PowerType = g.Key.AMP_PowerType,
                    //           PowerName = g.Key.AMP_PowerName,
                    //           StatisVal = g.Sum(),
                    //           Sum = sum
                    //       };
                    break;
                case 4:
                    maxQuery = from amp in _dataContext.AnalogMeasurePoints
                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                               where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_PowerType, amp.AMP_PowerName } into g
                               select new
                               {
                                   PNO = g.Key.AH_AnalogNo,
                                   Time = new DateTime(g.Key.Year, g.Key.Month, 1),
                                   Val = g.Max(),
                                   powerType = g.Key.AMP_PowerType,
                                   powerName = g.Key.AMP_PowerName
                               };
                    minQuery = from max in maxQuery
                               select new
                               {
                                   PNO = max.PNO,
                                   Time = max.Time.AddMonths(1),
                                   Val = max.Val,
                                   powerType = max.powerType,
                                   powerName = max.powerName
                               };
                    minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
                                    join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                    where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
                                    group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                    select new
                                    {
                                        PNO = g.Key.AH_AnalogNo,
                                        Time = new DateTime(startTime.Year, startTime.Month, 1),
                                        Val = g.Max(),
                                        powerType = g.Key.AMP_PowerType,
                                        powerName = g.Key.AMP_PowerName
                                    };
                    minQuery = minQuery.Union(minQueryFirst);
                    query = from max in maxQuery
                            from min in minQuery
                            where max.PNO == min.PNO && max.Time == min.Time && max.powerType == min.powerType && max.powerName == min.powerName
                            select new
                            {
                                PNO = max.PNO,
                                Time = max.Time,
                                Val = max.Val - min.Val,
                                powerType = max.powerType,
                                powerName = max.powerName
                            };
                    list = from q in query
                           group q.Val by new { q.Time, q.powerType, q.powerName } into g
                           select new ChartStatisEntity
                           {
                               MTime = g.Key.Time,
                               Time = g.Key.Time, 
                               PowerType = g.Key.powerType,
                               PowerName = g.Key.powerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 5:
                    list = null;
                    break;
                default:
                    break;
            }
            if (powerTypes != null)
            {
                list = list.Where(x => powerTypes.Contains(x.PowerType));
            }
            return list;
        }



        /// <summary>
        /// 按天粒度查询能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IList<DateTime> GetDateByDay(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetEnergyStatisDay(queryType, id, startTime, endTime, powerTypes, 1).Select(x => x.Time).Distinct().ToList();
            //IQueryable<DateTime> list = null;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //               join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //               where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //               select new
            //               {
            //                   PowerType = amp.AMP_PowerType,
            //                   DTime = ahd.AHD_HTime
            //               };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.DTime).Distinct();
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    PowerType = amp.AMP_PowerType,
            //                    DTime = ahd.AHD_HTime
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.DTime).Distinct();
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    PowerType = amp.AMP_PowerType,
            //                    DTime = ahd.AHD_HTime
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.DTime).Distinct();
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    PowerType = amp.AMP_PowerType,
            //                    DTime = ahd.AHD_HTime
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.DTime).Distinct();
            //        break;
            //    default:
            //        break;
            //}
            //return list;
        }
       
        /// <summary>
        /// 按月粒度查询能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IList<DateTime> GetDateByMonth(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetEnergyStatisMonth(queryType, id, startTime, endTime, powerTypes, 1).Select(x => x.Time).Distinct().ToList();
            //IQueryable<DateTime> list = null;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        PowerType = amp.AMP_PowerType,
            //                        MTime = ahm.AHM_MTime
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.MTime).Distinct();
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    PowerType = amp.AMP_PowerType,
            //                    MTime = ahm.AHM_MTime
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.MTime).Distinct();
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    PowerType = amp.AMP_PowerType,
            //                    MTime = ahm.AHM_MTime
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.MTime).Distinct();
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    PowerType = amp.AMP_PowerType,
            //                    MTime = ahm.AHM_MTime
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = query.Select(x => x.MTime).Distinct();
            //        break;
            //    default:
            //        break;
            //}
            //return list;
        }

        /// <summary>
        /// 按指定月份粒度查询能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IList<DateTime> GetDateByAssignMonth(int queryType, int id, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes)
        {
            return GetEnergyAssignStatisMonth(queryType, id, startTime, endTime, assignMonth, powerTypes, 1).Select(x => x.Time).Distinct().ToList();
        }

        /// <summary>
        /// 查询多个查询对象的能耗(废弃)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyByIDs(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    list = from amp in _dataContext.AnalogMeasurePoints
                           join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                           join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                           where ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by new { amp.AMP_SchooldID, si.SI_Name } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.AMP_SchooldID,
                               Name = g.Key.SI_Name,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 2:
                    list = from amp in _dataContext.AnalogMeasurePoints
                           join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                           join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                           where ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by new { amp.AMP_SAreaID, sai.SAI_Name } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.AMP_SAreaID,
                               Name = g.Key.SAI_Name,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 3:
                    list = from amp in _dataContext.AnalogMeasurePoints
                           join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                           join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                           where ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by new { amp.AMP_BuildingID, bbi.BDI_Name } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.AMP_BuildingID,
                               Name = g.Key.BDI_Name,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 4:
                    list = from amp in _dataContext.AnalogMeasurePoints
                           join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
                           join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                           where ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && ids.Contains(amp.AMP_RoomID) && powerTypes.Contains(amp.AMP_PowerType)
                           group ahd.AHD_Value by new { amp.AMP_RoomID, ri.RI_RoomCode } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.AMP_RoomID,
                               Name = g.Key.RI_RoomCode,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                default:
                    break;
            }
            return list;
        }

       /// <summary>
       /// 
       /// </summary>
       /// <param name="objType"></param>
       /// <param name="ids"></param>
       /// <param name="startTime"></param>
       /// <param name="endTime"></param>
       /// <param name="powerTypes"></param>
       /// <param name="sum"></param>
       /// <param name="statisticMode"></param>
       /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyByIDsPowerAnalyze(int objType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string statisticMode)
        {
            int id = Convert.ToInt32(ids[0]);
            IList<ChartStatisEntity> resultList = this.GetEnergyByIDsPowerForAnalyze(objType, id, startTime, endTime, powerTypes, sum,statisticMode);
            for (int i = 1; i < ids.Length;i++ )
            {
                var list = this.GetEnergyByIDsPowerForAnalyze(objType, Convert.ToInt32(ids[i]), startTime, endTime, powerTypes, 1,statisticMode);
                resultList = (resultList.Union(list)).ToList();

            }
            return resultList;
        }

        /// <summary>
        /// 获取多个对象一段时间内的总能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="statisticMode"></param>
        public double GetAllEnergyByIDs(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes,string statisticMode)
        {
            IList<EnergyEntity> list = this.GetEnergy(queryType, ids, powerTypes, startTime, endTime);    
            double sum = 0;
            if(statisticMode == "totalEnergy")
            {
                sum = list.Sum(x => x.Val).Value;
            }
            else 
                foreach(var lt in list)
                {
                    if (lt.valPerArea !=  0)
                    {
                        sum += lt.valPerArea;
                    }
                    else {
                        sum += lt.Val.Value;
                    }
                }             
            return sum;
            //endTime = endTime.AddDays(1);
            //double sum = 0;
            //switch (queryType)
            //{
            //    case 1:
            //        var maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                         where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                         group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                         select new
            //                         {
            //                             PNO = g.Key.AMP_AnalogNo,
            //                             PowerType = g.Key.AMP_PowerType,
            //                             Val = g.Max()
            //                         };
            //        var minValList = from amp in _dataContext.AnalogMeasurePoints
            //                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                         where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                         group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                         select new
            //                         {
            //                             PNO = g.Key.AMP_AnalogNo,
            //                             PowerType = g.Key.AMP_PowerType,
            //                             Val = g.Max()
            //                         };
            //        if (powerTypes != null)
            //        {
            //            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = (from max in maxValList
            //               from min in minValList
            //               where max.PNO == min.PNO
            //               select max.Val - min.Val).Sum();
            //        break;
            //    case 2:
            //        maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        minValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        if (powerTypes != null)
            //        {
            //            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = (from max in maxValList
            //               from min in minValList
            //               where max.PNO == min.PNO
            //               select max.Val - min.Val).Sum();
            //        break;
            //    case 3:
            //                maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //                minValList = from amp in _dataContext.AnalogMeasurePoints
            //                             join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                             where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                             group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                             select new
            //                             {
            //                                 PNO = g.Key.AMP_AnalogNo,
            //                                 PowerType = g.Key.AMP_PowerType,
            //                                 Val = g.Max()
            //                             };
            //                if (powerTypes != null)
            //                {
            //                    maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //                    minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //                }
            //                sum = (from max in maxValList
            //                       from min in minValList
            //                       where max.PNO == min.PNO
            //                       select max.Val - min.Val).Sum();
            //        break;
            //    case 4:
            //        maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        minValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        if (powerTypes != null)
            //        {
            //            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        sum = (from max in maxValList
            //               from min in minValList
            //               where max.PNO == min.PNO
            //               select max.Val - min.Val).Sum();
            //        break;
            //    case 5:
            //        maxValList = from ah in _dataContext.AnalogHistories
            //                     where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { ah.AH_AnalogNo } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AH_AnalogNo,
            //                         PowerType = "",
            //                         Val = g.Max()
            //                     };
            //        minValList = from ah in _dataContext.AnalogHistories
            //                     where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= startTime
            //                     group ah.AH_Value by new { ah.AH_AnalogNo } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AH_AnalogNo,
            //                         PowerType = "",
            //                         Val = g.Max()
            //                     };
            //        sum = (from max in maxValList
            //               from min in minValList
            //               where max.PNO == min.PNO
            //               select max.Val - min.Val).Sum();
            //        break;
            //    default:
            //        break;
            //}
            //return sum;
        }

        /// <summary>
        /// 获取光华楼中多个对象一段时间内的总能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        public double GetBuildingGuanghuaAllEnergyByIDs(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            IList<EnergyEntity> list = this.GetBuildingGuanghuaEnergy(queryType, ids, powerTypes, startTime, endTime);
            double sum = list.Sum(x => x.Val).Value;
            return sum;
        }

        /// <summary>
        /// 得到指定条件测点包含的查询对象ID集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<int?> GetEnergyIDs(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            IQueryable<int?> list = null;
            switch (queryType)
            {
                case 1:
                    var query = from amp in _dataContext.AnalogMeasurePoints
                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                select new
                                {
                                    ID = amp.AMP_SchooldID,
                                    PowerType = amp.AMP_PowerType
                                };
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = query.Select(x => x.ID).Distinct();
                    break;
                case 2:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                            select new
                            {
                                ID = amp.AMP_SAreaID,
                                PowerType = amp.AMP_PowerType
                            };
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = query.Select(x => x.ID).Distinct();
                    break;
                case 3:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                            select new
                            {
                                ID = amp.AMP_BuildingID,
                                PowerType = amp.AMP_PowerType
                            };
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = query.Select(x => x.ID).Distinct();
                    break;
                case 4:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                            where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                            select new
                            {
                                ID = amp.AMP_RoomID,
                                PowerType = amp.AMP_PowerType
                            };
                    if (powerTypes != null)
                    {
                        query = query.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = query.Select(x => x.ID).Distinct();
                    break;
                case 5:
                    {
                        query = from ah in _dataContext.AnalogHistories
                                join amp in _dataContext.AnalogMeasurePoints on ah.AH_AnalogNo equals amp.AMP_AnalogNo
                                where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= startTime
                                select new
                                {
                                    ID = new int?(ah.AH_AnalogNo),
                                    PowerType = amp.AMP_PowerType
                                };
                        list = query.Select(x => x.ID).Distinct();
                    }

                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和能耗类别分组获取能耗使用集合(针对建筑在多个对象分析中存在单位面积的情况)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergyByIDsPowerForAnalyze(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string statisticMode)
        {
             endTime = endTime.AddDays(1);
            IList<ChartStatisEntity> resultList = null;
            switch (queryType)
            {
                case 1:
                 var maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where id == amp.AMP_SchooldID && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SchooldID, si.SI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IID = g.Key.AMP_SchooldID,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         PowerName = g.Key.AMP_PowerName,
                                         Val = g.Max()
                                     };
                    var minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where id == amp.AMP_SchooldID && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SchooldID, si.SI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IID = g.Key.AMP_SchooldID,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         PowerName = g.Key.AMP_PowerName,
                                         Val = g.Max()
                                     };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    resultList = (from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.IID,
                               Name = g.Key.IName,
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           }).ToList();
                    
                    break;
                case 2:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where id == amp.AMP_SAreaID && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SAreaID, sai.SAI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_SAreaID,
                                     IName = g.Key.SAI_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where id == amp.AMP_SAreaID && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SAreaID, sai.SAI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_SAreaID,
                                     IName = g.Key.SAI_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    resultList = (from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.IID,
                               Name = g.Key.IName,
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           }).ToList();                   
                    break;
                case 3:                     
                        var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                        var buildingName = buildingBDI.BDI_Name;
                        if (powerTypes != null)
                        {
                            if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                            {
                                var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                                string operateRule = buildingBDI.BDI_OperateRule;
                                string[] pointStr = operateRule.Split('|');
                                string[] firstIDOpt = pointStr[0].Split('_');
                                int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                                string firstOperate = firstIDOpt[0];                            
                                resultList = this.GetEnergyByIDsPowerForAnalyze(5, firstPointID, startTime, endTime, null, 0, statisticMode);
                                foreach (ChartStatisEntity cse in resultList)
                                {
                                    cse.Area = area;
                                }
                                for (int k = 1; k < pointStr.Length; k++)
                                {
                                    var pointStrItem = pointStr[k];
                                    string[] IDOpt = pointStrItem.Split('_');
                                    int pointID = Convert.ToInt32(IDOpt[1]);
                                    string operate = IDOpt[0];
                                    var newstatisMonthOfPoint = this.GetEnergyByIDsPowerForAnalyze(5, pointID, startTime, endTime, null, 0, statisticMode).ToList();
                                    foreach (ChartStatisEntity cse in newstatisMonthOfPoint)
                                    {
                                        cse.Area = area;
                                    }
                                    if (operate == "+")
                                    {
                                        var newlist = (from sm in resultList
                                                       from nsm in newstatisMonthOfPoint
                                                       where sm.PowerName == nsm.PowerName
                                                       select new ChartStatisEntity
                                                       {
                                                           ID = buildingBDI.BDI_ID,
                                                           Name = buildingBDI.BDI_Name,     
                                                           PowerName = sm.PowerName,
                                                           StatisVal = sm.StatisVal + nsm.StatisVal,
                                                           Sum = sm.Sum,                                                          
                                                           Area = area,
                                                           StatisticMode = statisticMode
                                                       }).ToList();
                                        resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.PowerName == li.PowerName)
                                            select li).Union(
                                                from nsm in newstatisMonthOfPoint
                                                where !newlist.Any(x => x.PowerName == nsm.PowerName)
                                                select nsm
                                            ).ToList();
                                    }
                                    else if (operate == "-")
                                    {
                                        var newlist = (from sm in resultList
                                                      from nsm in newstatisMonthOfPoint
                                                      where sm.PowerName == nsm.PowerName
                                                      select new ChartStatisEntity
                                                      {
                                                          ID = buildingBDI.BDI_ID,
                                                          Name = buildingBDI.BDI_Name,
                                                          PowerName = sm.PowerName,
                                                          StatisVal = sm.StatisVal - nsm.StatisVal,
                                                          Sum = sm.Sum,
                                                          Area = area,
                                                          StatisticMode = statisticMode
                                                      }).ToList();
                                        resultList = (newlist.Union(
                                                from li in resultList
                                                where !newlist.Any(x => x.PowerName == li.PowerName)
                                                select li
                                            )).ToList();
                                    }
                                }
                                return resultList;
                            }

                            else
                            {
                                   var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                                   maxValList = from amp in _dataContext.AnalogMeasurePoints
                                                            join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                            where id == amp.AMP_BuildingID && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                                            group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_BuildingID, bbi.BDI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                                            select new
                                                            {
                                                                PNO = g.Key.AMP_AnalogNo,
                                                                IID = g.Key.AMP_BuildingID,
                                                                IName = g.Key.BDI_Name,
                                                                PowerType = g.Key.AMP_PowerType,
                                                                PowerName = g.Key.AMP_PowerName,
                                                                Val = g.Max()
                                                            };
                                minValList = from amp in _dataContext.AnalogMeasurePoints
                                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                         where id == amp.AMP_BuildingID && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                                         group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_BuildingID, bbi.BDI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                                         select new
                                                         {
                                                             PNO = g.Key.AMP_AnalogNo,
                                                             IID = g.Key.AMP_BuildingID,
                                                             IName = g.Key.BDI_Name,
                                                             PowerType = g.Key.AMP_PowerType,
                                                             PowerName = g.Key.AMP_PowerName,
                                                             Val = g.Max()
                                                         };
                               maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                               minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                               
                              if (statisticMode == "totalEnergy")
                               {
                                    resultList = (from temp in
                                               (from max in maxValList
                                                from min in minValList
                                                where max.PNO == min.PNO
                                                select new
                                                {
                                                    PNO = max.PNO,
                                                    IID = max.IID,
                                                    IName = max.IName,
                                                    PowerType = max.PowerType,
                                                    PowerName = max.PowerName,
                                                    Val = max.Val - min.Val
                                                })
                                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                                           select new ChartStatisEntity
                                           {
                                               ID = g.Key.IID,
                                               Name = g.Key.IName,
                                               PowerName = g.Key.PowerName,
                                               StatisVal = g.Sum(),
                                               Sum = sum
                                           }).ToList();                                   
                               }
                               else{
                                         resultList = (from temp in
                                               (from max in maxValList
                                                from min in minValList
                                                where max.PNO == min.PNO
                                                select new
                                                {
                                                    PNO = max.PNO,
                                                    IID = max.IID,
                                                    IName = max.IName,
                                                    PowerType = max.PowerType,
                                                    PowerName = max.PowerName,
                                                    Val = max.Val - min.Val
                                                })
                                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                                           select new ChartStatisEntity
                                           {
                                               ID = g.Key.IID,
                                               Name = g.Key.IName,
                                               PowerName = g.Key.PowerName,
                                               StatisVal = g.Sum(),
                                               Sum = sum,
                                               Area = area,
                                               StatisticMode = statisticMode
                                           }).ToList();                                   
                               }     
                            }                      
                        }
                        else
                        {
                             var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                             maxValList = from amp in _dataContext.AnalogMeasurePoints
                                                            join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                                            join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                            where id == amp.AMP_BuildingID && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                                            group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_BuildingID, bbi.BDI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                                            select new
                                                            {
                                                                PNO = g.Key.AMP_AnalogNo,
                                                                IID = g.Key.AMP_BuildingID,
                                                                IName = g.Key.BDI_Name,
                                                                PowerType = g.Key.AMP_PowerType,
                                                                PowerName = g.Key.AMP_PowerName,
                                                                Val = g.Max()
                                                            };
                                minValList = from amp in _dataContext.AnalogMeasurePoints
                                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                         where id == amp.AMP_BuildingID && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                                         group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_BuildingID, bbi.BDI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                                         select new
                                                         {
                                                             PNO = g.Key.AMP_AnalogNo,
                                                             IID = g.Key.AMP_BuildingID,
                                                             IName = g.Key.BDI_Name,
                                                             PowerType = g.Key.AMP_PowerType,
                                                             PowerName = g.Key.AMP_PowerName,
                                                             Val = g.Max()
                                                         };                             
                               if (statisticMode == "totalEnergy")
                               {
                                    resultList = (from temp in
                                               (from max in maxValList
                                                from min in minValList
                                                where max.PNO == min.PNO
                                                select new
                                                {
                                                    PNO = max.PNO,
                                                    IID = max.IID,
                                                    IName = max.IName,
                                                    PowerType = max.PowerType,
                                                    PowerName = max.PowerName,
                                                    Val = max.Val - min.Val
                                                })
                                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                                           select new ChartStatisEntity
                                           {
                                               ID = g.Key.IID,
                                               Name = g.Key.IName,
                                               PowerName = g.Key.PowerName,
                                               StatisVal = g.Sum(),
                                               Sum = sum
                                           }).ToList();                                   
                               }
                               else{
                                         resultList = (from temp in
                                               (from max in maxValList
                                                from min in minValList
                                                where max.PNO == min.PNO
                                                select new
                                                {
                                                    PNO = max.PNO,
                                                    IID = max.IID,
                                                    IName = max.IName,
                                                    PowerType = max.PowerType,
                                                    PowerName = max.PowerName,
                                                    Val = max.Val - min.Val
                                                })
                                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                                           select new ChartStatisEntity
                                           {
                                               ID = g.Key.IID,
                                               Name = g.Key.IName,
                                               PowerName = g.Key.PowerName,
                                               StatisVal = g.Sum(),
                                               Sum = sum,
                                               Area = area,
                                               StatisticMode = statisticMode
                                           }).ToList();                                   
                               }                                
                    }
                    break;
                 case 4:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where id == amp.AMP_RoomID && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_RoomID, ri.RI_RoomCode, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_RoomID,
                                     IName = g.Key.RI_RoomCode,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where id == amp.AMP_RoomID && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_RoomID, ri.RI_RoomCode, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_RoomID,
                                     IName = g.Key.RI_RoomCode,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    resultList = (from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.IID,
                               Name = g.Key.IName,
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           }).ToList();
                    break;
                case 5:
                    var maxList = from amp in _dataContext.AnalogMeasurePoints
                                    join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                    where id == amp.AMP_AnalogNo && ah.AH_Time <= endTime
                                    group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_Name, amp.AMP_RoomID, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                    select new
                                    {
                                        PNO = g.Key.AMP_AnalogNo,
                                        IID = g.Key.AMP_RoomID,
                                        IName = g.Key.AMP_Name,
                                        PowerType = g.Key.AMP_PowerType,
                                        PowerName = g.Key.AMP_PowerName,
                                        Val = g.Max()
                                    };
                   var minList = from amp in _dataContext.AnalogMeasurePoints
                                    join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                    where id == amp.AMP_AnalogNo && ah.AH_Time <= startTime
                                    group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_RoomID, amp.AMP_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                    select new
                                    {
                                        PNO = g.Key.AMP_AnalogNo,
                                        IID = g.Key.AMP_RoomID,
                                        IName = g.Key.AMP_Name,
                                        PowerType = g.Key.AMP_PowerType,
                                        PowerName = g.Key.AMP_PowerName,
                                        Val = g.Max()
                                    };
                    if (powerTypes != null)
                    {
                        maxList = maxList.Where(x => powerTypes.Contains(x.PowerType));
                        minList = minList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    resultList = (from temp in
                                     (from max in maxList
                                from min in minList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                            group temp.Val by new { temp.PNO, temp.IName, temp.PowerName } into g
                            select new ChartStatisEntity
                            {
                                ID = g.Key.PNO,
                                Name = g.Key.IName,
                                PowerName = g.Key.PowerName,
                                StatisVal = g.Sum(),
                                Sum = sum
                            }).ToList();
                    break;
                default:
                    break;
            }
            return resultList;
        }
        /// <summary>
        /// 根据查询对象和能耗类别分组获取能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyByIDsPower(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string statisticMode)
        {
            endTime = endTime.AddDays(1);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SchooldID, si.SI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IID = g.Key.AMP_SchooldID,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         PowerName = g.Key.AMP_PowerName,
                                         Val = g.Max()
                                     };
                    var minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SchooldID, si.SI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IID = g.Key.AMP_SchooldID,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         PowerName = g.Key.AMP_PowerName,
                                         Val = g.Max()
                                     };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.IID,
                               Name = g.Key.IName,
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 2:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SAreaID, sai.SAI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_SAreaID,
                                     IName = g.Key.SAI_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_SAreaID, sai.SAI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_SAreaID,
                                     IName = g.Key.SAI_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.IID,
                               Name = g.Key.IName,
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 3:                  
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_BuildingID, bbi.BDI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_BuildingID,                                    
                                     IName = g.Key.BDI_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_BuildingID, bbi.BDI_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_BuildingID,
                                     IName = g.Key.BDI_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.IID,
                               Name = g.Key.IName,
                               Area = Convert.ToDouble(_dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == g.Key.IID).Select(x => x.BDI_Area).SingleOrDefault()),
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               StatisticMode = statisticMode,
                               Sum = sum
                           };
                    break;                  
                case 4:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_RoomID, ri.RI_RoomCode, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_RoomID,
                                     IName = g.Key.RI_RoomCode,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_RoomID, ri.RI_RoomCode, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_RoomID,
                                     IName = g.Key.RI_RoomCode,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.IID, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.IID,
                               Name = g.Key.IName,
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 5:
                    maxValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_AnalogNo) && ah.AH_Time <= endTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_Name, amp.AMP_RoomID, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_RoomID,
                                     IName = g.Key.AMP_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    minValList = from amp in _dataContext.AnalogMeasurePoints
                                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                 where ids.Contains(amp.AMP_AnalogNo) && ah.AH_Time <= startTime
                                 group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_RoomID, amp.AMP_Name, amp.AMP_PowerType, amp.AMP_PowerName } into g
                                 select new
                                 {
                                     PNO = g.Key.AMP_AnalogNo,
                                     IID = g.Key.AMP_RoomID,
                                     IName = g.Key.AMP_Name,
                                     PowerType = g.Key.AMP_PowerType,
                                     PowerName = g.Key.AMP_PowerName,
                                     Val = g.Max()
                                 };
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO
                                select new
                                {
                                    PNO = max.PNO,
                                    IID = max.IID,
                                    IName = max.IName,
                                    PowerType = max.PowerType,
                                    PowerName = max.PowerName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by new { temp.PNO, temp.IName, temp.PowerName } into g
                           select new ChartStatisEntity
                           {
                               ID = g.Key.PNO,
                               Name = g.Key.IName,
                               PowerName = g.Key.PowerName,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按天粒度分组获取能耗使用集合（包含多个建筑单位面积能耗分析）
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetDayEnergyByIDsGranularityForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum, string statisticMode)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyStatisDayAnalyze(queryType, id, startTime, endTime, powerTypes, sum, statisticMode).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按天粒度分组获取能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>       
        /// <returns></returns>
        public IList<ChartStatisEntity> GetDayEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyStatisDay(queryType, id, startTime, endTime, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
            //    startTime = startTime.AddDays(-1);
            //    endTime = endTime.AddDays(1);
            //    IQueryable<ChartStatisEntity> list = null;
            //    switch (queryType)
            //    {
            //        case 1:
            //            if (powerTypes != null)
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_SchooldID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_SchooldID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join si in _dataContext.SchoolInfos on tl.ObjId equals si.SI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = si.SI_Name,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            else
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_SchooldID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_SchooldID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join si in _dataContext.SchoolInfos on tl.ObjId equals si.SI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = si.SI_Name,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            break;
            //        case 2:
            //            if (powerTypes != null)
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_SAreaID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_SAreaID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join sai in _dataContext.SchoolAreaInfos on tl.ObjId equals sai.SAI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = sai.SAI_Name,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            else
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_SAreaID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_SAreaID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join sai in _dataContext.SchoolAreaInfos on tl.ObjId equals sai.SAI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = sai.SAI_Name,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            break;
            //        case 3:
            //            if (powerTypes != null)
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_BuildingID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_BuildingID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join bbi in _dataContext.BuildingBriefInfos on tl.ObjId equals bbi.BDI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = bbi.BDI_Name,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };

            //                //list = from amp in _dataContext.AnalogMeasurePoints
            //                //       join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                //       join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
            //                //       where ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime && ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && powerTypes.Contains(amp.AMP_PowerType)
            //                //       group ahd.AHD_Value by new { ahd.AHD_HTime, amp.AMP_BuildingID, bbi.BDI_Name } into g
            //                //       select new ChartStatisEntity
            //                //       {
            //                //           ID = g.Key.AMP_BuildingID,
            //                //           Name = g.Key.BDI_Name,
            //                //           DTime = g.Key.AHD_HTime,
            //                //           StatisVal = g.Sum(),
            //                //           Sum = sum
            //                //       };
            //            }
            //            else
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_BuildingID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_BuildingID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join bbi in _dataContext.BuildingBriefInfos on tl.ObjId equals bbi.BDI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = bbi.BDI_Name,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            break;
            //        case 4:
            //            if (powerTypes != null)
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_RoomID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_RoomID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join ri in _dataContext.RoomInfos on tl.ObjId equals ri.RI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = ri.RI_RoomCode,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            else
            //            {
            //                var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                               where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date, amp.AMP_RoomID } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AMP_RoomID
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join ri in _dataContext.RoomInfos on tl.ObjId equals ri.RI_ID
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = ri.RI_RoomCode,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            break;
            //        case 5:
            //            {
            //                var maxQuery = from ah in _dataContext.AnalogHistories
            //                               where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                               group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
            //                               select new
            //                               {
            //                                   PNO = g.Key.AH_AnalogNo,
            //                                   Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day),
            //                                   Val = g.Max(),
            //                                   ObjId = g.Key.AH_AnalogNo
            //                               };
            //                var minQuery = from max in maxQuery
            //                               select new
            //                               {
            //                                   PNO = max.PNO,
            //                                   Time = max.Time.AddDays(1),
            //                                   Val = max.Val,
            //                                   ObjId = max.ObjId
            //                               };
            //                var query = from max in maxQuery
            //                            from min in minQuery
            //                            where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                Time = max.Time,
            //                                Val = max.Val - min.Val,
            //                                ObjId = max.ObjId
            //                            };
            //                var tempList = from q in query
            //                               group q.Val by new { q.Time, q.ObjId } into g
            //                               select new
            //                               {
            //                                   ObjId = g.Key.ObjId,
            //                                   Time = g.Key.Time,
            //                                   Val = g.Sum()
            //                               };
            //                list = from tl in tempList
            //                       join amp in _dataContext.AnalogMeasurePoints on tl.ObjId equals amp.AMP_AnalogNo
            //                       select new ChartStatisEntity
            //                       {
            //                           ID = tl.ObjId,
            //                           Name = amp.AMP_Name,
            //                           DTime = tl.Time,
            //                           Time = tl.Time,
            //                           StatisVal = tl.Val,
            //                           Sum = sum
            //                       };
            //            }
            //            break;
            //        default:
            //            break;
            //    }
            //    return list;
        }       
       

        /// <summary>
        /// 根据建筑类型和按年粒度获取能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="buildingType"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetYearEnergyByIDsGranularityForAllBuildingTypes(int queryType, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            IEnumerable<ChartStatisEntity> ResultList = new List<ChartStatisEntity>();
            var buildings = _dataContext.BuildingDetailInfos.Where(x => x.BDI_Type != null);           
            foreach (var idItem in buildings)
            {
                var buildingTypeName = _dataContext.BuildingTypes.Where(x => x.BT_ID == idItem.BDI_Type).Select(x => x.BT_Name).Single();
                var id = idItem.BDI_ID;
                var listItem = this.GetEnergyStatisYearForAllBuildingType(queryType, id, startTime, endTime, powerTypes, buildingTypeName,sum).OrderBy(x => x.Time);                
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            ResultList = from a in list
                         group a.StatisVal by new { a.Name, a.Time.Year } into g
                         select new ChartStatisEntity
                         {
                             YTime = g.Key.Year,
                             Time = new DateTime(g.Key.Year, 1, 1),
                             StatisVal = g.Sum(),
                             Sum = sum,
                             Name = g.Key.Name
                         };
            return ResultList.ToList();
        }

        /// <summary>
        /// 根据查询对象和按天粒度分组获取光华楼能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaDayEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetBuildingGuanghuaEnergyStatisDay(queryType, id, startTime, endTime, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询结果的AnalogNo集获取能耗一年中按月粒度使用集合
        /// </summary>       
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>        
        /// <returns></returns>
        public IList<ThirdPoint> GetMonthEnergyByAnalogNosGranularity(DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            IList<ThirdPoint> finalList = new List<ThirdPoint>();
            IQueryable<ChartStatisEntity> list = null;
            IList<ChartStatisEntity> actList = null;
            list = from amp in _dataContext.AnalogMeasurePoints
                   where amp.AMP_PowerType == "001007"
                   select new ChartStatisEntity
                   {
                       ID = amp.AMP_AnalogNo,
                       Name = amp.AMP_Name
                   };
            actList = list.ToList();          
            foreach (var idItem in actList)
            {
               
                    int id = Convert.ToInt32(idItem.ID);
                    double[] Vals = new double[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
                    var listItem = GetAssignAnalogNoEnergyStatisMonth(id, startTime, endTime, powerTypes);
                    var listItemData = listItem.ToDictionary(x => x.Time.Month, x => x.StatisVal);
                    IDictionary MonthValDic = new Dictionary<int, String>();
                    foreach (var item in listItemData)
                    {
                        Vals[item.Key] = item.Value;
                    }
                    double totalVal = 0;
                    for (int i = 1; i <= 12; i++)
                    {
                        if (Vals[i] > 0)
                        {
                            MonthValDic.Add(i, Vals[i].ToString("f0"));
                            totalVal += Vals[i];
                        }
                        else
                        {
                            MonthValDic.Add(i, "/");
                        }
                    }
                    ThirdPoint thirdPointList = new ThirdPoint()
                    {
                        Name = idItem.Name,
                        OneMonth = MonthValDic[1].ToString(),
                        TwoMonth = MonthValDic[2].ToString(),
                        ThreeMonth = MonthValDic[3].ToString(),
                        FourMonth = MonthValDic[4].ToString(),
                        FiveMonth = MonthValDic[5].ToString(),
                        SixMonth = MonthValDic[6].ToString(),
                        SevenMonth = MonthValDic[7].ToString(),
                        EightMonth = MonthValDic[8].ToString(),
                        NightMonth = MonthValDic[9].ToString(),
                        TenMonth = MonthValDic[10].ToString(),
                        ElevenMonth = MonthValDic[11].ToString(),
                        TwelveMonth = MonthValDic[12].ToString(),
                        TotalSum = totalVal.ToString("f0")
                    };
                    finalList.Add(thirdPointList);                 
            }
            return finalList;

        }

         /// <summary>
        /// 根据查询对象和按月粒度分组获取能耗使用集合（包含建筑单位面积能耗分析）
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetMonthEnergyByIDsGranularityForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum,string statisticMode)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyStatisMonthAnalyze(queryType, id, startTime, endTime, powerTypes, sum,statisticMode).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按月粒度分组获取能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetMonthEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyStatisMonth(queryType, id, startTime, endTime, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
            //endTime = endTime.AddDays(1);
            //IQueryable<ChartStatisEntity> list = null;
            //switch (queryType)
            //{
            //    case 1:
            //        if (powerTypes != null)
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_SchooldID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_SchooldID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_SchooldID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_SchooldID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join si in _dataContext.SchoolInfos on tl.ObjId equals si.SI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = si.SI_Name,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //        }
            //        else
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_SchooldID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_SchooldID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_SchooldID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_SchooldID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join si in _dataContext.SchoolInfos on tl.ObjId equals si.SI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = si.SI_Name,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //        }
            //        break;
            //    case 2:
            //        if (powerTypes != null)
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_SAreaID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_SAreaID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_SAreaID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_SAreaID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join sai in _dataContext.SchoolAreaInfos on tl.ObjId equals sai.SAI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = sai.SAI_Name,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //        }
            //        else
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_SAreaID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_SAreaID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_SAreaID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_SAreaID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join sai in _dataContext.SchoolAreaInfos on tl.ObjId equals sai.SAI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = sai.SAI_Name,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //        }
            //        break;
            //    case 3:
            //        if (powerTypes != null)
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_BuildingID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_BuildingID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_BuildingID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_BuildingID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join bbi in _dataContext.BuildingBriefInfos on tl.ObjId equals bbi.BDI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = bbi.BDI_Name,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //            //list = from amp in _dataContext.AnalogMeasurePoints
            //            //       join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //            //       join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
            //            //       where ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime && ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && powerTypes.Contains(amp.AMP_PowerType)
            //            //       group ahm.AHM_Value by new { ahm.AHM_MTime, amp.AMP_BuildingID, bbi.BDI_Name } into g
            //            //       select new ChartStatisEntity
            //            //       {
            //            //           ID = g.Key.AMP_BuildingID,
            //            //           Name = g.Key.BDI_Name,
            //            //           MTime = g.Key.AHM_MTime,
            //            //           StatisVal = g.Sum(),
            //            //           Sum = sum
            //            //       };
            //        }
            //        else
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_BuildingID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_BuildingID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_BuildingID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_BuildingID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join bbi in _dataContext.BuildingBriefInfos on tl.ObjId equals bbi.BDI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = bbi.BDI_Name,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //        }
            //        break;
            //    case 4:
            //        if (powerTypes != null)
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_RoomID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_RoomID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time < startTime && powerTypes.Contains(amp.AMP_PowerType)
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_RoomID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_RoomID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join ri in _dataContext.RoomInfos on tl.ObjId equals ri.RI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = ri.RI_RoomCode,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //        }
            //        else
            //        {
            //            var maxQuery = from amp in _dataContext.AnalogMeasurePoints
            //                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                           where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year, amp.AMP_RoomID } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AMP_RoomID
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from amp in _dataContext.AnalogMeasurePoints
            //                                join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                                where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time < startTime
            //                                group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_RoomID } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AMP_RoomID
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time && max.ObjId == min.ObjId
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join ri in _dataContext.RoomInfos on tl.ObjId equals ri.RI_ID
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = ri.RI_RoomCode,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };
            //        }
            //        break;
            //    case 5:
            //        {
            //            var maxQuery = from ah in _dataContext.AnalogHistories
            //                           where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time >= startTime && ah.AH_Time <= endTime
            //                           group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Month, ah.AH_Time.Year } into g
            //                           select new
            //                           {
            //                               PNO = g.Key.AH_AnalogNo,
            //                               Time = new DateTime(g.Key.Year, g.Key.Month, 1),
            //                               Val = g.Max(),
            //                               ObjId = g.Key.AH_AnalogNo
            //                           };
            //            var minQuery = from max in maxQuery
            //                           select new
            //                           {
            //                               PNO = max.PNO,
            //                               Time = max.Time.AddMonths(1),
            //                               Val = max.Val,
            //                               ObjId = max.ObjId
            //                           };
            //            var minQueryFirst = from ah in _dataContext.AnalogHistories
            //                                where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time < startTime
            //                                group ah.AH_Value by new { ah.AH_AnalogNo } into g
            //                                select new
            //                                {
            //                                    PNO = g.Key.AH_AnalogNo,
            //                                    Time = new DateTime(startTime.Year, startTime.Month, 1),
            //                                    Val = g.Max(),
            //                                    ObjId = g.Key.AH_AnalogNo
            //                                };
            //            minQuery = minQuery.Union(minQueryFirst);
            //            var query = from max in maxQuery
            //                        from min in minQuery
            //                        where max.PNO == min.PNO && max.Time == min.Time
            //                        select new
            //                        {
            //                            PNO = max.PNO,
            //                            Time = max.Time,
            //                            Val = max.Val - min.Val,
            //                            ObjId = max.ObjId
            //                        };
            //            var tempList = from q in query
            //                           group q.Val by new { q.Time, q.ObjId } into g
            //                           select new
            //                           {
            //                               ObjId = g.Key.ObjId,
            //                               Time = g.Key.Time,
            //                               Val = g.Sum()
            //                           };
            //            list = from tl in tempList
            //                   join amp in _dataContext.AnalogMeasurePoints on tl.ObjId equals amp.AMP_AnalogNo
            //                   select new ChartStatisEntity
            //                   {
            //                       ID = tl.ObjId,
            //                       Name = amp.AMP_Name,
            //                       MTime = tl.Time,
            //                       Time = tl.Time,
            //                       StatisVal = tl.Val,
            //                       Sum = sum
            //                   };

            //        }
            //        break;
            //    default:
            //        break;
            //}
            //return list;
        }

        /// <summary>
        /// 根据查询对象和按月粒度分组获取光华楼能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaMonthEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetBuildingGuanghuaEnergyStatisMonth(queryType, id, startTime, endTime, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按指定月份粒度分组获取能耗使用集合(包含建筑单位面积能耗分析)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetAssignMonthEnergyByIDsGranularityForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes, double sum,string statisticMode)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyAssignStatisMonthAnalyze(queryType, id, startTime, endTime, assignMonth, powerTypes, sum,statisticMode).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按指定月份粒度分组获取能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetAssignMonthEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyAssignStatisMonth(queryType, id, startTime, endTime, assignMonth, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按指定月份粒度分组获取光华楼能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaAssignMonthEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetBuildingGuanghuaEnergyAssignStatisMonth(queryType, id, startTime, endTime, assignMonth, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按指定日期粒度分组获取能耗使用集合(包含建筑单位面积能耗分析)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetAssignDayEnergyByIDsGranularityForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes, double sum,string statisticMode)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyAssignStatisDayAnalyze(queryType, id, startTime, endTime, assignDay, powerTypes, sum,statisticMode).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按指定日期粒度分组获取能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetAssignDayEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetEnergyAssignStatisDay(queryType, id, startTime, endTime, assignDay, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

        /// <summary>
        /// 根据查询对象和按指定日期粒度分组获取光华楼能耗使用集合
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaAssignDayEnergyByIDsGranularity(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes, double sum)
        {
            IList<ChartStatisEntity> list = new List<ChartStatisEntity>();
            foreach (var idItem in ids)
            {
                var id = idItem.Value;
                var listItem = this.GetBuildingGuanghuaEnergyAssignStatisDay(queryType, id, startTime, endTime, assignDay, powerTypes, sum).OrderBy(x => x.Time);
                list = list.Union(listItem.AsEnumerable()).ToList();
            }
            return list;
        }

         /// <summary>
        /// 按年粒度查询所有建筑类型的所有日期
        /// </summary>
        /// <param name="queryType"></param>       
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByYearForStatistic(int queryType, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetYearEnergyByIDsGranularityForAllBuildingTypes(queryType, startTime, endTime, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按天粒度查询能耗的所有日期(包含建筑单位面积能耗分析)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByDayForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes,string statisticMode)
        {
            return GetDayEnergyByIDsGranularityForAnalyze(queryType, ids, startTime, endTime, powerTypes, 1,statisticMode).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按天粒度查询能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByDay(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetDayEnergyByIDsGranularity(queryType, ids, startTime, endTime, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
            //IQueryable<DateTime> list = null;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                    where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                    select new
            //                    {
            //                        ahd.AHD_HTime,
            //                        amp.AMP_PowerType
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHD_HTime).Distinct();
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    ahd.AHD_HTime,
            //                    amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHD_HTime).Distinct();
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    ahd.AHD_HTime,
            //                    amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHD_HTime).Distinct();
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    ahd.AHD_HTime,
            //                    amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHD_HTime).Distinct();
            //        break;
            //    default:
            //        break;
            //}
            //return list;
        }
       
        /// <summary>
        /// 按天粒度查询光华楼能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetBuildingGuanghuaDateByDay(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetBuildingGuanghuaDayEnergyByIDsGranularity(queryType, ids, startTime, endTime, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按月粒度查询能耗的所有日期(包含建筑单位面积能耗分析)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByMonthForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes,string statisticMode)
        {
            return GetMonthEnergyByIDsGranularityForAnalyze(queryType, ids, startTime, endTime, powerTypes, 1,statisticMode).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按月粒度查询能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByMonth(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetMonthEnergyByIDsGranularity(queryType, ids, startTime, endTime, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
            //IQueryable<DateTime> list = null;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        amp.AMP_PowerType,
            //                        ahm.AHM_MTime
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHM_MTime).Distinct();
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        amp.AMP_PowerType,
            //                        ahm.AHM_MTime
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHM_MTime).Distinct();
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        amp.AMP_PowerType,
            //                        ahm.AHM_MTime
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHM_MTime).Distinct();
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        amp.AMP_PowerType,
            //                        ahm.AHM_MTime
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        list = query.Select(x => x.AHM_MTime).Distinct();
            //        break;
            //    default:
            //        break;
            //}
            //return list;
        }

        /// <summary>
        /// 按月粒度查询光华楼能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetBuildingGuanghuaDateByMonth(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            return GetBuildingGuanghuaMonthEnergyByIDsGranularity(queryType, ids, startTime, endTime, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按指定月份粒度查询能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignMonth"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByAssignMonth(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes)
        {
            return GetAssignMonthEnergyByIDsGranularity(queryType, ids, startTime, endTime, assignMonth, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按指定月份粒度查询能耗的所有日期(包含建造单位面积能耗分析)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignMonth"></param>
        /// <param name="powerTypes"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByAssignMonthForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes, string statisticMode)
        {
            return GetAssignMonthEnergyByIDsGranularityForAnalyze(queryType, ids, startTime, endTime, assignMonth, powerTypes, 1,statisticMode).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按指定月份粒度查询光华楼能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignMonth"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetBuildingGuanghuaDateByAssignMonth(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignMonth, string[] powerTypes)
        {
            return GetBuildingGuanghuaAssignMonthEnergyByIDsGranularity(queryType, ids, startTime, endTime, assignMonth, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按指定日期粒度查询能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignDay"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByAssignDay(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes)
        {
            return GetAssignDayEnergyByIDsGranularity(queryType, ids, startTime, endTime, assignDay, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按指定日期粒度查询能耗的所有日期(包含建造单位面积能耗分析)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignDay"></param>
        /// <param name="powerTypes"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetDateByAssignDayForAnalyze(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes, string statisticMode)
        {
            return GetAssignDayEnergyByIDsGranularityForAnalyze(queryType, ids, startTime, endTime, assignDay, powerTypes, 1,statisticMode).Select(x => x.Time).Distinct().AsQueryable();
        }

        /// <summary>
        /// 按指定日期粒度查询光华楼能耗的所有日期
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids">查询对象数组</param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="assignDay"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public IQueryable<DateTime> GetBuildingGuanghuaDateByAssignDay(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string assignDay, string[] powerTypes)
        {
            return GetBuildingGuanghuaAssignDayEnergyByIDsGranularity(queryType, ids, startTime, endTime, assignDay, powerTypes, 1).Select(x => x.Time).Distinct().AsQueryable();
        }

          /// <summary>
        /// 获取所有建筑类型指定时间范围内的能耗总值
        /// </summary>
        /// <param name="queryType"></param>       
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public double GetEnergySumForStatistic(int queryType, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            var buildings = _dataContext.BuildingDetailInfos.Where(x => x.BDI_Type != null);
            double? energySum = 0;
            foreach (var item in buildings)
            {
                int id = item.BDI_ID;
                double energyVal = GetEnergy(queryType, id, powerTypes, startTime, endTime);
                energySum = energySum + energyVal;
            }           
            if (energySum.HasValue)
            {
                return energySum.Value;
            }
            else
            {
                return 0;
            }
        }       

        /// <summary>
        /// 获取多对象一点时间内范围内的能耗总值
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public double GetEnergySum(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes,string statisticMode)
        {
            //double? energySum = GetEnergy(queryType, ids, powerTypes, startTime, endTime).Sum(x => x.Val);
            double? energySum = null;
            foreach (var id in ids)
            {
                IList<EnergyEntity> eachEnergy = GetEnergy(queryType, ids, powerTypes, startTime, endTime);
                double? eachSum = eachEnergy.Select(x => x.valPerArea).Single();
                if (statisticMode == "totalEnergy")
                {                 
                        energySum += energySum + Convert.ToDouble(eachEnergy.Select(x => x.Val).Single());                
                }
                else {
                    if (Convert.ToDouble(eachSum) == 0)
                        energySum += energySum + Convert.ToDouble(eachEnergy.Select(x => x.Val).Single());
                    else
                        energySum += energySum + Convert.ToDouble(eachEnergy.Select(x => x.valPerArea).Single());
                }
            }
            if (energySum.HasValue)
            {
                return energySum.Value;
            }
            else
            {
                return 0;
            }
            //double sum = 0;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                    where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                    select new
            //                    {
            //                        ahd.AHD_Value,
            //                        amp.AMP_PowerType
            //                    };
            //        if(powerTypes!=null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHD_Value);
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    ahd.AHD_Value,
            //                    amp.AMP_PowerType
            //                };
            //        if(powerTypes!=null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHD_Value);
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    ahd.AHD_Value,
            //                    amp.AMP_PowerType
            //                };
            //        if(powerTypes!=null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHD_Value);
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahd in _dataContext.AnalogHistoryDays on amp.AMP_AnalogNo equals ahd.AHD_AnalogNo
            //                where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ahd.AHD_HTime >= startTime && ahd.AHD_HTime <= endTime
            //                select new
            //                {
            //                    ahd.AHD_Value,
            //                    amp.AMP_PowerType
            //                };
            //        if(powerTypes!=null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHD_Value);
            //        break;
            //    default:
            //        break;
            //}
            //return sum;
        }

        /// <summary>
        /// 获取光华楼中多对象一点时间内范围内的能耗总值
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <returns></returns>
        public double GetBuildingGuanghuaEnergySum(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes)
        {
            double? energySum = GetBuildingGuanghuaEnergy(queryType, ids, powerTypes, startTime, endTime).Sum(x => x.Val);
            if (energySum.HasValue)
            {
                return energySum.Value;
            }
            else
            {
                return 0;
            }
        }

        /// <summary>
        /// 获取月粒度多个对象一段时间内能耗总量(废弃)
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="statisticMode"></param>       
        /// <returns></returns>
        public double GetEnergyMonthSum(int queryType, int?[] ids, DateTime startTime, DateTime endTime, string[] powerTypes,string statisticMode)
        {
            return GetEnergySum(queryType, ids, startTime, endTime, powerTypes,statisticMode);
            //double sum = 0;
            //switch (queryType)
            //{
            //    case 1:
            //        var query = from amp in _dataContext.AnalogMeasurePoints
            //                    join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                    where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                    select new
            //                    {
            //                        ahm.AHM_Value,
            //                        amp.AMP_PowerType
            //                    };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHM_Value);
            //        break;
            //    case 2:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    ahm.AHM_Value,
            //                    amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHM_Value);
            //        break;
            //    case 3:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    ahm.AHM_Value,
            //                    amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHM_Value);
            //        break;
            //    case 4:
            //        query = from amp in _dataContext.AnalogMeasurePoints
            //                join ahm in _dataContext.AnalogHistoryMonths on amp.AMP_AnalogNo equals ahm.AHM_AnalogNo
            //                where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ahm.AHM_MTime >= startTime && ahm.AHM_MTime <= endTime
            //                select new
            //                {
            //                    ahm.AHM_Value,
            //                    amp.AMP_PowerType
            //                };
            //        if (powerTypes != null)
            //        {
            //            query = query.Where(x => powerTypes.Contains(x.AMP_PowerType));
            //        }
            //        sum = query.Sum(x => x.AHM_Value);
            //        break;
            //    default:
            //        break;
            //}
            //return sum;
        }

        /// <summary>
        /// 得到能耗查询个数
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public int GetEnergyCount(int queryType, int?[] ids, string[] powerTypes, DateTime startTime, DateTime endTime)
        {
            int count = 0;
            switch (queryType)
            {
                case 1:
                    var list = from amp in _dataContext.AnalogMeasurePoints
                               join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                               where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                               select amp;
                    if (powerTypes != null)
                    {
                        list = list.Where(x => powerTypes.Contains(x.AMP_PowerType));
                    }
                    count = list.Select(x => x.AMP_SchooldID).Distinct().Count();
                    break;
                case 2:
                    list = from amp in _dataContext.AnalogMeasurePoints
                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                           where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                           select amp;
                    if (powerTypes != null)
                    {
                        list = list.Where(x => powerTypes.Contains(x.AMP_PowerType));
                    }
                    count = list.Select(x => x.AMP_SAreaID).Distinct().Count();
                    break;
                case 3:
                    list = from amp in _dataContext.AnalogMeasurePoints
                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                           where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                           select amp;
                    if (powerTypes != null)
                    {
                        list = list.Where(x => powerTypes.Contains(x.AMP_PowerType));
                    }
                    count = list.Select(x => x.AMP_BuildingID).Distinct().Count();
                    break;
                case 4:
                    list = from amp in _dataContext.AnalogMeasurePoints
                           join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                           where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                           select amp;
                    if (powerTypes != null)
                    {
                        list = list.Where(x => powerTypes.Contains(x.AMP_PowerType));
                    }
                    count = list.Select(x => x.AMP_RoomID).Distinct().Count();
                    break;
                case 5:
                    var list2 = from ah in _dataContext.AnalogHistories
                                where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= startTime
                                select ah;
                    count = list2.Select(x => x.AH_AnalogNo).Count();
                    break;
                default:
                    break;
            }
            return count;
        }

        /// <summary>
        /// 查询单个对象的能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public double GetEnergy(int queryType, int id, string[] powerTypes, DateTime startTime, DateTime endTime)
        {
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            double sum = -1;
            try
            {
                switch (queryType)
                {
                    case 1:
                        var maxValList = from amp in _dataContext.AnalogMeasurePoints
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                         group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AH_AnalogNo,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max()
                                         };
                        var minValList = from amp in _dataContext.AnalogMeasurePoints
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                         group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AH_AnalogNo,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max()
                                         };
                        if (powerTypes != null)
                        {
                            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                        }
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    case 2:
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        if (powerTypes != null)
                        {
                            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                        }
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    case 3:
                        var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                        if (powerTypes != null)
                        {
                            if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                            {
                                string operateRule = buildingBDI.BDI_OperateRule;
                                string[] pointStr = operateRule.Split('|');
                                string[] firstIDOpt = pointStr[0].Split('_');
                                int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                                string firstOperate = firstIDOpt[0];
                                endTime = endTime.AddDays(-1);
                                var result = this.GetEnergy(5, firstPointID, new string[] { }, startTime, endTime);
                                for (int k = 1; k < pointStr.Length; k++)
                                {
                                    var pointStrItem = pointStr[k];
                                    string[] IDOpt = pointStrItem.Split('_');
                                    int pointID = Convert.ToInt32(IDOpt[1]);
                                    string operate = IDOpt[0];
                                    double newEnergy = this.GetEnergy(5, pointID, new string[] { }, startTime, endTime);
                                    if (operate == "+")
                                    {
                                        result = result + newEnergy;
                                    }
                                    else if (operate == "-")
                                    {
                                        result = result - newEnergy;
                                    }
                                }
                                return result;
                            }
                        }
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        if (powerTypes != null)
                        {
                            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                        }
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    case 4:
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        if (powerTypes != null)
                        {
                            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                        }
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    case 5:
                        maxValList = from ah in _dataContext.AnalogHistories
                                     from amp in _dataContext.AnalogMeasurePoints
                                     where ah.AH_AnalogNo == id && amp.AMP_AnalogNo == id && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = "",
                                         Val = g.Max()
                                     };
                        minValList = from ah in _dataContext.AnalogHistories
                                     where ah.AH_AnalogNo == id && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = "",
                                         Val = g.Max()
                                     };
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    default:
                        break;
                }
            }
            catch
            {
                sum = -1;
            }
            return sum;
        }       

        /// <summary>
        /// 查询光华楼单个对象的能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="id"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public double GetBghEnergy(int queryType, int id, string[] powerTypes, DateTime startTime, DateTime endTime)
        {
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            double sum = -1;
            try
            {
                switch (queryType)
                {              
                   case 1:
                        var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                        if (powerTypes != null)
                        {
                            if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                            {
                                string operateRule = buildingBDI.BDI_OperateRule;
                                string[] pointStr = operateRule.Split('|');
                                string[] firstIDOpt = pointStr[0].Split('_');
                                int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                                string firstOperate = firstIDOpt[0];
                                endTime = endTime.AddDays(-1);
                                var result = this.GetBghEnergy(4, firstPointID, new string[] { }, startTime, endTime);
                                for (int k = 1; k < pointStr.Length; k++)
                                {
                                    var pointStrItem = pointStr[k];
                                    string[] IDOpt = pointStrItem.Split('_');
                                    int pointID = Convert.ToInt32(IDOpt[1]);
                                    string operate = IDOpt[0];
                                    double newEnergy = this.GetBghEnergy(4, pointID, new string[] { }, startTime, endTime);
                                    if (operate == "+")
                                    {
                                        result = result + newEnergy;
                                    }
                                    else if (operate == "-")
                                    {
                                        result = result - newEnergy;
                                    }
                                }
                                return result;
                            }
                        }
                        var maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                       var minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        if (powerTypes != null)
                        {
                            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                        }
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                   case 2:
                        maxValList =from bgh in _dataContext.BuildingGuanghua
                                     join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                     join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                    where bgh.ED_ID == id && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        minValList = from bgh in _dataContext.BuildingGuanghua
                                     join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                     join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                     where bgh.ED_ID == id && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        if (powerTypes != null)
                        {
                            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                        }
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    case 3:
                        maxValList = from bgh in _dataContext.BuildingGuanghua
                                     join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                     join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                     where bgh.TS_ID == id && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        minValList = from bgh in _dataContext.BuildingGuanghua
                                     join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                     join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                     where bgh.TS_ID == id && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                        if (powerTypes != null)
                        {
                            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                        }
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    case 4:
                        maxValList = from ah in _dataContext.AnalogHistories
                                     from amp in _dataContext.AnalogMeasurePoints
                                     where ah.AH_AnalogNo == id && amp.AMP_AnalogNo == id && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = "",
                                         Val = g.Max()
                                     };
                        minValList = from ah in _dataContext.AnalogHistories
                                     where ah.AH_AnalogNo == id && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { ah.AH_AnalogNo } into g
                                     select new
                                     {
                                         PNO = g.Key.AH_AnalogNo,
                                         PowerType = "",
                                         Val = g.Max()
                                     };
                        sum = (from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new
                               {
                                   Val = max.Val - min.Val
                               }).Sum(x => x.Val);
                        break;
                    default:
                        break;
                }
            }
            catch
            {
                sum = -1;
            }
            return sum;
        }

        /// <summary>
        /// 查询多个对象的能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public IList<EnergyEntity> GetEnergy(int queryType, int?[] ids, string[] powerTypes, DateTime startTime, DateTime endTime)
        {
            List<EnergyEntity> list = new List<EnergyEntity>();
            switch (queryType)
            {
                case 1:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                        var val = this.GetEnergy(1, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = schoolName,
                            Val = val,
                            valPerArea = -1
                        });
                    }
                    break;
                case 2:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                        var val = this.GetEnergy(2, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = areaName,
                            Val = val,
                            valPerArea = -1
                        });
                    }
                    break;
                case 3:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var buildingName = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Name).Single();
                        var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                        var val = this.GetEnergy(3, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = buildingName,
                            Val = val,
                            valPerArea = (area == null || area == 0) ? 0 : val / area.Value
                        });
                    }
                    break;
                case 4:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var roomName = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                        var val = this.GetEnergy(4, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = roomName,
                            Val = val,
                            valPerArea = -1
                        });
                    }
                    break;
                case 5:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var pointName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var val = this.GetEnergy(5, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = pointName,
                            Val = val,
                            valPerArea = -1
                        });
                    }
                    break;
                default:
                    break;
                //case 1:
                //    var maxValList = from amp in _dataContext.AnalogMeasurePoints
                //                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                     where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                //                     group ah.AH_Value by new { si.SI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
                //                     select new
                //                     {
                //                         PNO = g.Key.AMP_AnalogNo,
                //                         IName = g.Key.SI_Name,
                //                         PowerType = g.Key.AMP_PowerType,
                //                         Val = g.Max(),
                //                         Area = Convert.ToDouble(0)
                //                     };
                //    var minValList = from amp in _dataContext.AnalogMeasurePoints
                //                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                     where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                //                     group ah.AH_Value by new { si.SI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
                //                     select new
                //                     {
                //                         PNO = g.Key.AMP_AnalogNo,
                //                         IName = g.Key.SI_Name,
                //                         PowerType = g.Key.AMP_PowerType,
                //                         Val = g.Max()
                //                     };
                //    if (powerTypes != null)
                //    {
                //        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                //        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                //    }
                //    list = from temp in
                //               (from max in maxValList
                //                from min in minValList
                //                where max.IName == min.IName && max.PNO == min.PNO
                //                select new
                //                {
                //                    PNO = max.PNO,
                //                    IName = max.IName,
                //                    Val = max.Val - min.Val
                //                })
                //           group temp.Val by temp.IName into g
                //           select new EnergyEntity
                //           {
                //               IName = g.Key,
                //               Val = g.Sum(),
                //               valPerArea = -1
                //           };
                //    break;
                //case 2:
                //    maxValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID==0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                //                 group ah.AH_Value by new { sai.SAI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AMP_AnalogNo,
                //                     IName = g.Key.SAI_Name,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max(),
                //                     Area = Convert.ToDouble(0)
                //                 };
                //    minValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                //                 group ah.AH_Value by new { sai.SAI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AMP_AnalogNo,
                //                     IName = g.Key.SAI_Name,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max()
                //                 };
                //    if (powerTypes != null)
                //    {
                //        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                //        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                //    }
                //    list = from temp in
                //               (from max in maxValList
                //                from min in minValList
                //                where max.IName == min.IName && max.PNO == min.PNO
                //                select new
                //                {
                //                    PNO = max.PNO,
                //                    IName = max.IName,
                //                    Val = max.Val - min.Val
                //                })
                //           group temp.Val by temp.IName into g
                //           select new EnergyEntity
                //           {
                //               IName = g.Key,
                //               Val = g.Sum(),
                //               valPerArea = -1
                //           };
                //    break;
                //case 3:
                //    maxValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                //                 join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID==0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                //                 group ah.AH_Value by new { bbi.BDI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType, bdi.BDI_Area  } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AMP_AnalogNo,
                //                     IName = g.Key.BDI_Name,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max(),
                //                     Area = g.Key.BDI_Area.HasValue ? g.Key.BDI_Area.Value : 0
                //                 };
                //    minValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                //                 group ah.AH_Value by new { bbi.BDI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AMP_AnalogNo,
                //                     IName = g.Key.BDI_Name,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max()
                //                 };
                //    if (powerTypes != null)
                //    {
                //        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                //        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                //    }
                //    list = from temp in
                //               (from max in maxValList
                //                from min in minValList
                //                where max.IName == min.IName && max.PNO == min.PNO
                //                select new
                //                {
                //                    PNO = max.PNO,
                //                    IName = max.IName,
                //                    Val = max.Val - min.Val,
                //                    Area = max.Area
                //                })
                //           group temp.Val by new { temp.IName, temp.Area } into g
                //           select new EnergyEntity
                //           {
                //               IName = g.Key.IName,
                //               Val = g.Sum(),
                //               valPerArea = (g.Key.Area == 0 || g.Key.Area == null) ? 0 : g.Sum() / g.Key.Area,
                //           };
                //    break;
                //case 4:
                //    maxValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                //                 group ah.AH_Value by new { ri.RI_RoomCode, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AMP_AnalogNo,
                //                     IName = g.Key.RI_RoomCode,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max(),
                //                     Area = Convert.ToDouble(0)
                //                 };
                //    minValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                //                 group ah.AH_Value by new { ri.RI_RoomCode, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AMP_AnalogNo,
                //                     IName = g.Key.RI_RoomCode,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max()
                //                 };
                //    if (powerTypes != null)
                //    {
                //        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                //        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                //    }
                //    list = from temp in
                //               (from max in maxValList
                //                from min in minValList
                //                where max.IName == min.IName && max.PNO == min.PNO
                //                select new
                //                {
                //                    PNO = max.PNO,
                //                    IName = max.IName,
                //                    Val = max.Val - min.Val
                //                })
                //           group temp.Val by temp.IName into g
                //           select new EnergyEntity
                //           {
                //               IName = g.Key,
                //               Val = g.Sum(),
                //               valPerArea = -1
                //           };
                //    break;
                //case 5:
                //    maxValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= endTime
                //                 group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_Name, amp.AMP_PowerType } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AH_AnalogNo,
                //                     IName = g.Key.AMP_Name,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max(),
                //                     Area = Convert.ToDouble(0)
                //                 };
                //    minValList = from amp in _dataContext.AnalogMeasurePoints
                //                 join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                //                 where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= startTime
                //                 group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_Name, amp.AMP_PowerType } into g
                //                 select new
                //                 {
                //                     PNO = g.Key.AH_AnalogNo,
                //                     IName = g.Key.AMP_Name,
                //                     PowerType = g.Key.AMP_PowerType,
                //                     Val = g.Max(),
                //                 };
                //    list = from temp in
                //               (
                //                   from max in maxValList
                //                   from min in minValList
                //                   where max.IName == min.IName && max.PNO == min.PNO
                //                   select new
                //                   {
                //                       PNO = max.PNO,
                //                       IName = max.IName,
                //                       Val = max.Val - min.Val
                //                   })
                //           group temp.Val by temp.IName into g
                //           select new EnergyEntity
                //           {
                //               IName = g.Key,
                //               Val = g.Sum(),
                //               valPerArea = -1
                //           };
                //    break;
                //default:
                //    break;
            }
            return list;

        }

        /// <summary>
        /// 查询光华楼中多个对象的能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public IList<EnergyEntity> GetBuildingGuanghuaEnergy(int queryType, int?[] ids, string[] powerTypes, DateTime startTime, DateTime endTime)
        {
            List<EnergyEntity> list = new List<EnergyEntity>();
            switch (queryType)
            {               
                case 1:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var buildingName = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Name).Single();
                        var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                        var val = this.GetBghEnergy(1, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = buildingName,
                            Val = val,
                            valPerArea = (area == null || area == 0) ? 0 : val / area.Value
                        });
                    }
                    break; 
                case 2:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var switchRoomName = _dataContext.ElecDistributionInfo.Where(x => x.ED_ID == id).Select(x => x.ED_Name).Single();
                        var val = this.GetBghEnergy(2, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = switchRoomName,
                            Val = val,
                            valPerArea = -1
                        });
                    }
                    break; 
                case 3:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var transformerName = _dataContext.ElecTSInfo.Where(x => x.TS_ID == id).Select(x => x.TS_Name).Single();
                        var val = this.GetBghEnergy(3, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = transformerName,
                            Val = val,
                            valPerArea = -1
                        });
                    }
                    break;                   
                case 4:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var pointName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var val = this.GetBghEnergy(4, id, powerTypes, startTime, endTime);
                        list.Add(new EnergyEntity
                        {
                            IName = pointName,
                            Val = val,
                            valPerArea = -1
                        });
                    }
                    break;
                default:
                    break;
                     }
            return list;

        }

        /// <summary>
        /// 查询分析多个对象的能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetEnergy(int queryType, int?[] ids, string[] powerTypes, DateTime startTime, DateTime endTime, double sum,string statisticMode)
        {
            List<ChartStatisEntity> list = new List<ChartStatisEntity>();
            List<ChartStatisEntity> fianlList = new List<ChartStatisEntity>();
            double Sum = 0;
            switch (queryType)
            {
                case 1:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var schoolName = _dataContext.SchoolInfos.Where(x => x.SI_ID == id).Select(x => x.SI_Name).Single();
                        var val = this.GetEnergy(1, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = schoolName,
                            StatisVal = val                            
                        });
                        Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                case 2:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var areaName = _dataContext.SchoolAreaInfos.Where(x => x.SAI_ID == id).Select(x => x.SAI_Name).Single();
                        var val = this.GetEnergy(2, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = areaName,
                            StatisVal = val,
                           });
                        Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                case 3:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var buildingName = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Name).Single();
                        var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();  
                        var val = this.GetEnergy(3, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = buildingName,
                            Area = area,
                            StatisVal = val,
                             });
                        if (statisticMode == "totalEnergy" || area == null)
                            Sum += val;
                        else
                            Sum +=( val /Convert.ToDouble(area));
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Area = listItem.Area,
                            StatisticMode = statisticMode,
                            Sum = Sum
                        });
                    }
                    break;
                case 4:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var roomName = _dataContext.RoomInfos.Where(x => x.RI_ID == id).Select(x => x.RI_RoomCode).Single();
                        var val = this.GetEnergy(4, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = roomName,
                            StatisVal = val,
                            });
                        Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                case 5:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var pointName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var val = this.GetEnergy(5, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = pointName,
                            StatisVal = val,
                         });
                         Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                default:
                    break;
            }
            return fianlList;
            //endTime = endTime.AddDays(1);
            //IQueryable<ChartStatisEntity> list = null;
            //switch (queryType)
            //{
            //    case 1:
            //        var maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
            //                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                         where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                         group ah.AH_Value by new { si.SI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                         select new
            //                         {
            //                             PNO = g.Key.AMP_AnalogNo,
            //                             IName = g.Key.SI_Name,
            //                             PowerType = g.Key.AMP_PowerType,
            //                             Val = g.Max()
            //                         };
            //        var minValList = from amp in _dataContext.AnalogMeasurePoints
            //                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
            //                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                         where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                         group ah.AH_Value by new { si.SI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                         select new
            //                         {
            //                             PNO = g.Key.AMP_AnalogNo,
            //                             IName = g.Key.SI_Name,
            //                             PowerType = g.Key.AMP_PowerType,
            //                             Val = g.Max()
            //                         };
            //        if (powerTypes != null)
            //        {
            //            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = from temp in
            //                   (from max in maxValList
            //                    from min in minValList
            //                    where max.IName == min.IName && max.PNO == min.PNO
            //                    select new
            //                    {
            //                        PNO = max.PNO,
            //                        IName = max.IName,
            //                        Val = max.Val - min.Val
            //                    })
            //               group temp.Val by temp.IName into g
            //               select new ChartStatisEntity
            //               {
            //                   Name = g.Key,
            //                   StatisVal = g.Sum(),
            //                   Sum = sum
            //               };
            //        break;
            //    case 2:
            //        maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { sai.SAI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         IName = g.Key.SAI_Name,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        minValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                     group ah.AH_Value by new { sai.SAI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         IName = g.Key.SAI_Name,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        if (powerTypes != null)
            //        {
            //            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = from temp in
            //                   (from max in maxValList
            //                    from min in minValList
            //                    where max.IName == min.IName && max.PNO == min.PNO
            //                    select new
            //                    {
            //                        PNO = max.PNO,
            //                        IName = max.IName,
            //                        Val = max.Val - min.Val
            //                    })
            //               group temp.Val by temp.IName into g
            //               select new ChartStatisEntity
            //               {
            //                   Name = g.Key,
            //                   StatisVal = g.Sum(),
            //                   Sum = sum
            //               };
            //        break;
            //    case 3:
            //                maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { bbi.BDI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         IName = g.Key.BDI_Name,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //                minValList = from amp in _dataContext.AnalogMeasurePoints
            //                             join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
            //                             join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                             where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                             group ah.AH_Value by new { bbi.BDI_Name, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                             select new
            //                             {
            //                                 PNO = g.Key.AMP_AnalogNo,
            //                                 IName = g.Key.BDI_Name,
            //                                 PowerType = g.Key.AMP_PowerType,
            //                                 Val = g.Max()
            //                             };
            //                if (powerTypes != null)
            //                {
            //                    maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //                    minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //                }
            //                list = from temp in
            //                           (from max in maxValList
            //                            from min in minValList
            //                            where max.IName == min.IName && max.PNO == min.PNO
            //                            select new
            //                            {
            //                                PNO = max.PNO,
            //                                IName = max.IName,
            //                                Val = max.Val - min.Val
            //                            })
            //                       group temp.Val by temp.IName into g
            //                       select new ChartStatisEntity
            //                       {
            //                           Name = g.Key,
            //                           StatisVal = g.Sum(),
            //                           Sum = sum
            //                       };
            //        break;
            //    case 4:
            //        maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { ri.RI_RoomCode, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         IName = g.Key.RI_RoomCode,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        minValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
            //                     group ah.AH_Value by new { ri.RI_RoomCode, amp.AMP_AnalogNo, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AMP_AnalogNo,
            //                         IName = g.Key.RI_RoomCode,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        if (powerTypes != null)
            //        {
            //            maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
            //            minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
            //        }
            //        list = from temp in
            //                   (from max in maxValList
            //                    from min in minValList
            //                    where max.IName == min.IName && max.PNO == min.PNO
            //                    select new
            //                    {
            //                        PNO = max.PNO,
            //                        IName = max.IName,
            //                        Val = max.Val - min.Val
            //                    })
            //               group temp.Val by temp.IName into g
            //               select new ChartStatisEntity
            //               {
            //                   Name = g.Key,
            //                   StatisVal = g.Sum(),
            //                   Sum = sum
            //               };
            //        break;
            //    case 5:
            //        maxValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= endTime
            //                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_Name, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AH_AnalogNo,
            //                         IName = g.Key.AMP_Name,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        minValList = from amp in _dataContext.AnalogMeasurePoints
            //                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
            //                     where ids.Contains(ah.AH_AnalogNo) && ah.AH_Time <= startTime
            //                     group ah.AH_Value by new { ah.AH_AnalogNo, amp.AMP_Name, amp.AMP_PowerType } into g
            //                     select new
            //                     {
            //                         PNO = g.Key.AH_AnalogNo,
            //                         IName = g.Key.AMP_Name,
            //                         PowerType = g.Key.AMP_PowerType,
            //                         Val = g.Max()
            //                     };
            //        list = from temp in
            //                   (from max in maxValList
            //                    from min in minValList
            //                    where max.IName == min.IName && max.PNO == min.PNO
            //                    select new
            //                    {
            //                        PNO = max.PNO,
            //                        IName = max.IName,
            //                        Val = max.Val - min.Val
            //                    })
            //               group temp.Val by temp.IName into g
            //               select new ChartStatisEntity
            //               {
            //                   Name = g.Key,
            //                   StatisVal = g.Sum(),
            //                   Sum = sum
            //               };
            //        break;
            //    default:
            //        break;
            //}
            //return list;

        }

        /// <summary>
        /// 查询分析光华楼中多个对象的能耗
        /// </summary>
        /// <param name="queryType"></param>
        /// 1：建筑
        /// 2：配电室
        /// 3：变压器
        /// 4：测点
        /// <param name="ids"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public IList<ChartStatisEntity> GetBuildingGuanghuaEnergy(int queryType, int?[] ids, string[] powerTypes, DateTime startTime, DateTime endTime, double sum)
        {
            List<ChartStatisEntity> list = new List<ChartStatisEntity>();
            List<ChartStatisEntity> fianlList = new List<ChartStatisEntity>();
            double Sum = 0;
            switch (queryType)
            {
                case 1:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var buildingName = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Name).Single();
                        var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                        var val = this.GetBghEnergy(1, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = buildingName,
                            StatisVal = val,
                             });
                        Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                case 2:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var switchRoomName = _dataContext.ElecDistributionInfo.Where(x => x.ED_ID == id).Select(x => x.ED_Name).Single();
                        var val = this.GetBghEnergy(2, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = switchRoomName,
                            StatisVal = val,
                           });
                         Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                case 3:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var transformerName = _dataContext.ElecTSInfo.Where(x => x.TS_ID == id).Select(x => x.TS_Name).Single();
                        var val = this.GetEnergy(3, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = transformerName,
                            StatisVal = val,
                              });
                         Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                case 4:
                    foreach (var idItem in ids)
                    {
                        int id = idItem.Value;
                        var pointName = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == id).Select(x => x.AMP_Name).Single();
                        var val = this.GetBghEnergy(4, id, powerTypes, startTime, endTime);
                        list.Add(new ChartStatisEntity
                        {
                            Name = pointName,
                            StatisVal = val,
                             });
                         Sum += val;
                    }
                    foreach (var listItem in list)
                    {
                        fianlList.Add(new ChartStatisEntity
                        {
                            Name = listItem.Name,
                            StatisVal = listItem.StatisVal,
                            Sum = Sum
                        });
                    }
                    break;
                default:
                    break;
            }
            return fianlList;
        }

        /// <summary>
        /// 获取对象每小时用电
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyStatisHour(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IQueryable<ChartStatisEntity> list = null;
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, startTime.Hour, 59, 59);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, endTime.Hour, 59, 59);
            switch (queryType)
            {
                case 1:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisHour(5, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisHour(5, pointID, startTime, endTime, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       HTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      HTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList.AsQueryable();
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddHours(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       Time = g.Key,
                                       HTime = g.Key,
                                       StatisVal = g.Sum(),
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                                   };
                        }

                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 4:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 5:
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 获取对象每小时用电进行统计
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyStatisHourForStatistic(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum,string statisticMode)
        {
            IQueryable<ChartStatisEntity> list = null;
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, startTime.Hour, 59, 59);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, endTime.Hour, 59, 59);
            switch (queryType)
            {
                case 1:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 3:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;                    
                    if (powerTypes != null)
                    {                        
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisHourForStatistic(5, firstPointID, startTime, endTime, new string[] { }, 0,statisticMode).ToList();
                            foreach (ChartStatisEntity cse in resultList)
                            {
                                cse.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisHourForStatistic(5, pointID, startTime, endTime, new string[] { }, 0,statisticMode).ToList();
                                foreach (ChartStatisEntity cse in newstatisMonthOfPoint)
                                {
                                    cse.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       HTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex,
                                                       Area = area,
                                                       StatisticMode = statisticMode
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      HTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex,
                                                      Area = area,
                                                      StatisticMode = statisticMode
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList.AsQueryable();
                        }
                        else
                        {                           
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddHours(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            if (statisticMode == "totalEnergy")
                            {
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           Time = g.Key,
                                           HTime = g.Key,
                                           StatisVal = g.Sum(),
                                           EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                                       };
                            }
                            else {
                                var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           Time = g.Key,
                                           HTime = g.Key,
                                           StatisVal = g.Sum(),
                                           EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours),
                                           Area = area,
                                           StatisticMode = statisticMode
                                       };
                            }
                        }

                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       Time = g.Key,
                                       HTime = g.Key,
                                       StatisVal = g.Sum(),
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                                   };
                        }
                        else {
                            var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       Time = g.Key,
                                       HTime = g.Key,
                                       StatisVal = g.Sum(),
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours),
                                       Area = area,
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                case 4:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 5:
                    {                       
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       Time = g.Key,
                                       HTime = g.Key,
                                       StatisVal = g.Sum(),
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                                   };
                        }
                        else {                            
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       Time = g.Key,
                                       HTime = g.Key,
                                       StatisVal = g.Sum(),
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours),
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 获取光华楼每小时用电
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetBuildingGuanghuaEnergyStatisHour(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, double sum)
        {
            IQueryable<ChartStatisEntity> list = null;
            startTime = new DateTime(startTime.Year, startTime.Month, startTime.Day, startTime.Hour, 59, 59);
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, endTime.Hour, 59, 59);
            switch (queryType)
            {                             
                case 1:
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisHour(5, firstPointID, startTime, endTime, new string[] { }, 0).ToList();
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisHour(5, pointID, startTime, endTime, new string[] { }, 0).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       HTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      HTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList.AsQueryable();
                        }
                        else
                        {
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from max in maxHourValQuery
                                                  select new
                                                  {
                                                      PNO = max.PNO,
                                                      Time = max.Time.AddHours(1),
                                                      Val = max.Val
                                                  };
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       Time = g.Key,
                                       HTime = g.Key,
                                       StatisVal = g.Sum(),
                                       EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                                   };
                        }

                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                             
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                case 3:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo                                              
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;          
                case 4:
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Hour, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, g.Key.Hour, 0, 0),
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from max in maxHourValQuery
                                              select new
                                              {
                                                  PNO = max.PNO,
                                                  Time = max.Time.AddHours(1),
                                                  Val = max.Val
                                              };
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   HTime = g.Key,
                                   StatisVal = g.Sum(),
                                   EntityIndex = Convert.ToInt32(g.Key.Subtract(startTime).TotalHours)
                               };
                    }
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 取出对象每天指定时间段的用能值
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startHour"></param>
        /// <param name="endHour"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyStatisSpecialHours(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, int startHour, int endHour, double sum)
        {
            endTime = endTime.AddDays(1);
            startHour--;
            endHour--;
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 3:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 4:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 5:
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 取出对象每天指定时间段的用能值进行统计
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startHour"></param>
        /// <param name="endHour"></param>
        /// <param name="sum"></param>
        /// <param name="statisticMode"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyStatisSpecialHoursForStatistic(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, int startHour, int endHour, double sum,string statisticMode)
        {
            endTime = endTime.AddDays(1);
            startHour--;
            endHour--;
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 3:                   
                    var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if (buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            endTime = endTime.AddDays(-1);
                            startHour++;
                            endHour++;//为了防止内层调用重复处理endTime,startHour,endHour
                            IList<ChartStatisEntity> resultList = this.GetEnergyStatisSpecialHoursForStatistic(5, firstPointID, startTime, endTime, new string[] { }, startHour,endHour,0, statisticMode).ToList();                 
                            foreach (ChartStatisEntity cse in resultList)
                            {
                                cse.Area = area;
                            }
                            for (int k = 1; k < pointStr.Length; k++)
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = this.GetEnergyStatisSpecialHoursForStatistic(5, pointID, startTime, endTime, new string[] { }, startHour, endHour, 0, statisticMode).ToList();       
                                foreach (ChartStatisEntity cse in newstatisMonthOfPoint)
                                {
                                    cse.Area = area;
                                }
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       ID = id,
                                                       Name = buildingName,
                                                       HTime = sm.Time,
                                                       Time = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Sum = sm.Sum,
                                                       EntityIndex = sm.EntityIndex,
                                                       Area = area,
                                                       StatisticMode = statisticMode
                                                   }).ToList();
                                    resultList = newlist.Union(
                                        from li in resultList
                                        where !newlist.Any(x => x.Time == li.Time)
                                        select li).Union(
                                            from nsm in newstatisMonthOfPoint
                                            where !newlist.Any(x => x.Time == nsm.Time)
                                            select nsm
                                        ).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      ID = id,
                                                      Name = buildingName,
                                                      HTime = sm.Time,
                                                      Time = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Sum = sm.Sum,
                                                      EntityIndex = sm.EntityIndex,
                                                      Area = area,
                                                      StatisticMode = statisticMode
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList.AsQueryable();
                        }
                        else
                        {
                            var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                            var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  && ah.AH_Time.Hour == endHour
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = g.Key.Date,
                                                      Val = g.Max()
                                                  };
                            var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  && ah.AH_Time.Hour == startHour
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = g.Key.Date,
                                                      Val = g.Max()
                                                  };
                            // 防止0点，即要取上一天最后一个小时的最大值
                            if (startHour == -1)
                            {
                                startTime = startTime.AddDays(-1);
                                minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                                  join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                                  where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                                  && ah.AH_Time.Hour == 23
                                                  group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                                  select new
                                                  {
                                                      PNO = g.Key.AH_AnalogNo,
                                                      Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                      Val = g.Max()
                                                  };
                            }
                            var query = from max in maxHourValQuery
                                        from min in minHourValQuery
                                        where max.PNO == min.PNO && max.Time == min.Time
                                        select new
                                        {
                                            PNO = max.PNO,
                                            Time = max.Time,
                                            Val = max.Val - min.Val
                                        };
                            if (statisticMode == "totalEnergy")
                            {
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           DTime = g.Key,
                                           Time = g.Key,
                                           StatisVal = g.Sum()
                                       };
                            }
                            else
                            {
                                list = from q in query
                                       group q.Val by q.Time into g
                                       select new ChartStatisEntity
                                       {
                                           DTime = g.Key,
                                           Time = g.Key,
                                           StatisVal = g.Sum(),
                                           Area = area,
                                           StatisticMode = statisticMode
                                       };
                            }
                        }
                    }
                    else
                    {
                        var area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        if (statisticMode == "totalEnergy")
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       DTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum()
                                   };
                        }
                        else
                        {
                            list = from q in query
                                   group q.Val by q.Time into g
                                   select new ChartStatisEntity
                                   {
                                       DTime = g.Key,
                                       Time = g.Key,
                                       StatisVal = g.Sum(),
                                       Area = area,
                                       StatisticMode = statisticMode
                                   };
                        }
                    }
                    break;
                case 4:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 5:
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {                           
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id  && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   Time = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 取出光华楼每天指定时间段的用能值
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="id"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="powerTypes"></param>
        /// <param name="startHour"></param>
        /// <param name="endHour"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetBuildingGuanghuaEnergyStatisSpecialHours(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, int startHour, int endHour, double sum)
        {
            endTime = endTime.AddDays(1);
            startHour--;
            endHour--;
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              where bgh.ED_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 3:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              join amp in _dataContext.AnalogMeasurePoints on bgh.BG_No equals amp.AMP_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from bgh in _dataContext.BuildingGuanghua
                                              join ah in _dataContext.AnalogHistories on bgh.BG_No equals ah.AH_AnalogNo
                                              where bgh.TS_ID == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                                              && ah.AH_Time.Hour == 23
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                case 4:
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        // 防止0点，即要取上一天最后一个小时的最大值
                        if (startHour == -1)
                        {
                            startTime = startTime.AddDays(-1);
                            minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time <= endTime && ah.AH_Time.Hour == startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   DTime = g.Key,
                                   StatisVal = g.Sum()
                               };
                    }
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 获取指定测点指定时间前后的值
        /// </summary>
        /// <param name="analogNo">测点编号</param>
        /// <param name="inputDateTime">时间</param>
        /// <returns>返回包含值的Dictionary，其中键min表示小的值，max表示较大的值</returns>
        public IDictionary<string, string> GetTwoEndpointVal(int analogNo, DateTime inputDateTime)
        {
            if (_dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == inputDateTime).Count() > 0)
            {
                return new Dictionary<string, string>();
            }
            IDictionary<string, string> dic = new Dictionary<string, string>();
            var lessObj = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time < inputDateTime).OrderByDescending(x => x.AH_Time).FirstOrDefault();
            if (lessObj != null)
            {
                dic["min"] = lessObj.AH_Value.ToString("f1");
            }
            else
            {
                dic["min"] = "";
            }
            var greatObj = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > inputDateTime).OrderBy(x => x.AH_Time).FirstOrDefault();
            if (greatObj != null)
            {
                dic["max"] = greatObj.AH_Value.ToString("f1");
            }
            else
            {
                dic["max"] = "";
            }
            return dic;
        }

        /// <summary>
        /// 获取指定测点指定时间前后的值，不论输入时刻是否已经存在
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="inputDateTime"></param>
        /// <returns></returns>
        public IDictionary<string, string> GetTwoEndpointValAlt(int analogNo, DateTime inputDateTime)
        {
            IDictionary<string, string> dic = new Dictionary<string, string>();
            var lessObj = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time < inputDateTime).OrderByDescending(x => x.AH_Time).FirstOrDefault();
            if (lessObj != null)
            {
                dic["min"] = lessObj.AH_Value.ToString("f1");
            }
            else
            {
                dic["min"] = "";
            }
            var greatObj = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > inputDateTime).OrderBy(x => x.AH_Time).FirstOrDefault();
            if (greatObj != null)
            {
                dic["max"] = greatObj.AH_Value.ToString("f1");
            }
            else
            {
                dic["max"] = "";
            }

            return dic;
        }

        /// <summary>
        /// 修改测点值
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="time"></param>
        /// <param name="modifyVal"></param>
        /// <returns></returns>
        public bool Modify(int analogNo, DateTime time, double modifyVal)
        {
            try
            {
                var item = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == time).SingleOrDefault();
                if (item != null)
                {
                    item.AH_Value = modifyVal;

                    ////判断修改值是否为当天的最大值，如果是，需要修改历史值天粒度统计表
                    //if (_dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > time && x.AH_Time < time.Date.AddDays(1)).Count() == 0)
                    //{
                    //    var maxPreDayVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= time.Date.AddDays(-1) && x.AH_Time < time.Date).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                    //    if (maxPreDayVal != null)
                    //    {
                    //        var curItem = _dataContext.AnalogHistoryDays.SingleOrDefault(x => x.AHD_AnalogNo == analogNo && x.AHD_HTime == time.Date);
                    //        if (curItem != null)
                    //        {
                    //            curItem.AHD_Value = modifyVal - maxPreDayVal.AH_Value;
                    //        }
                    //    }
                    //    var maxLaterDayVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= time.Date.AddDays(1) && x.AH_Time < time.Date.AddDays(2)).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                    //    if (maxLaterDayVal != null)
                    //    {
                    //        var laterItem = _dataContext.AnalogHistoryDays.SingleOrDefault(x => x.AHD_AnalogNo == analogNo && x.AHD_HTime == time.Date.AddDays(1));
                    //        if (laterItem != null)
                    //        {
                    //            laterItem.AHD_Value = maxLaterDayVal.AH_Value - modifyVal;
                    //        }
                    //    }
                    //}
                    ////判断修改值是否为当月的最大值，如果是，需要修改历史值月粒度统计表
                    //var currentMonthTime = DateTime.Parse(time.ToString("yyyy-MM-01 00:00:00"));
                    //if (_dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > time && x.AH_Time < currentMonthTime.AddMonths(1)).Count() == 0)
                    //{
                    //    var preMonthTime = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= currentMonthTime.AddMonths(-1) && x.AH_Time < currentMonthTime).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                    //    if (preMonthTime != null)
                    //    {
                    //        var curMonthItem = _dataContext.AnalogHistoryMonths.SingleOrDefault(x => x.AHM_AnalogNo == analogNo && x.AHM_MTime == currentMonthTime);
                    //        if (curMonthItem != null)
                    //        {
                    //            curMonthItem.AHM_Value = modifyVal - preMonthTime.AH_Value;
                    //        }
                    //    }
                    //    var nextMonthTime = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= currentMonthTime.AddMonths(1) && x.AH_Time < currentMonthTime.AddMonths(2)).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                    //    if (nextMonthTime != null)
                    //    {
                    //        var laterMonthItem = _dataContext.AnalogHistoryMonths.Single(x => x.AHM_AnalogNo == analogNo && x.AHM_MTime == currentMonthTime.AddMonths(1));
                    //        if (laterMonthItem != null)
                    //        {
                    //            laterMonthItem.AHM_Value = nextMonthTime.AH_Value - modifyVal;
                    //        }
                    //    }
                    //}

                    _dataContext.SubmitChanges();
                }
                else
                {
                    return false;
                }
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// 删除测点值
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="time"></param>
        /// <returns></returns>
        public bool Delete(int analogNo, DateTime time)
        {
            try
            {
                var item = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == time).SingleOrDefault();
                if (item != null)
                {
                    _dataContext.AnalogHistories.DeleteOnSubmit(item);
                    _dataContext.SubmitChanges();
                    ////判断删除值是否为当天的最大值，如果是，需要修改历史值天粒度统计表
                    //if (_dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > time && x.AH_Time < time.Date.AddDays(1)).Count() == 0)
                    //{
                    //    var maxPreDayVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= time.Date.AddDays(-1) && x.AH_Time < time.Date).OrderByDescending(x => x.AH_Time).Take(1);
                    //    var maxCurDayVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= time.Date && x.AH_Time < time.Date.AddDays(1)).OrderByDescending(x => x.AH_Time).Take(1);
                    //    var maxLaterDayVal = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= time.Date.AddDays(1) && x.AH_Time < time.Date.AddDays(2)).OrderByDescending(x => x.AH_Time).Take(1);
                    //    var maxDayVal = maxPreDayVal.Union(maxCurDayVal).Union(maxLaterDayVal).ToDictionary(x => x.AH_Time.Date);
                    //    if (maxDayVal[time.Date] != null && maxDayVal[time.Date.AddDays(-1)] != null)
                    //    {
                    //        var curItem = _dataContext.AnalogHistoryDays.SingleOrDefault(x => x.AHD_AnalogNo == analogNo && x.AHD_HTime == time.Date);
                    //        if (curItem != null)
                    //        {
                    //            curItem.AHD_Value = maxDayVal[time.Date].AH_Value - maxDayVal[time.Date.AddDays(-1)].AH_Value;
                    //        }
                    //    }
                    //    if (maxDayVal[time.Date.AddDays(1)] != null && maxDayVal[time.Date] != null)
                    //    {
                    //        var laterItem = _dataContext.AnalogHistoryDays.SingleOrDefault(x => x.AHD_AnalogNo == analogNo && x.AHD_HTime == time.Date.AddDays(1));
                    //        if (laterItem != null)
                    //        {
                    //            laterItem.AHD_Value = maxDayVal[time.Date.AddDays(1)].AH_Value - maxDayVal[time.Date].AH_Value;
                    //        }
                    //    }
                    //}
                    ////判断删除值是否为当月的最大值，如果是，需要修改历史值月粒度统计表
                    //var currentMonthTime = DateTime.Parse(time.ToString("yyyy-MM-01 00:00:00"));
                    //if (_dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time > time && x.AH_Time < currentMonthTime.AddMonths(1)).Count() == 0)
                    //{
                    //    var preMonthTime = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= currentMonthTime.AddMonths(-1) && x.AH_Time < currentMonthTime).OrderByDescending(x => x.AH_Time).Take(1);
                    //    var curMonthTime = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= currentMonthTime && x.AH_Time < currentMonthTime.AddMonths(1)).OrderByDescending(x => x.AH_Time).Take(1);
                    //    var nextMonthTime = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time >= currentMonthTime.AddMonths(1) && x.AH_Time < currentMonthTime.AddMonths(2)).OrderByDescending(x => x.AH_Time).Take(1);
                    //    var monthTime = preMonthTime.Union(curMonthTime).Union(nextMonthTime).ToDictionary(x => x.AH_Time.Year + "-" + x.AH_Time.Month);
                    //    if (monthTime[currentMonthTime.Year + "-" + currentMonthTime.Month] != null && monthTime[currentMonthTime.AddMonths(-1).Year + "-" + currentMonthTime.AddMonths(-1).Month] != null)
                    //    {
                    //        var curMonthItem = _dataContext.AnalogHistoryMonths.SingleOrDefault(x => x.AHM_AnalogNo == analogNo && x.AHM_MTime == currentMonthTime);
                    //        if (curMonthItem != null)
                    //        {
                    //            curMonthItem.AHM_Value = monthTime[currentMonthTime.Year + "-" + currentMonthTime.Month].AH_Value - monthTime[currentMonthTime.AddMonths(-1).Year + "-" + currentMonthTime.AddMonths(-1).Month].AH_Value;
                    //        }
                    //    }
                    //    if (monthTime[currentMonthTime.AddMonths(1).Year + "-" + currentMonthTime.AddMonths(1).Month] != null && monthTime[currentMonthTime.Year + "-" + currentMonthTime.Month] != null)
                    //    {
                    //        var laterMonthItem = _dataContext.AnalogHistoryMonths.Single(x => x.AHM_AnalogNo == analogNo && x.AHM_MTime == currentMonthTime.AddMonths(1));
                    //        if (laterMonthItem != null)
                    //        {
                    //            laterMonthItem.AHM_Value = monthTime[currentMonthTime.AddMonths(1).Year + "-" + currentMonthTime.AddMonths(1).Month].AH_Value - monthTime[currentMonthTime.Year + "-" + currentMonthTime.Month].AH_Value;
                    //        }
                    //    }
                    //}
                }
                else
                {
                    return false;
                }
                _dataContext.SubmitChanges();
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// 获取指定时间的指定小时之间的能耗使用值
        /// </summary>
        /// <param name="queryType">对象类型 1:校区,2:区域,3:建筑,4:房间</param>
        /// <param name="id">对象id</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <param name="powerTypes">能耗类型</param>
        /// <param name="startHour">统计的小时段的开始小时</param>
        /// <param name="endHour">统计的小时段的结束小时</param>
        /// <returns>包含ChartStatisEntity对象的IQueryable</returns>
        public IQueryable<ChartStatisEntity> GetEnergyBySpecialHours(int queryType, int id, DateTime startTime, DateTime endTime, string[] powerTypes, int startHour, int endHour)
        {           
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    //if (powerTypes != null)
                    //{
                    //    var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                    //                          && ah.AH_Time.Hour < endHour
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };
                    //    var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                    //                          && ah.AH_Time.Hour < startHour
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };
                    //    if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                    //    {
                    //        startTime = startTime.AddDays(-1);
                    //        endTime = endTime.AddDays(-1);
                    //        minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType) 
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                    //                              Val = g.Max()
                    //                          };                         
                    //    }
                    //    else if (startHour == 24) // 如果是24点，取当天最大值即可
                    //    {
                    //        minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };

                    //    }
                    //    var query = from max in maxHourValQuery
                    //                from min in minHourValQuery
                    //                where max.PNO == min.PNO && max.Time == min.Time
                    //                select new
                    //                {
                    //                    PNO = max.PNO,
                    //                    Time = max.Time,
                    //                    Val = max.Val - min.Val
                    //                };

                    //    list = from q in query
                    //           group q.Val by q.Time into g
                    //           select new ChartStatisEntity
                    //           {
                    //               Time = g.Key,
                    //               DTime = g.Key,
                    //               StatisVal = g.Sum(),
                    //               Month = g.Key.Month
                    //           };
                    //}
                    //else
                    //{
                    //    var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                    //                          && ah.AH_Time.Hour < endHour
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };
                    //    var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                    //                          && ah.AH_Time.Hour < startHour
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };
                    //    if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                    //    {
                    //        startTime = startTime.AddDays(-1);
                    //        endTime = endTime.AddDays(-1);
                    //        minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                    //                              Val = g.Max()
                    //                          };                     
                    //    }
                    //    else if (startHour == 24) // 如果是24点，取当天最大值即可
                    //    {
                    //        minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                    //                          join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                    //                          where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()                                                 
                    //                          };                        
                    //    }
                    //    var query = from max in maxHourValQuery
                    //                from min in minHourValQuery
                    //                where max.PNO == min.PNO && max.Time == min.Time
                    //                select new
                    //                {
                    //                    PNO = max.PNO,
                    //                    Time = max.Time,
                    //                    Val = max.Val - min.Val
                    //                };                     
                    //    list = from q in query
                    //           group q.Val by q.Time into g
                    //           select new ChartStatisEntity
                    //           {
                    //               Time = g.Key,
                    //               DTime = g.Key,
                    //               StatisVal = g.Sum(),
                    //               Month = g.Key.Month
                    //           };
                    //}
                    //break;
                     if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)                                              
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = _dataContext.AnalogHistories.Where(x => x.AH_Time<new DateTime(g.Key.Date.Year,g.Key.Date.Month,g.Key.Date.Day,endHour,0,0)).Select(x => x.AH_Value).Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)                                              
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = _dataContext.AnalogHistories.Where(x => x.AH_Time < new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, startHour, 0, 0)).Select(x => x.AH_Value).Max()
                                              };
                       var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };

                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime                                              
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = _dataContext.AnalogHistories.Where(x => x.AH_Time < new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, endHour, 0, 0)).Select(x => x.AH_Value).Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime                                              
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = _dataContext.AnalogHistories.Where(x => x.AH_Time < new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day, startHour, 0, 0)).Select(x => x.AH_Value).Max()
                                              };                        
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };                     
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    break;
                case 2:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour < endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour < startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                        {
                            startTime = startTime.AddDays(-1);
                            endTime = endTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        else if (startHour == 24) // 如果是24点，取当天最大值即可
                        {
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              && ah.AH_Time.Hour < endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              && ah.AH_Time.Hour < startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                        {
                            startTime = startTime.AddDays(-1);
                            endTime = endTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        else if (startHour == 24) // 如果是24点，取当天最大值即可
                        {
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    break;
                case 3:
                     var buildingBDI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                    var buildingName = buildingBDI.BDI_Name;
                    if (powerTypes != null)
                    {
                        if(buildingBDI.BDI_HJFlag == 1 && powerTypes.Contains("001"))
                        {
                            string operateRule = buildingBDI.BDI_OperateRule;
                            string[] pointStr = operateRule.Split('|');
                            string[] firstIDOpt = pointStr[0].Split('_');
                            int firstPointID = Convert.ToInt32(firstIDOpt[1]);
                            string firstOperate = firstIDOpt[0];
                            IList<ChartStatisEntity> resultList = GetEnergyBySpecialHours(5, firstPointID, startTime, endTime, new string[] { }, startHour, endHour).ToList();
                            for (int k = 1; k < pointStr.Length; k++ )
                            {
                                var pointStrItem = pointStr[k];
                                string[] IDOpt = pointStrItem.Split('_');
                                int pointID = Convert.ToInt32(IDOpt[1]);
                                string operate = IDOpt[0];
                                var newstatisMonthOfPoint = GetEnergyBySpecialHours(5, pointID, startTime, endTime, new string[] { }, startHour, endHour).ToList();
                                if (operate == "+")
                                {
                                    var newlist = (from sm in resultList
                                                   from nsm in newstatisMonthOfPoint
                                                   where sm.Time == nsm.Time
                                                   select new ChartStatisEntity
                                                   {
                                                       Time = sm.Time,
                                                       DTime = sm.Time,
                                                       StatisVal = sm.StatisVal + nsm.StatisVal,
                                                       Month = sm.Month

                                                   }).ToList();
                                }
                                else if (operate == "-")
                                {
                                    var newlist = from sm in resultList
                                                  from nsm in newstatisMonthOfPoint
                                                  where sm.Time == nsm.Time
                                                  select new ChartStatisEntity
                                                  {
                                                      Time = sm.Time,
                                                      DTime = sm.Time,
                                                      StatisVal = sm.StatisVal - nsm.StatisVal,
                                                      Month = sm.Month
                                                  };
                                    resultList = newlist.Union(
                                            from li in resultList
                                            where !newlist.Any(x => x.Time == li.Time)
                                            select li
                                        ).ToList();
                                }
                            }
                            return resultList.AsQueryable();
                        }
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour < endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new 
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        //foreach (var mhv in maxHourValQuery)
                        //{
                        //    if (mhv.Val == null)
                        //        mhv.Val = _dataContext.AnalogHistories.Where(x => x.AH_Time < new DateTime(mhv.Time.Year, mhv.Time.Month, mhv.Time.Day, endHour, 0, 0)).Select(x => x.AH_Value).Max() - _dataContext.AnalogHistories.Where(x => x.AH_Time < new DateTime(mhv.Time.Year, mhv.Time.Month, mhv.Time.Day, startHour, 0, 0)).Select(x => x.AH_Value).Max();
                        //}
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour < startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new 
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var finalList = minHourValQuery.ToList();
                        //foreach (var mhv in maxHourValQuery)
                        //{
                        //    if (mhv.Val == null)
                        //        mhv.Val = _dataContext.AnalogHistories.Where(x => x.AH_Time < new DateTime(mhv.Time.Year, mhv.Time.Month, mhv.Time.Day, endHour, 0, 0)).Select(x => x.AH_Value).Max() - _dataContext.AnalogHistories.Where(x => x.AH_Time < new DateTime(mhv.Time.Year, mhv.Time.Month, mhv.Time.Day, startHour, 0, 0)).Select(x => x.AH_Value).Max();
                        //}
                        //if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                        //{
                        //    startTime = startTime.AddDays(-1);
                        //    endTime = endTime.AddDays(-1);
                        //    minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                        //                      join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                      where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                      group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                        //                      select new
                        //                      {
                        //                          PNO = g.Key.AH_AnalogNo,
                        //                          Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                        //                          Val = g.Max()
                        //                      };
                        //}
                        //else if (startHour == 24) // 如果是24点，取当天最大值即可
                        //{
                        //    minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                        //                      join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                        //                      where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                        //                      group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                        //                      select new
                        //                      {
                        //                          PNO = g.Key.AH_AnalogNo,
                        //                          Time = g.Key.Date,
                        //                          Val = g.Max()
                        //                      };
                        //}
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              && ah.AH_Time.Hour < endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              && ah.AH_Time.Hour < startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                        {
                            startTime = startTime.AddDays(-1);
                            endTime = endTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        else if (startHour == 24) // 如果是24点，取当天最大值即可
                        {
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    break;
                case 4:
                    if (powerTypes != null)
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour < endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              && ah.AH_Time.Hour < startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                        {
                            startTime = startTime.AddDays(-1);
                            endTime = endTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        else if (startHour == 24) // 如果是24点，取当天最大值即可
                        {
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime && powerTypes.Contains(amp.AMP_PowerType)
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    else
                    {
                        var maxHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime                                            
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = ((_dataContext.AnalogHistories.Where(x => x.AH_Time <= g.Key.Date && x.AH_Time.Hour <= endHour).Select(x => x.AH_Value) ).Max()-( _dataContext.AnalogHistories.Where(x => x.AH_Time <= g.Key.Date && x.AH_Time.Hour <= startHour).Select(x => x.AH_Value)).Max())
                                              };
                        var minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              && ah.AH_Time.Hour < startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                        {
                            startTime = startTime.AddDays(-1);
                            endTime = endTime.AddDays(-1);
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        else if (startHour == 24) // 如果是24点，取当天最大值即可
                        {
                            minHourValQuery = from amp in _dataContext.AnalogMeasurePoints
                                              join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                              where amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    break;
                case 5:
                    //{
                    //    var maxHourValQuery = from ah in _dataContext.AnalogHistories
                    //                          where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime && ah.AH_Time.Hour < endHour
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };
                    //    var minHourValQuery = from ah in _dataContext.AnalogHistories
                    //                          where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime && ah.AH_Time.Hour < startHour
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };
                    //    if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                    //    {
                    //        startTime = startTime.AddDays(-1);
                    //        endTime = endTime.AddDays(-1);
                    //        minHourValQuery = from ah in _dataContext.AnalogHistories
                    //                          where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime 
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                    //                              Val = g.Max()
                    //                          };
                    //    }
                    //    else if (startHour == 24) // 如果是24点，取当天最大值即可
                    //    {
                    //        minHourValQuery = from ah in _dataContext.AnalogHistories
                    //                          where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime 
                    //                          group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                    //                          select new
                    //                          {
                    //                              PNO = g.Key.AH_AnalogNo,
                    //                              Time = g.Key.Date,
                    //                              Val = g.Max()
                    //                          };
                    //    }
                    //    var query = from max in maxHourValQuery
                    //                from min in minHourValQuery
                    //                where max.PNO == min.PNO && max.Time == min.Time
                    //                select new
                    //                {
                    //                    PNO = max.PNO,
                    //                    Time = max.Time,
                    //                    Val = max.Val - min.Val
                    //                };
                    //    list = from q in query
                    //           group q.Val by q.Time into g
                    //           select new ChartStatisEntity
                    //           {
                    //               Time = g.Key,
                    //               DTime = g.Key,
                    //               StatisVal = g.Sum(),
                    //               Month = g.Key.Month
                    //           };
                    //}
                    //break;
                    {
                        var maxHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime && ah.AH_Time.Hour < endHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        var minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime && ah.AH_Time.Hour < startHour
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        if (startHour == 0) // 如果是0点，应该取上一天最大值，并把时间加1天，作为当天使用
                        {
                            startTime = startTime.AddDays(-1);
                            endTime = endTime.AddDays(-1);
                            minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = new DateTime(g.Key.Date.Year, g.Key.Date.Month, g.Key.Date.Day).AddDays(1),
                                                  Val = g.Max()
                                              };
                        }
                        else if (startHour == 24) // 如果是24点，取当天最大值即可
                        {
                            minHourValQuery = from ah in _dataContext.AnalogHistories
                                              where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime 
                                              group ah.AH_Value by new { ah.AH_AnalogNo, ah.AH_Time.Date } into g
                                              select new
                                              {
                                                  PNO = g.Key.AH_AnalogNo,
                                                  Time = g.Key.Date,
                                                  Val = g.Max()
                                              };
                        }
                        var query = from max in maxHourValQuery
                                    from min in minHourValQuery
                                    where max.PNO == min.PNO && max.Time == min.Time
                                    select new
                                    {
                                        PNO = max.PNO,
                                        Time = max.Time,
                                        Val = max.Val - min.Val
                                    };
                        list = from q in query
                               group q.Val by q.Time into g
                               select new ChartStatisEntity
                               {
                                   Time = g.Key,
                                   DTime = g.Key,
                                   StatisVal = g.Sum(),
                                   Month = g.Key.Month
                               };
                    }
                    break;
                default:
                    break;
            }
            return list;
        }

        /// <summary>
        /// 查询对象历史值
        /// </summary>
        /// <param name="queryType">类型，1：校区；2：区域；3：建筑；4：房间</param>
        /// <param name="id">对象id</param>
        /// <param name="startTime">开始时间</param>
        /// <param name="endTime">结束时间</param>
        /// <param name="powerType">能耗类型</param>
        /// <returns>得到的对象历史值集合</returns>
        public IQueryable<EnergyEntity> GetHistoryVal(int queryType, int id, DateTime startTime, DateTime endTime, string powerType)
        {
            endTime = endTime.AddDays(1);
            IQueryable<EnergyEntity> query = null;
            switch (queryType)
            {
                case 1:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            from ah in _dataContext.AnalogHistories
                            where amp.AMP_AnalogNo == ah.AH_AnalogNo && amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                            select new EnergyEntity
                            {
                                PNO = amp.AMP_AnalogNo,
                                PowerType = amp.AMP_PowerType,
                                PowerName = amp.AMP_PowerName,
                                SecondTime = ah.AH_Time,
                                RealTime = ah.AH_Time,
                                Val = ah.AH_Value
                            };
                    break;
                case 2:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            from ah in _dataContext.AnalogHistories
                            where amp.AMP_AnalogNo == ah.AH_AnalogNo && amp.AMP_SAreaID == id && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                            select new EnergyEntity
                            {
                                PNO = amp.AMP_AnalogNo,
                                PowerType = amp.AMP_PowerType,
                                PowerName = amp.AMP_PowerName,
                                SecondTime = ah.AH_Time,
                                RealTime = ah.AH_Time,
                                Val = ah.AH_Value
                            };
                    break;
                case 3:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            from ah in _dataContext.AnalogHistories
                            where amp.AMP_AnalogNo == ah.AH_AnalogNo && amp.AMP_BuildingID == id && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                            select new EnergyEntity
                            {
                                PNO = amp.AMP_AnalogNo,
                                PowerType = amp.AMP_PowerType,
                                PowerName = amp.AMP_PowerName,
                                SecondTime = ah.AH_Time,
                                RealTime = ah.AH_Time,
                                Val = ah.AH_Value
                            };
                    break;
                case 4:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            from ah in _dataContext.AnalogHistories
                            where amp.AMP_AnalogNo == ah.AH_AnalogNo && amp.AMP_RoomID == id && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                            select new EnergyEntity
                            {
                                PNO = amp.AMP_AnalogNo,
                                PowerType = amp.AMP_PowerType,
                                PowerName = amp.AMP_PowerName,
                                SecondTime = ah.AH_Time,
                                RealTime = ah.AH_Time,
                                Val = ah.AH_Value
                            };
                    break;
                case 5:
                    query = from ah in _dataContext.AnalogHistories
                            join amp in _dataContext.AnalogMeasurePoints on ah.AH_AnalogNo equals amp.AMP_AnalogNo
                            where ah.AH_AnalogNo == id && ah.AH_Time >= startTime && ah.AH_Time < endTime
                            select new EnergyEntity
                            {
                                PNO = ah.AH_AnalogNo,
                                PowerType = amp.AMP_PowerType,
                                PowerName = amp.AMP_PowerName,
                                SecondTime = ah.AH_Time,
                                RealTime = ah.AH_Time,
                                Val = ah.AH_Value
                            };
                    break;
                default:
                    query = from amp in _dataContext.AnalogMeasurePoints
                            from ah in _dataContext.AnalogHistories
                            where amp.AMP_AnalogNo == ah.AH_AnalogNo && amp.AMP_SchooldID == id && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time >= startTime && ah.AH_Time < endTime
                            select new EnergyEntity
                            {
                                PNO = amp.AMP_AnalogNo,
                                PowerType = amp.AMP_PowerType,
                                PowerName = amp.AMP_PowerName,
                                SecondTime = ah.AH_Time,
                                RealTime = ah.AH_Time,
                                Val = ah.AH_Value
                            };
                    break;
            }
            if (query != null && powerType != null)
            {
                query = query.Where(x => x.PowerType == powerType);
            }
            return query;
        }

        /// <summary>
        /// 获取完整名称的查询对象的一段时间的使用能耗值
        /// </summary>
        /// <param name="queryType"></param>
        /// <param name="ids"></param>
        /// <param name="buildingInSchoolId">建筑所属校区，当queryType为楼宇，即为3时，且ids为null时有效</param>
        /// <param name="powerTypes"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <param name="sum"></param>
        /// <returns></returns>
        public IQueryable<ChartStatisEntity> GetEnergyFullName(int queryType, int?[] ids, String buildingType, int buildingInSchoolId, string[] powerTypes, DateTime startTime, DateTime endTime, double sum)
        {
            endTime = new DateTime(endTime.Year, endTime.Month, endTime.Day, 23, 59, 59);
            IQueryable<ChartStatisEntity> list = null;
            switch (queryType)
            {
                case 1:
                    var maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SchooldID > 0 && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, si.SI_Name, amp.AMP_PowerType, si.SI_BuildingArea } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = g.Key.SI_BuildingArea.HasValue ? Convert.ToDouble(g.Key.SI_BuildingArea.Value) : Convert.ToDouble(0)
                                     };
                    if (ids != null)
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, si.SI_Name, amp.AMP_PowerType, si.SI_BuildingArea } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = g.Key.SI_BuildingArea.HasValue ? Convert.ToDouble(g.Key.SI_BuildingArea.Value) : Convert.ToDouble(0)
                                     };
                    }
                    var minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SchooldID > 0 && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                    if (ids != null)
                    {
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_SchooldID) && amp.AMP_SAreaID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                    }
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO && max.IName == min.IName
                                select new
                                {
                                    PNO = max.PNO,
                                    IName = max.IName,
                                    Val = max.Val - min.Val,
                                    Area = max.Area
                                })
                           group temp.Val by new { temp.IName, temp.Area } into g
                           select new ChartStatisEntity
                           {
                               Name = g.Key.IName,
                               StatisVal = g.Sum(),
                               Sum = sum,
                               valPerArea = (g.Key.Area == 0 || g.Key.Area == null) ? 0 : g.Sum() / g.Key.Area,
                           };
                    break;
                case 2:
                    if (ids != null)
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = Convert.ToDouble(0)
                                     };
                    }
                    else
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SAreaID > 0 && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = Convert.ToDouble(0)
                                     };
                    }
                    if (ids != null)
                    {
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_SAreaID) && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                     };
                    }
                    else
                    {
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_SAreaID > 0 && amp.AMP_BuildingID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                    }
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO && max.IName == min.IName
                                select new
                                {
                                    PNO = max.PNO,
                                    IName = max.IName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by temp.IName into g
                           select new ChartStatisEntity
                           {
                               Name = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 3:
                    if (ids != null && buildingType == "all")
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime && bbi.BDI_HJFlag == 0
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, bdi.BDI_Area, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = g.Key.BDI_Area.HasValue ? g.Key.BDI_Area.Value : 0
                                     };
                    }
                    else if (ids != null && buildingType != "all")
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                     where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime && buildingType == bdi.BDI_Type && bbi.BDI_HJFlag == 0
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, bdi.BDI_Area, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = g.Key.BDI_Area.HasValue ? g.Key.BDI_Area.Value : 0
                                     };
                    }
                    else
                    {
                        if (buildingInSchoolId == 0 && buildingType == "all")
                        {
                            maxValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, bdi.BDI_Area, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max(),
                                             Area = g.Key.BDI_Area.HasValue ? g.Key.BDI_Area.Value : 0
                                         };
                        }
                        else if (buildingInSchoolId == 0 && buildingType != "all")
                        {
                            maxValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime && buildingType == bdi.BDI_Type && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, bdi.BDI_Area, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max(),
                                             Area = g.Key.BDI_Area.HasValue ? g.Key.BDI_Area.Value : 0
                                         };
                        }
                        else if (buildingInSchoolId != 0 && buildingType != "all")
                        {
                            maxValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime && si.SI_ID == buildingInSchoolId && buildingType == bdi.BDI_Type && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, bdi.BDI_Area, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max(),
                                             Area = g.Key.BDI_Area.HasValue ? g.Key.BDI_Area.Value : 0
                                         };
                        }

                        else
                        {
                            maxValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime && si.SI_ID == buildingInSchoolId && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, bdi.BDI_Area, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max(),
                                             Area = g.Key.BDI_Area.HasValue ? g.Key.BDI_Area.Value : 0
                                         };
                        }

                    }
                    if (ids != null && buildingType == "all")
                    {
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime && bbi.BDI_HJFlag == 0
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                    }
                    else if (ids != null && buildingType != "all")
                    {
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                     where ids.Contains(amp.AMP_BuildingID) && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime && buildingType == bdi.BDI_Type && bbi.BDI_HJFlag == 0
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                    }
                    else
                    {
                        if (buildingInSchoolId == 0 && buildingType == "all")
                        {
                            minValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max()
                                         };
                        }
                        else if (buildingInSchoolId == 0 && buildingType != "all")
                        {
                            minValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime && buildingType == bdi.BDI_Type && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max()
                                         };
                        }
                        else if (buildingInSchoolId != 0 && buildingType != "all")
                        {
                            minValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         join bdi in _dataContext.BuildingDetailInfos on amp.AMP_BuildingID equals bdi.BDI_ID
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime && si.SI_ID == buildingInSchoolId && buildingType == bdi.BDI_Type && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max()
                                         };
                        }

                        else
                        {
                            minValList = from amp in _dataContext.AnalogMeasurePoints
                                         join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                         join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                         join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                         join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                         where amp.AMP_BuildingID > 0 && amp.AMP_RoomID == 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime && si.SI_ID == buildingInSchoolId && bbi.BDI_HJFlag == 0
                                         group ah.AH_Value by new { amp.AMP_AnalogNo, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                         select new
                                         {
                                             PNO = g.Key.AMP_AnalogNo,
                                             IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name,
                                             PowerType = g.Key.AMP_PowerType,
                                             Val = g.Max()
                                         };
                        }

                    }
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO && max.IName == min.IName
                                select new
                                {
                                    PNO = max.PNO,
                                    IName = max.IName,
                                    Val = max.Val - min.Val,
                                    Area = max.Area
                                })
                           group temp.Val by new { temp.IName, temp.Area } into g
                           select new ChartStatisEntity
                           {
                               Name = g.Key.IName,
                               StatisVal = g.Sum(),
                               valPerArea = (g.Key.Area == 0 || g.Key.Area == null) ? 0 : g.Sum() / g.Key.Area,
                               Sum = sum
                           };
                    IList<ChartStatisEntity> otherList = new List<ChartStatisEntity>();
                    if (ids != null)
                    {
                        if (buildingType == "all")
                        {
                            foreach (var idItem in ids)
                            {
                                var id = idItem.Value;
                                var buildingBI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                                if (buildingBI.BDI_HJFlag == 1)
                                {
                                    var val = GetEnergy(3, id, powerTypes, startTime, endTime);
                                    var Area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                                    var buildingName = (from bbi in _dataContext.BuildingBriefInfos
                                                        from sai in _dataContext.SchoolAreaInfos
                                                        from si in _dataContext.SchoolInfos
                                                        where bbi.BDI_ID == id && bbi.SAI_ID == sai.SAI_ID && sai.SI_ID == si.SI_ID
                                                        select si.SI_Name + ">" + sai.SAI_Name + ">" + bbi.BDI_Name).Single();

                                    otherList.Add(new ChartStatisEntity
                                    {
                                        Name = buildingName,
                                        StatisVal = val,
                                        valPerArea = (Area == null || Area == 0) ? 0 : val / Area.Value,
                                        Sum = sum
                                    });
                                }

                            }
                        }
                        else
                        {
                            foreach (var idItem in ids)
                            {
                                var id = idItem.Value;
                                var buildingDI = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Single();
                                var buildingBI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_ID == id).Single();
                                if (buildingDI.BDI_Type == buildingType && buildingBI.BDI_HJFlag == 1)
                                {
                                    var val = GetEnergy(3, id, powerTypes, startTime, endTime);
                                    var Area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == id).Select(x => x.BDI_Area).Single();
                                    var buildingName = (from bbi in _dataContext.BuildingBriefInfos
                                                        from sai in _dataContext.SchoolAreaInfos
                                                        from si in _dataContext.SchoolInfos
                                                        where bbi.BDI_ID == id && bbi.SAI_ID == sai.SAI_ID && sai.SI_ID == si.SI_ID
                                                        select si.SI_Name + ">" + sai.SAI_Name + ">" + bbi.BDI_Name).Single();
                                    otherList.Add(new ChartStatisEntity
                                    {
                                        Name = buildingName,
                                        StatisVal = val,
                                        valPerArea = (Area == null || Area == 0) ? 0 : val / Area.Value,
                                        Sum = sum
                                    });
                                }
                            }
                        }
                    }
                    else
                    {
                        IQueryable<BuildingBriefInfo> buildingBI = null;
                        if (buildingInSchoolId != 0 && buildingType == "all")
                        {
                            buildingBI = from sai in _dataContext.SchoolAreaInfos
                                         from bbi in _dataContext.BuildingBriefInfos
                                         where bbi.BDI_HJFlag == 1 && sai.SI_ID == buildingInSchoolId && sai.SAI_ID == bbi.SAI_ID
                                         select bbi;
                        }
                        else if (buildingInSchoolId == 0 && buildingType == "all")
                        {
                            buildingBI = _dataContext.BuildingBriefInfos.Where(x => x.BDI_HJFlag == 1);
                        }
                        else if (buildingInSchoolId == 0 && buildingType != "all")
                        {
                            buildingBI = from bbi in _dataContext.BuildingBriefInfos
                                         from bdi in _dataContext.BuildingDetailInfos
                                         where bbi.BDI_HJFlag == 1 && bdi.BDI_Type == buildingType && bbi.BDI_ID == bdi.BDI_ID
                                         select bbi;
                        }
                        else if (buildingInSchoolId != 0 && buildingType != "all")
                        {
                            buildingBI = from bbi in _dataContext.BuildingBriefInfos
                                         from bdi in _dataContext.BuildingDetailInfos
                                         from sai in _dataContext.SchoolAreaInfos
                                         where bbi.BDI_HJFlag == 1 && sai.SAI_ID == bbi.SAI_ID && sai.SI_ID == buildingInSchoolId && bdi.BDI_Type == buildingType && bbi.BDI_ID == bdi.BDI_ID
                                         select bbi;
                        }
                        List<BuildingBriefInfo> buildingBIList = buildingBI.ToList();
                        foreach (var bbi in buildingBIList)
                        {
                            var val = GetEnergy(3, bbi.BDI_ID, powerTypes, startTime, endTime);
                            var Area = _dataContext.BuildingDetailInfos.Where(x => x.BDI_ID == bbi.BDI_ID).Single().BDI_Area;
                            var buildingName = (from bbinfo in _dataContext.BuildingBriefInfos
                                                from sai in _dataContext.SchoolAreaInfos
                                                from si in _dataContext.SchoolInfos
                                                where bbinfo.BDI_ID == bbi.BDI_ID && bbinfo.SAI_ID == sai.SAI_ID && sai.SI_ID == si.SI_ID
                                                select si.SI_Name + ">" + sai.SAI_Name + ">" + bbinfo.BDI_Name).Single();
                            otherList.Add(new ChartStatisEntity
                            {
                                Name = buildingName,
                                StatisVal = val,
                                valPerArea = (Area == null || Area == 0) ? 0 : val / Area.Value,
                                Sum = sum
                            });
                        }
                    }
                    list = list.ToList().Union(otherList.AsEnumerable()).AsQueryable();
                    break;
                case 4:
                    if (ids != null)
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, ri.RI_RoomCode, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name + ">" + g.Key.RI_RoomCode,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = Convert.ToDouble(0)
                                     };
                    }
                    else
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_RoomID > 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, ri.RI_RoomCode, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name + ">" + g.Key.RI_RoomCode,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = Convert.ToDouble(0)
                                     };
                    }
                    if (ids != null)
                    {
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where ids.Contains(amp.AMP_RoomID) && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, ri.RI_RoomCode, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name + ">" + g.Key.RI_RoomCode,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                    }
                    else
                    {
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     join si in _dataContext.SchoolInfos on amp.AMP_SchooldID equals si.SI_ID
                                     join sai in _dataContext.SchoolAreaInfos on amp.AMP_SAreaID equals sai.SAI_ID
                                     join bbi in _dataContext.BuildingBriefInfos on amp.AMP_BuildingID equals bbi.BDI_ID
                                     join ri in _dataContext.RoomInfos on amp.AMP_RoomID equals ri.RI_ID
                                     join ah in _dataContext.AnalogHistories on amp.AMP_AnalogNo equals ah.AH_AnalogNo
                                     where amp.AMP_RoomID > 0 && amp.AMP_Statistic == 1 && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, ri.RI_RoomCode, bbi.BDI_Name, sai.SAI_Name, si.SI_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.SI_Name + ">" + g.Key.SAI_Name + ">" + g.Key.BDI_Name + ">" + g.Key.RI_RoomCode,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max()
                                     };
                    }
                    if (powerTypes != null)
                    {
                        maxValList = maxValList.Where(x => powerTypes.Contains(x.PowerType));
                        minValList = minValList.Where(x => powerTypes.Contains(x.PowerType));
                    }
                    list = from temp in
                               (from max in maxValList
                                from min in minValList
                                where max.PNO == min.PNO && max.IName == min.IName
                                select new
                                {
                                    PNO = max.PNO,
                                    IName = max.IName,
                                    Val = max.Val - min.Val
                                })
                           group temp.Val by temp.IName into g
                           select new ChartStatisEntity
                           {
                               Name = g.Key,
                               StatisVal = g.Sum(),
                               Sum = sum
                           };
                    break;
                case 5:
                    if (ids != null)
                    {
                        maxValList = from amp in _dataContext.AnalogMeasurePoints
                                     from ah in _dataContext.AnalogHistories
                                     where ids.Contains(amp.AMP_AnalogNo) && amp.AMP_AnalogNo == ah.AH_AnalogNo && ah.AH_Time <= endTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.AMP_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                         Area = Convert.ToDouble(0)
                                     };
                        minValList = from amp in _dataContext.AnalogMeasurePoints
                                     from ah in _dataContext.AnalogHistories
                                     where ids.Contains(amp.AMP_AnalogNo) && amp.AMP_AnalogNo == ah.AH_AnalogNo && ah.AH_Time <= startTime
                                     group ah.AH_Value by new { amp.AMP_AnalogNo, amp.AMP_Name, amp.AMP_PowerType } into g
                                     select new
                                     {
                                         PNO = g.Key.AMP_AnalogNo,
                                         IName = g.Key.AMP_Name,
                                         PowerType = g.Key.AMP_PowerType,
                                         Val = g.Max(),
                                     };
                        list = from max in maxValList
                               from min in minValList
                               where max.PNO == min.PNO
                               select new ChartStatisEntity
                               {
                                   Name = max.IName,
                                   StatisVal = max.Val - min.Val,
                                   Sum = sum
                               };
                    }
                    break;
                default:
                    break;
            }
            return list;

        }

        /// <summary>
        /// 导入月历史测点数据，如果月份与最新的数据不连续，则取导入月份的测点值为最早时间的值，即可能会造成不连续的月份查询值为0，实际上这之间是有值的
        /// </summary>
        /// <param name="excelData">第一行为导入的测点月份，格式为yyyy-mm，格式不正确则忽略导入该月份，第一列为导入的测点编号</param>
        /// <param name="powerType">只允许添加的测点类型，为空表示可以添加任何类型测点</param>
        /// <returns>返回成功导入的测点月历史数据的测点个数，部分测点可能因为值输入值不正确导致只导入部分月份值</returns>
        public int ImportMonthData(DataSet excelData, string powerType)
        {
            int successCount = 0;
            var dataTable = excelData.Tables[0];
            var dateCount = dataTable.Rows[0].ItemArray.Length;
            if (dateCount > 1)
            {
                // 第一行月日期
                Dictionary<DateTime, int> dateDic = new Dictionary<DateTime, int>();
                DateTime date = DateTime.Now;
                // 从第三列开始
                for (int i = 2; i < dateCount; i++)
                {
                    string dateStr = dataTable.Rows[0][i].ToString();
                    // 日期格式为yyyy-mm
                    if (Regex.IsMatch(dateStr, "^\\d{4}-\\d{1,2}$") && DateTime.TryParse(dateStr, out date))
                    {
                        //date = date.AddMonths(1).AddMinutes(-1);
                        dateDic[date] = i;
                    }
                }
                if (dateDic.Count > 0) // 判断日期格式是否有正确的，已经废弃掉格式不正确的
                {
                    // 排序好的日期对应的列下标
                    var descOrderDateDicList = dateDic.OrderByDescending(x => x.Key).ToList();
                    var ascOrderDateDicList = dateDic.OrderBy(x => x.Key).ToList();

                    // 将要增加的AnalogHistory对象
                    List<AnalogHistory> ahList = new List<AnalogHistory>();
                    // 从第二行开始
                    for (int i = 1; i < dataTable.Rows.Count; i++)
                    {
                        int pointId = 0;
                        if (Int32.TryParse(dataTable.Rows[i][1].ToString(), out pointId) && pointId > 0)
                        {
                            var amp = _dataContext.AnalogMeasurePoints.Where(x => x.AMP_AnalogNo == pointId).FirstOrDefault();
                            if (amp == null || (!String.IsNullOrWhiteSpace(powerType) && amp.AMP_PowerType != powerType)) // 测点不存在或者是否指定类型测点，比如指定必须为历史用电类型测点
                            {
                                continue;
                            }
                            // 找出该测点最小时间及其值
                            var minObj = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == pointId).OrderBy(x => x.AH_Time).FirstOrDefault();
                            // 该测点数据成功导入
                            bool pointAddedSuccess = false;
                            if (minObj != null) // 之前是有数据的，即添加的旧测点
                            {
                                var nextDateTime = new DateTime(minObj.AH_Time.Year, minObj.AH_Time.Month, 1).AddMonths(1);
                                // 找出该测点有值的开始月份的最大值
                                var firstMaxObj = _dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == pointId && x.AH_Time < nextDateTime).OrderByDescending(x => x.AH_Time).FirstOrDefault();
                                var lastObj = firstMaxObj;
                                var preObj = minObj;
                                foreach (var item in descOrderDateDicList)
                                {
                                    if (item.Key < lastObj.AH_Time)
                                    {
                                        var currentDate = item.Key;
                                        float currentVal = float.MinValue;
                                        if (!float.TryParse(dataTable.Rows[i][item.Value].ToString(), out currentVal) || currentVal < 0)
                                        {
                                            // 第i+1行第item.Value+1列出问题
                                            break;
                                        }
                                        // 如果当月或者上个月
                                        if (currentDate.AddMonths(1) >= lastObj.AH_Time)
                                        {
                                            AnalogHistory ah = new AnalogHistory();
                                            ah.AH_AnalogNo = pointId;
                                            // 设置为上个月最后时间
                                            ah.AH_Time = currentDate.AddMinutes(-1);
                                            ah.AH_Value = lastObj.AH_Value - currentVal;
                                            ahList.Add(ah);
                                            lastObj = ah;
                                            preObj = lastObj;
                                        }
                                        else //隔了一个月以上，需要首先把所要增加月最后一刻设置前面月的最小值，再设置上月最后一刻的值
                                        {
                                            AnalogHistory nextAh = new AnalogHistory();
                                            nextAh.AH_AnalogNo = pointId;
                                            nextAh.AH_Time = currentDate.AddMonths(1).AddMinutes(-1);
                                            nextAh.AH_Value = preObj.AH_Value;
                                            ahList.Add(nextAh);
                                            AnalogHistory preAh = new AnalogHistory();
                                            preAh.AH_AnalogNo = pointId;
                                            preAh.AH_Time = currentDate.AddMinutes(-1);
                                            preAh.AH_Value = nextAh.AH_Value - currentVal;
                                            ahList.Add(preAh);
                                            lastObj = preAh;
                                            preObj = lastObj;
                                        }
                                        pointAddedSuccess = true;
                                    }
                                }
                            }
                            else // 之前没有数据，即添加的是新测点
                            {
                                AnalogHistory preObj = null;

                                foreach (var item in ascOrderDateDicList)
                                {
                                    var currentDate = item.Key;
                                    float currentVal = float.MinValue;
                                    if (!float.TryParse(dataTable.Rows[i][item.Value].ToString(), out currentVal) || currentVal < 0)
                                    {
                                        // 第i+1行第item.Value+1列出问题
                                        break;
                                    }
                                    if (preObj == null) // 即第一个测点历史设置从0值开始
                                    {
                                        AnalogHistory preAh = new AnalogHistory();
                                        preAh.AH_AnalogNo = pointId;
                                        preAh.AH_Time = currentDate.AddMinutes(-1);
                                        preAh.AH_Value = 0;
                                        ahList.Add(preAh);
                                        AnalogHistory currentAh = new AnalogHistory();
                                        currentAh.AH_AnalogNo = pointId;
                                        currentAh.AH_Time = currentDate.AddMonths(1).AddMinutes(-1);
                                        currentAh.AH_Value = currentVal;
                                        ahList.Add(currentAh);
                                        preObj = currentAh;
                                    }
                                    else
                                    {
                                        if (currentDate <= preObj.AH_Time.AddMonths(1)) // 下个月
                                        {
                                            AnalogHistory currentAh = new AnalogHistory();
                                            currentAh.AH_AnalogNo = pointId;
                                            currentAh.AH_Time = currentDate.AddMonths(1).AddMinutes(-1);
                                            currentAh.AH_Value = preObj.AH_Value + currentVal;
                                            ahList.Add(currentAh);
                                            preObj = currentAh;
                                        }
                                        else //隔了一个月以上，需要首先把所要增加月上个月最大值设置为前面月的最大值，再设置当月值，即中间隔了几个月值认为是0
                                        {
                                            AnalogHistory preAh = new AnalogHistory();
                                            preAh.AH_AnalogNo = pointId;
                                            preAh.AH_Time = currentDate.AddMinutes(-1);
                                            preAh.AH_Value = preObj.AH_Value;
                                            ahList.Add(preAh);
                                            AnalogHistory currentAh = new AnalogHistory();
                                            currentAh.AH_AnalogNo = pointId;
                                            currentAh.AH_Time = currentDate.AddMonths(1).AddMinutes(-1);
                                            currentAh.AH_Value = preAh.AH_Value + currentVal;
                                            ahList.Add(currentAh);
                                            preObj = currentAh;
                                        }
                                    }
                                    pointAddedSuccess = true;
                                }
                            }
                            // 增加成功导入数据的测点数
                            if (pointAddedSuccess)
                            {
                                successCount++;
                            }
                        }
                    }
                    if (ahList.Count > 0)
                    {
                        try
                        {
                            _dataContext.AnalogHistories.InsertAllOnSubmit(ahList);
                            _dataContext.SubmitChanges();
                        }
                        catch (Exception)
                        {
                            return 0;
                        }
                    }
                }
            }
            return successCount;
        }

        /// <summary>
        /// 导入月历史测点数据，仅能导入“001006”的用电类型，即当前数据库中历史用电类型，如果月份与最新的数据不连续，则取导入月份的测点值为最早时间的值，即可能会造成不连续的月份查询值为0，实际上这之间是有值的
        /// </summary>
        /// <param name="excelData">第一行为导入的测点月份，格式为yyyy-mm，格式不正确则忽略导入该月份，第一列为导入的测点编号</param>
        /// <returns>返回成功导入的测点月历史数据的测点个数，部分测点可能因为值输入值不正确导致只导入部分月份值</returns>
        public int ImportMonthData(DataSet excelData)
        {
            return ImportMonthData(excelData, "001006");
        }

        #endregion

        /// <summary>
        /// 查询指定测点某段时间每小时能耗读数
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public IQueryable<EnergyEntity> GetHourEnergyHistoryByAnalogNo(int analogNo, DateTime startTime, DateTime endTime)
        {
            var tempQuery = from ah in _dataContext.AnalogHistories
                            where ah.AH_AnalogNo == analogNo && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                            select new
                            {
                                PNO = ah.AH_AnalogNo,
                                Time = new DateTime(ah.AH_Time.Year, ah.AH_Time.Month, ah.AH_Time.Day, ah.AH_Time.Hour , 0 , 0),
                                Val = ah.AH_Value
                            };
            var resultQuery = from ah1 in tempQuery group ah1.Val by new {ah1.PNO , ah1.Time} into g orderby g.Key.Time
                              select new EnergyEntity{
                                   PNO = g.Key.PNO,
                                   STime = g.Key.Time,
                                   RealTime = g.Key.Time,
                                   Val = g.Max()
                              };
            return resultQuery;
        }

        /// <summary>
        /// 查询指定测点某段时间每天能耗读数
        /// </summary>
        /// <param name="analogNo"></param>
        /// <param name="startTime"></param>
        /// <param name="endTime"></param>
        /// <returns></returns>
        public IQueryable<EnergyEntity> GetdayEnergyHistoryByAnalogNo(int analogNo, DateTime startTime, DateTime endTime)
        {
            var resultQuery = from ah in _dataContext.AnalogHistories
                              where ah.AH_AnalogNo == analogNo && ah.AH_Time >= startTime && ah.AH_Time <= endTime
                              group ah.AH_Value by new {ah.AH_AnalogNo , ah.AH_Time.Date} into g orderby g.Key.Date select new EnergyEntity
                              {
                                  PNO = g.Key.AH_AnalogNo,
                                  STime = g.Key.Date,
                                  RealTime = g.Key.Date,
                                  Val = g.Max()
                              };
            return resultQuery;
        }


        public bool UpdateHistoryValOfAnalogNo(int analogNo, DateTime startTime, DateTime endTime, IList<AnalogMeasurePoint> sonPointsList)
        {
            try
            {
                _dataContext.AnalogHistories.DeleteAllOnSubmit(_dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo 
                    && x.AH_Time >= startTime && x.AH_Time <= endTime));
                DateTime initialTime = new DateTime(2012 , 1 , 1 , 0 , 0 , 0);
                IList<AnalogHistory> ahList = new List<AnalogHistory>();
                IList<DateTime> tList = new List<DateTime>();//保存子测点当前时间以前，最近一条能耗数据记录的时间
                IList<Double> vList = new List<Double>();//保存子测点当前时间以前，最近一条能耗数据记录的能耗读数
                for (int i = 0; i < sonPointsList.Count(); i++)
                {
                    tList.Add(new DateTime(2012, 1, 1, 0, 0, 0));
                    vList.Add(-1);//-1表示还没有去找最近一条记录
                }
                DateTime lastTime = initialTime; //保存更新测点当前时间以前，最近一条能耗数据记录的时间
                while (startTime <= endTime)
                {
                    double AH_Value = 0.0;
                    DateTime AH_Time = initialTime;
                    for (int i = 0; i < sonPointsList.Count(); i++)
                    {
                        AnalogMeasurePoint amp = sonPointsList[i];
                        //如果子测点的最新更新时间小于当前时间，说明该测点已经停止采集，则直接加上停止时的采集值即可
                        if (amp.AMP_Date <= startTime)
                        {
                            AH_Value += amp.AMP_Val;
                            AH_Time = DateTime.Compare(AH_Time , amp.AMP_Date) > 0 ? AH_Time : amp.AMP_Date;
                        }
                        else
                        {
                            AnalogHistory ah = new AnalogHistory();
                            if (vList[i] >= 0)//如果上个时间点已经寻找过最近一条记录，那么只要从该记录的时间到当前时间，去寻找和更新最近一条记录
                            {
                                ah = (from x in _dataContext.AnalogHistories
                                      where x.AH_AnalogNo == amp.AMP_AnalogNo && x.AH_Time <= startTime && x.AH_Time >= tList[i]
                                      orderby x.AH_Time descending
                                      select x).FirstOrDefault();
                                if (ah == null)
                                {
                                    AH_Value += vList[i];
                                    AH_Time = DateTime.Compare(AH_Time , tList[i])>0 ? AH_Time : tList[i];
                                }
                            }
                            else//如果上个时间点没有寻找过最近一条记录，那么一步一步往前找
                            {
                                tList[i] = startTime.AddDays(-1);
                                while (DateTime.Compare(tList[i] ,  initialTime) > 0)
                                {
                                    ah = (from x in _dataContext.AnalogHistories
                                           where x.AH_AnalogNo == amp.AMP_AnalogNo && x.AH_Time <= startTime && x.AH_Time >= tList[i]
                                           orderby x.AH_Time descending
                                           select x).FirstOrDefault();
                                    tList[i] = tList[i].AddDays(-30);
                                }
                                if (ah == null)
                                {
                                    tList[i] = initialTime;
                                    vList[i] = 0;
                                }
                            }
                            if (ah != null)
                            {
                                AH_Value += ah.AH_Value;
                                AH_Time = DateTime.Compare(AH_Time , ah.AH_Time)>0 ? AH_Time : ah.AH_Time;
                                tList[i] = ah.AH_Time;
                                vList[i] = ah.AH_Value;
                            }
                        }
                    }
                    if (DateTime.Compare(lastTime, initialTime) == 0)
                    {
                        if (_dataContext.AnalogHistories.Where(x => x.AH_AnalogNo == analogNo && x.AH_Time == AH_Time).Count() != 0)
                        {
                            lastTime = AH_Time;
                        }
                    }
                    if (DateTime.Compare(AH_Time , lastTime) > 0)
                    {
                        lastTime = AH_Time;
                        ahList.Add(new AnalogHistory { 
                            AH_AnalogNo = analogNo,
                            AH_Time = AH_Time,
                            AH_Value = AH_Value
                        });
                    }
                    startTime = startTime.AddMinutes(15);
                }
                _dataContext.AnalogHistories.InsertAllOnSubmit(ahList);
                _dataContext.SubmitChanges();
                return true;
            }catch (Exception e)
            {
                System.Console.WriteLine(e.Message);
                return false;
            }
        }
    }
}
